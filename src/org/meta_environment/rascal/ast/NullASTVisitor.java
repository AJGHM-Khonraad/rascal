package org.meta_environment.rascal.ast; 
import org.eclipse.imp.pdb.facts.ITree; 
public class NullASTVisitor<T> implements IASTVisitor<T> {
public T visitBodyToplevels(Body.Toplevels x) { return null; } public T visitCommentLexical(Comment.Lexical x) { return null; } public T visitCommentCharLexical(CommentChar.Lexical x) { return null; } public T visitAsteriskLexical(Asterisk.Lexical x) { return null; } public T visitNameLexical(Name.Lexical x) { return null; } public T visitQualifiedNameDefault(QualifiedName.Default x) { return null; } public T visitBoundDefault(Bound.Default x) { return null; } public T visitBoundEmpty(Bound.Empty x) { return null; } public T visitStatementGlobalDirective(Statement.GlobalDirective x) { return null; } public T visitStatementVariableDeclaration(Statement.VariableDeclaration x) { return null; } public T visitStatementFunctionDeclaration(Statement.FunctionDeclaration x) { return null; } public T visitStatementBlock(Statement.Block x) { return null; } public T visitStatementTryFinally(Statement.TryFinally x) { return null; } public T visitStatementTry(Statement.Try x) { return null; } public T visitStatementThrow(Statement.Throw x) { return null; } public T visitStatementInsert(Statement.Insert x) { return null; } public T visitStatementAssert(Statement.Assert x) { return null; } public T visitStatementContinue(Statement.Continue x) { return null; } public T visitStatementReturn(Statement.Return x) { return null; } public T visitStatementFail(Statement.Fail x) { return null; } public T visitStatementBreak(Statement.Break x) { return null; } public T visitStatementAssignment(Statement.Assignment x) { return null; } public T visitStatementVisit(Statement.Visit x) { return null; } public T visitStatementExpression(Statement.Expression x) { return null; } public T visitStatementEmptyStatement(Statement.EmptyStatement x) { return null; } public T visitStatementSwitch(Statement.Switch x) { return null; } public T visitStatementIfThen(Statement.IfThen x) { return null; } public T visitStatementIfThenElse(Statement.IfThenElse x) { return null; } public T visitStatementDoWhile(Statement.DoWhile x) { return null; } public T visitStatementWhile(Statement.While x) { return null; } public T visitStatementFirst(Statement.First x) { return null; } public T visitStatementAll(Statement.All x) { return null; } public T visitStatementFor(Statement.For x) { return null; } public T visitStatementSolve(Statement.Solve x) { return null; } public T visitNoElseMayFollowDefault(NoElseMayFollow.Default x) { return null; } public T visitAssignableConstructor(Assignable.Constructor x) { return null; } public T visitAssignableTuple(Assignable.Tuple x) { return null; } public T visitAssignableAnnotation(Assignable.Annotation x) { return null; } public T visitAssignableIfDefined(Assignable.IfDefined x) { return null; } public T visitAssignableFieldAccess(Assignable.FieldAccess x) { return null; } public T visitAssignableSubscript(Assignable.Subscript x) { return null; } public T visitAssignableVariable(Assignable.Variable x) { return null; } public T visitAssignmentIntersection(Assignment.Intersection x) { return null; } public T visitAssignmentDivision(Assignment.Division x) { return null; } public T visitAssignmentProduct(Assignment.Product x) { return null; } public T visitAssignmentSubtraction(Assignment.Subtraction x) { return null; } public T visitAssignmentAddition(Assignment.Addition x) { return null; } public T visitAssignmentDefault(Assignment.Default x) { return null; } public T visitLabelDefault(Label.Default x) { return null; } public T visitLabelEmpty(Label.Empty x) { return null; } public T visitExpressionLexical(Expression.Lexical x) { return null; } public T visitExpressionOr(Expression.Or x) { return null; } public T visitExpressionAnd(Expression.And x) { return null; } public T visitExpressionEquivalence(Expression.Equivalence x) { return null; } public T visitExpressionImplication(Expression.Implication x) { return null; } public T visitExpressionNonEquals(Expression.NonEquals x) { return null; } public T visitExpressionEquals(Expression.Equals x) { return null; } public T visitExpressionGreaterThanOrEq(Expression.GreaterThanOrEq x) { return null; } public T visitExpressionGreaterThan(Expression.GreaterThan x) { return null; } public T visitExpressionLessThanOrEq(Expression.LessThanOrEq x) { return null; } public T visitExpressionLessThan(Expression.LessThan x) { return null; } public T visitExpressionIfDefined(Expression.IfDefined x) { return null; } public T visitExpressionIn(Expression.In x) { return null; } public T visitExpressionNotIn(Expression.NotIn x) { return null; } public T visitExpressionSubtraction(Expression.Subtraction x) { return null; } public T visitExpressionAddition(Expression.Addition x) { return null; } public T visitExpressionIntersection(Expression.Intersection x) { return null; } public T visitExpressionModulo(Expression.Modulo x) { return null; } public T visitExpressionDivision(Expression.Division x) { return null; } public T visitExpressionProduct(Expression.Product x) { return null; } public T visitExpressionComposition(Expression.Composition x) { return null; } public T visitExpressionAnnotation(Expression.Annotation x) { return null; } public T visitExpressionTransitiveClosure(Expression.TransitiveClosure x) { return null; } public T visitExpressionTransitiveReflexiveClosure(Expression.TransitiveReflexiveClosure x) { return null; } public T visitExpressionNegative(Expression.Negative x) { return null; } public T visitExpressionNegation(Expression.Negation x) { return null; } public T visitExpressionSubscript(Expression.Subscript x) { return null; } public T visitExpressionFieldProject(Expression.FieldProject x) { return null; } public T visitExpressionFieldAccess(Expression.FieldAccess x) { return null; } public T visitExpressionFieldUpdate(Expression.FieldUpdate x) { return null; } public T visitExpressionClosureCall(Expression.ClosureCall x) { return null; } public T visitExpressionFunctionAsValue(Expression.FunctionAsValue x) { return null; } public T visitExpressionOperatorAsValue(Expression.OperatorAsValue x) { return null; } public T visitExpressionStepRange(Expression.StepRange x) { return null; } public T visitExpressionRange(Expression.Range x) { return null; } public T visitExpressionBracket(Expression.Bracket x) { return null; } public T visitExpressionVoidClosure(Expression.VoidClosure x) { return null; } public T visitExpressionClosure(Expression.Closure x) { return null; } public T visitExpressionVisit(Expression.Visit x) { return null; } public T visitExpressionExists(Expression.Exists x) { return null; } public T visitExpressionForAll(Expression.ForAll x) { return null; } public T visitExpressionComprehension(Expression.Comprehension x) { return null; } public T visitExpressionNoMatch(Expression.NoMatch x) { return null; } public T visitExpressionMatch(Expression.Match x) { return null; } public T visitExpressionIfThenElse(Expression.IfThenElse x) { return null; } public T visitExpressionTypedVariable(Expression.TypedVariable x) { return null; } public T visitExpressionQualifiedName(Expression.QualifiedName x) { return null; } public T visitExpressionArea(Expression.Area x) { return null; } public T visitExpressionAreaInFileLocation(Expression.AreaInFileLocation x) { return null; } public T visitExpressionFileLocation(Expression.FileLocation x) { return null; } public T visitExpressionMap(Expression.Map x) { return null; } public T visitExpressionTuple(Expression.Tuple x) { return null; } public T visitExpressionSet(Expression.Set x) { return null; } public T visitExpressionList(Expression.List x) { return null; } public T visitExpressionCallOrTree(Expression.CallOrTree x) { return null; } public T visitExpressionLiteral(Expression.Literal x) { return null; } public T visitExpressionNonEmptyBlock(Expression.NonEmptyBlock x) { return null; } public T visitBreakNoLabel(Break.NoLabel x) { return null; } public T visitBreakWithLabel(Break.WithLabel x) { return null; } public T visitFailNoLabel(Fail.NoLabel x) { return null; } public T visitFailWithLabel(Fail.WithLabel x) { return null; } public T visitReturnNoExpression(Return.NoExpression x) { return null; } public T visitReturnWithExpression(Return.WithExpression x) { return null; } public T visitCatchBinding(Catch.Binding x) { return null; } public T visitCatchDefault(Catch.Default x) { return null; } public T visitDeclaratorDefault(Declarator.Default x) { return null; } public T visitLocalVariableDeclarationDynamic(LocalVariableDeclaration.Dynamic x) { return null; } public T visitLocalVariableDeclarationDefault(LocalVariableDeclaration.Default x) { return null; } public T visitBasicTypeArea(BasicType.Area x) { return null; } public T visitBasicTypeLoc(BasicType.Loc x) { return null; } public T visitBasicTypeVoid(BasicType.Void x) { return null; } public T visitBasicTypeTree(BasicType.Tree x) { return null; } public T visitBasicTypeValue(BasicType.Value x) { return null; } public T visitBasicTypeString(BasicType.String x) { return null; } public T visitBasicTypeReal(BasicType.Real x) { return null; } public T visitBasicTypeInt(BasicType.Int x) { return null; } public T visitBasicTypeBool(BasicType.Bool x) { return null; } public T visitTypeArgNamed(TypeArg.Named x) { return null; } public T visitTypeArgDefault(TypeArg.Default x) { return null; } public T visitStructuredTypeTuple(StructuredType.Tuple x) { return null; } public T visitStructuredTypeRelation(StructuredType.Relation x) { return null; } public T visitStructuredTypeMap(StructuredType.Map x) { return null; } public T visitStructuredTypeSet(StructuredType.Set x) { return null; } public T visitStructuredTypeList(StructuredType.List x) { return null; } public T visitFunctionTypeTypeArguments(FunctionType.TypeArguments x) { return null; } public T visitTypeVarBounded(TypeVar.Bounded x) { return null; } public T visitTypeVarFree(TypeVar.Free x) { return null; } public T visitUserTypeParametric(UserType.Parametric x) { return null; } public T visitUserTypeName(UserType.Name x) { return null; } public T visitDataTypeSelectorSelector(DataTypeSelector.Selector x) { return null; } public T visitTypeSelector(Type.Selector x) { return null; } public T visitTypeSymbol(Type.Symbol x) { return null; } public T visitTypeUser(Type.User x) { return null; } public T visitTypeVariable(Type.Variable x) { return null; } public T visitTypeFunction(Type.Function x) { return null; } public T visitTypeStructured(Type.Structured x) { return null; } public T visitTypeBasic(Type.Basic x) { return null; } public T visitModuleDefault(Module.Default x) { return null; } public T visitModuleActualsDefault(ModuleActuals.Default x) { return null; } public T visitImportedModuleDefault(ImportedModule.Default x) { return null; } public T visitImportedModuleRenamings(ImportedModule.Renamings x) { return null; } public T visitImportedModuleActuals(ImportedModule.Actuals x) { return null; } public T visitImportedModuleActualsRenaming(ImportedModule.ActualsRenaming x) { return null; } public T visitRenamingDefault(Renaming.Default x) { return null; } public T visitRenamingsDefault(Renamings.Default x) { return null; } public T visitImportExtend(Import.Extend x) { return null; } public T visitImportDefault(Import.Default x) { return null; } public T visitModuleParametersDefault(ModuleParameters.Default x) { return null; } public T visitHeaderParameters(Header.Parameters x) { return null; } public T visitHeaderDefault(Header.Default x) { return null; } public T visitStrCharLexical(StrChar.Lexical x) { return null; } public T visitStrCharnewline(StrChar.newline x) { return null; } public T visitStrConLexical(StrCon.Lexical x) { return null; } public T visitSortLexical(Sort.Lexical x) { return null; } public T visitSymbolCaseInsensitiveLiteral(Symbol.CaseInsensitiveLiteral x) { return null; } public T visitSymbolLiteral(Symbol.Literal x) { return null; } public T visitSymbolLiftedSymbol(Symbol.LiftedSymbol x) { return null; } public T visitSymbolCharacterClass(Symbol.CharacterClass x) { return null; } public T visitSymbolAlternative(Symbol.Alternative x) { return null; } public T visitSymbolIterStarSep(Symbol.IterStarSep x) { return null; } public T visitSymbolIterSep(Symbol.IterSep x) { return null; } public T visitSymbolIterStar(Symbol.IterStar x) { return null; } public T visitSymbolIter(Symbol.Iter x) { return null; } public T visitSymbolOptional(Symbol.Optional x) { return null; } public T visitSymbolSequence(Symbol.Sequence x) { return null; } public T visitSymbolEmpty(Symbol.Empty x) { return null; } public T visitSymbolParameterizedSort(Symbol.ParameterizedSort x) { return null; } public T visitSymbolSort(Symbol.Sort x) { return null; } public T visitSingleQuotedStrCharLexical(SingleQuotedStrChar.Lexical x) { return null; } public T visitSingleQuotedStrConLexical(SingleQuotedStrCon.Lexical x) { return null; } public T visitCharRangeRange(CharRange.Range x) { return null; } public T visitCharRangeCharacter(CharRange.Character x) { return null; } public T visitCharRangesBracket(CharRanges.Bracket x) { return null; } public T visitCharRangesConcatenate(CharRanges.Concatenate x) { return null; } public T visitCharRangesRange(CharRanges.Range x) { return null; } public T visitOptCharRangesPresent(OptCharRanges.Present x) { return null; } public T visitOptCharRangesAbsent(OptCharRanges.Absent x) { return null; } public T visitCharClassUnion(CharClass.Union x) { return null; } public T visitCharClassIntersection(CharClass.Intersection x) { return null; } public T visitCharClassDifference(CharClass.Difference x) { return null; } public T visitCharClassComplement(CharClass.Complement x) { return null; } public T visitCharClassBracket(CharClass.Bracket x) { return null; } public T visitCharClassSimpleCharclass(CharClass.SimpleCharclass x) { return null; } public T visitNumCharLexical(NumChar.Lexical x) { return null; } public T visitShortCharLexical(ShortChar.Lexical x) { return null; } public T visitCharacterLabelStart(Character.LabelStart x) { return null; } public T visitCharacterBottom(Character.Bottom x) { return null; } public T visitCharacterEOF(Character.EOF x) { return null; } public T visitCharacterTop(Character.Top x) { return null; } public T visitCharacterShort(Character.Short x) { return null; } public T visitCharacterNumeric(Character.Numeric x) { return null; } public T visitCommandImport(Command.Import x) { return null; } public T visitCommandDeclaration(Command.Declaration x) { return null; } public T visitCommandStatement(Command.Statement x) { return null; } public T visitCommandShell(Command.Shell x) { return null; } public T visitShellCommandHistory(ShellCommand.History x) { return null; } public T visitShellCommandEdit(ShellCommand.Edit x) { return null; } public T visitShellCommandQuit(ShellCommand.Quit x) { return null; } public T visitShellCommandHelp(ShellCommand.Help x) { return null; } public T visitRegExpLiteralLexical(RegExpLiteral.Lexical x) { return null; } public T visitRegExpModifierLexical(RegExpModifier.Lexical x) { return null; } public T visitBackslashLexical(Backslash.Lexical x) { return null; } public T visitRegExpLexical(RegExp.Lexical x) { return null; } public T visitNamedRegExpLexical(NamedRegExp.Lexical x) { return null; } public T visitNamedBackslashLexical(NamedBackslash.Lexical x) { return null; } public T visitMappingDefault(Mapping.Default x) { return null; } public T visitTagStringLexical(TagString.Lexical x) { return null; } public T visitTagCharLexical(TagChar.Lexical x) { return null; } public T visitTagDefault(Tag.Default x) { return null; } public T visitTagsDefault(Tags.Default x) { return null; } public T visitValueProducerGivenStrategy(ValueProducer.GivenStrategy x) { return null; } public T visitValueProducerDefaultStrategy(ValueProducer.DefaultStrategy x) { return null; } public T visitGeneratorProducer(Generator.Producer x) { return null; } public T visitGeneratorExpression(Generator.Expression x) { return null; } public T visitStrategyInnermost(Strategy.Innermost x) { return null; } public T visitStrategyOutermost(Strategy.Outermost x) { return null; } public T visitStrategyBottomUpBreak(Strategy.BottomUpBreak x) { return null; } public T visitStrategyBottomUp(Strategy.BottomUp x) { return null; } public T visitStrategyTopDownBreak(Strategy.TopDownBreak x) { return null; } public T visitStrategyTopDown(Strategy.TopDown x) { return null; } public T visitComprehensionMap(Comprehension.Map x) { return null; } public T visitComprehensionList(Comprehension.List x) { return null; } public T visitComprehensionSet(Comprehension.Set x) { return null; } public T visitReplacementConditional(Replacement.Conditional x) { return null; } public T visitReplacementUnconditional(Replacement.Unconditional x) { return null; } public T visitRuleGuarded(Rule.Guarded x) { return null; } public T visitRuleArbitrary(Rule.Arbitrary x) { return null; } public T visitRuleReplacing(Rule.Replacing x) { return null; } public T visitCaseDefault(Case.Default x) { return null; } public T visitCaseRule(Case.Rule x) { return null; } public T visitVisitGivenStrategy(Visit.GivenStrategy x) { return null; } public T visitVisitDefaultStrategy(Visit.DefaultStrategy x) { return null; } public T visitLiteralString(Literal.String x) { return null; } public T visitLiteralReal(Literal.Real x) { return null; } public T visitLiteralInteger(Literal.Integer x) { return null; } public T visitLiteralBoolean(Literal.Boolean x) { return null; } public T visitLiteralRegExp(Literal.RegExp x) { return null; } public T visitUnicodeEscapeLexical(UnicodeEscape.Lexical x) { return null; } public T visitDecimalIntegerLiteralLexical(DecimalIntegerLiteral.Lexical x) { return null; } public T visitHexIntegerLiteralLexical(HexIntegerLiteral.Lexical x) { return null; } public T visitOctalIntegerLiteralLexical(OctalIntegerLiteral.Lexical x) { return null; } public T visitDecimalLongLiteralLexical(DecimalLongLiteral.Lexical x) { return null; } public T visitHexLongLiteralLexical(HexLongLiteral.Lexical x) { return null; } public T visitOctalLongLiteralLexical(OctalLongLiteral.Lexical x) { return null; } public T visitRealLiteralLexical(RealLiteral.Lexical x) { return null; } public T visitBooleanLiteralLexical(BooleanLiteral.Lexical x) { return null; } public T visitSingleCharacterLexical(SingleCharacter.Lexical x) { return null; } public T visitCharacterLiteralLexical(CharacterLiteral.Lexical x) { return null; } public T visitEscapeSequenceLexical(EscapeSequence.Lexical x) { return null; } public T visitStringCharacterLexical(StringCharacter.Lexical x) { return null; } public T visitStringLiteralLexical(StringLiteral.Lexical x) { return null; } public T visitIntegerLiteralOctalIntegerLiteral(IntegerLiteral.OctalIntegerLiteral x) { return null; } public T visitIntegerLiteralHexIntegerLiteral(IntegerLiteral.HexIntegerLiteral x) { return null; } public T visitIntegerLiteralDecimalIntegerLiteral(IntegerLiteral.DecimalIntegerLiteral x) { return null; } public T visitLongLiteralOctalLongLiteral(LongLiteral.OctalLongLiteral x) { return null; } public T visitLongLiteralHexLongLiteral(LongLiteral.HexLongLiteral x) { return null; } public T visitLongLiteralDecimalLongLiteral(LongLiteral.DecimalLongLiteral x) { return null; } public T visitVisibilityPrivate(Visibility.Private x) { return null; } public T visitVisibilityPublic(Visibility.Public x) { return null; } public T visitToplevelDefaultVisibility(Toplevel.DefaultVisibility x) { return null; } public T visitToplevelGivenVisibility(Toplevel.GivenVisibility x) { return null; } public T visitDeclarationTag(Declaration.Tag x) { return null; } public T visitDeclarationAnnotation(Declaration.Annotation x) { return null; } public T visitDeclarationRule(Declaration.Rule x) { return null; } public T visitDeclarationVariable(Declaration.Variable x) { return null; } public T visitDeclarationFunction(Declaration.Function x) { return null; } public T visitDeclarationData(Declaration.Data x) { return null; } public T visitDeclarationType(Declaration.Type x) { return null; } public T visitDeclarationView(Declaration.View x) { return null; } public T visitAlternativeNamedType(Alternative.NamedType x) { return null; } public T visitVariantNillaryConstructor(Variant.NillaryConstructor x) { return null; } public T visitVariantNAryConstructor(Variant.NAryConstructor x) { return null; } public T visitVariantAnonymousConstructor(Variant.AnonymousConstructor x) { return null; } public T visitFunctionModifierJava(FunctionModifier.Java x) { return null; } public T visitFunctionModifiersList(FunctionModifiers.List x) { return null; } public T visitSignatureWithThrows(Signature.WithThrows x) { return null; } public T visitSignatureNoThrows(Signature.NoThrows x) { return null; } public T visitFunctionDeclarationAbstract(FunctionDeclaration.Abstract x) { return null; } public T visitFunctionDeclarationDefault(FunctionDeclaration.Default x) { return null; } public T visitFunctionBodyDefault(FunctionBody.Default x) { return null; } public T visitVariableInitialized(Variable.Initialized x) { return null; } public T visitVariableUnInitialized(Variable.UnInitialized x) { return null; } public T visitKindAll(Kind.All x) { return null; } public T visitKindTag(Kind.Tag x) { return null; } public T visitKindAnno(Kind.Anno x) { return null; } public T visitKindType(Kind.Type x) { return null; } public T visitKindView(Kind.View x) { return null; } public T visitKindData(Kind.Data x) { return null; } public T visitKindVariable(Kind.Variable x) { return null; } public T visitKindFunction(Kind.Function x) { return null; } public T visitKindModule(Kind.Module x) { return null; } public T visitFormalTypeName(Formal.TypeName x) { return null; } public T visitFormalsDefault(Formals.Default x) { return null; } public T visitParametersVarArgs(Parameters.VarArgs x) { return null; } public T visitParametersDefault(Parameters.Default x) { return null; } public T visitOperatorAsValueNotIn(OperatorAsValue.NotIn x) { return null; } public T visitOperatorAsValueIn(OperatorAsValue.In x) { return null; } public T visitOperatorAsValueNot(OperatorAsValue.Not x) { return null; } public T visitOperatorAsValueOr(OperatorAsValue.Or x) { return null; } public T visitOperatorAsValueAnd(OperatorAsValue.And x) { return null; } public T visitOperatorAsValueGreaterThanOrEq(OperatorAsValue.GreaterThanOrEq x) { return null; } public T visitOperatorAsValueGreaterThan(OperatorAsValue.GreaterThan x) { return null; } public T visitOperatorAsValueLessThanOrEq(OperatorAsValue.LessThanOrEq x) { return null; } public T visitOperatorAsValueLessThan(OperatorAsValue.LessThan x) { return null; } public T visitOperatorAsValueNotEquals(OperatorAsValue.NotEquals x) { return null; } public T visitOperatorAsValueEquals(OperatorAsValue.Equals x) { return null; } public T visitOperatorAsValueIntersection(OperatorAsValue.Intersection x) { return null; } public T visitOperatorAsValueDivision(OperatorAsValue.Division x) { return null; } public T visitOperatorAsValueProduct(OperatorAsValue.Product x) { return null; } public T visitOperatorAsValueSubtraction(OperatorAsValue.Subtraction x) { return null; } public T visitOperatorAsValueAddition(OperatorAsValue.Addition x) { return null; } public T visitFunctionAsValueDefault(FunctionAsValue.Default x) { return null; } public T visitFieldIndex(Field.Index x) { return null; } public T visitFieldName(Field.Name x) { return null; } public T visitClosureAsFunctionEvaluated(ClosureAsFunction.Evaluated x) { return null; }
public T visitBodyAmbiguity(Body.Ambiguity x) { return null; } public T visitCommentAmbiguity(Comment.Ambiguity x) { return null; } public T visitCommentCharAmbiguity(CommentChar.Ambiguity x) { return null; } public T visitAsteriskAmbiguity(Asterisk.Ambiguity x) { return null; } public T visitNameAmbiguity(Name.Ambiguity x) { return null; } public T visitQualifiedNameAmbiguity(QualifiedName.Ambiguity x) { return null; } public T visitBoundAmbiguity(Bound.Ambiguity x) { return null; } public T visitStatementAmbiguity(Statement.Ambiguity x) { return null; } public T visitNoElseMayFollowAmbiguity(NoElseMayFollow.Ambiguity x) { return null; } public T visitAssignableAmbiguity(Assignable.Ambiguity x) { return null; } public T visitAssignmentAmbiguity(Assignment.Ambiguity x) { return null; } public T visitLabelAmbiguity(Label.Ambiguity x) { return null; } public T visitExpressionAmbiguity(Expression.Ambiguity x) { return null; } public T visitBreakAmbiguity(Break.Ambiguity x) { return null; } public T visitFailAmbiguity(Fail.Ambiguity x) { return null; } public T visitReturnAmbiguity(Return.Ambiguity x) { return null; } public T visitCatchAmbiguity(Catch.Ambiguity x) { return null; } public T visitDeclaratorAmbiguity(Declarator.Ambiguity x) { return null; } public T visitLocalVariableDeclarationAmbiguity(LocalVariableDeclaration.Ambiguity x) { return null; } public T visitBasicTypeAmbiguity(BasicType.Ambiguity x) { return null; } public T visitTypeArgAmbiguity(TypeArg.Ambiguity x) { return null; } public T visitStructuredTypeAmbiguity(StructuredType.Ambiguity x) { return null; } public T visitFunctionTypeAmbiguity(FunctionType.Ambiguity x) { return null; } public T visitTypeVarAmbiguity(TypeVar.Ambiguity x) { return null; } public T visitUserTypeAmbiguity(UserType.Ambiguity x) { return null; } public T visitDataTypeSelectorAmbiguity(DataTypeSelector.Ambiguity x) { return null; } public T visitTypeAmbiguity(Type.Ambiguity x) { return null; } public T visitModuleAmbiguity(Module.Ambiguity x) { return null; } public T visitModuleActualsAmbiguity(ModuleActuals.Ambiguity x) { return null; } public T visitImportedModuleAmbiguity(ImportedModule.Ambiguity x) { return null; } public T visitRenamingAmbiguity(Renaming.Ambiguity x) { return null; } public T visitRenamingsAmbiguity(Renamings.Ambiguity x) { return null; } public T visitImportAmbiguity(Import.Ambiguity x) { return null; } public T visitModuleParametersAmbiguity(ModuleParameters.Ambiguity x) { return null; } public T visitHeaderAmbiguity(Header.Ambiguity x) { return null; } public T visitStrCharAmbiguity(StrChar.Ambiguity x) { return null; } public T visitStrConAmbiguity(StrCon.Ambiguity x) { return null; } public T visitSortAmbiguity(Sort.Ambiguity x) { return null; } public T visitSymbolAmbiguity(Symbol.Ambiguity x) { return null; } public T visitSingleQuotedStrCharAmbiguity(SingleQuotedStrChar.Ambiguity x) { return null; } public T visitSingleQuotedStrConAmbiguity(SingleQuotedStrCon.Ambiguity x) { return null; } public T visitCharRangeAmbiguity(CharRange.Ambiguity x) { return null; } public T visitCharRangesAmbiguity(CharRanges.Ambiguity x) { return null; } public T visitOptCharRangesAmbiguity(OptCharRanges.Ambiguity x) { return null; } public T visitCharClassAmbiguity(CharClass.Ambiguity x) { return null; } public T visitNumCharAmbiguity(NumChar.Ambiguity x) { return null; } public T visitShortCharAmbiguity(ShortChar.Ambiguity x) { return null; } public T visitCharacterAmbiguity(Character.Ambiguity x) { return null; } public T visitCommandAmbiguity(Command.Ambiguity x) { return null; } public T visitShellCommandAmbiguity(ShellCommand.Ambiguity x) { return null; } public T visitRegExpLiteralAmbiguity(RegExpLiteral.Ambiguity x) { return null; } public T visitRegExpModifierAmbiguity(RegExpModifier.Ambiguity x) { return null; } public T visitBackslashAmbiguity(Backslash.Ambiguity x) { return null; } public T visitRegExpAmbiguity(RegExp.Ambiguity x) { return null; } public T visitNamedRegExpAmbiguity(NamedRegExp.Ambiguity x) { return null; } public T visitNamedBackslashAmbiguity(NamedBackslash.Ambiguity x) { return null; } public T visitMappingAmbiguity(Mapping.Ambiguity x) { return null; } public T visitTagStringAmbiguity(TagString.Ambiguity x) { return null; } public T visitTagCharAmbiguity(TagChar.Ambiguity x) { return null; } public T visitTagAmbiguity(Tag.Ambiguity x) { return null; } public T visitTagsAmbiguity(Tags.Ambiguity x) { return null; } public T visitValueProducerAmbiguity(ValueProducer.Ambiguity x) { return null; } public T visitGeneratorAmbiguity(Generator.Ambiguity x) { return null; } public T visitStrategyAmbiguity(Strategy.Ambiguity x) { return null; } public T visitComprehensionAmbiguity(Comprehension.Ambiguity x) { return null; } public T visitReplacementAmbiguity(Replacement.Ambiguity x) { return null; } public T visitRuleAmbiguity(Rule.Ambiguity x) { return null; } public T visitCaseAmbiguity(Case.Ambiguity x) { return null; } public T visitVisitAmbiguity(Visit.Ambiguity x) { return null; } public T visitLiteralAmbiguity(Literal.Ambiguity x) { return null; } public T visitUnicodeEscapeAmbiguity(UnicodeEscape.Ambiguity x) { return null; } public T visitDecimalIntegerLiteralAmbiguity(DecimalIntegerLiteral.Ambiguity x) { return null; } public T visitHexIntegerLiteralAmbiguity(HexIntegerLiteral.Ambiguity x) { return null; } public T visitOctalIntegerLiteralAmbiguity(OctalIntegerLiteral.Ambiguity x) { return null; } public T visitDecimalLongLiteralAmbiguity(DecimalLongLiteral.Ambiguity x) { return null; } public T visitHexLongLiteralAmbiguity(HexLongLiteral.Ambiguity x) { return null; } public T visitOctalLongLiteralAmbiguity(OctalLongLiteral.Ambiguity x) { return null; } public T visitRealLiteralAmbiguity(RealLiteral.Ambiguity x) { return null; } public T visitBooleanLiteralAmbiguity(BooleanLiteral.Ambiguity x) { return null; } public T visitSingleCharacterAmbiguity(SingleCharacter.Ambiguity x) { return null; } public T visitCharacterLiteralAmbiguity(CharacterLiteral.Ambiguity x) { return null; } public T visitEscapeSequenceAmbiguity(EscapeSequence.Ambiguity x) { return null; } public T visitStringCharacterAmbiguity(StringCharacter.Ambiguity x) { return null; } public T visitStringLiteralAmbiguity(StringLiteral.Ambiguity x) { return null; } public T visitIntegerLiteralAmbiguity(IntegerLiteral.Ambiguity x) { return null; } public T visitLongLiteralAmbiguity(LongLiteral.Ambiguity x) { return null; } public T visitVisibilityAmbiguity(Visibility.Ambiguity x) { return null; } public T visitToplevelAmbiguity(Toplevel.Ambiguity x) { return null; } public T visitDeclarationAmbiguity(Declaration.Ambiguity x) { return null; } public T visitAlternativeAmbiguity(Alternative.Ambiguity x) { return null; } public T visitVariantAmbiguity(Variant.Ambiguity x) { return null; } public T visitFunctionModifierAmbiguity(FunctionModifier.Ambiguity x) { return null; } public T visitFunctionModifiersAmbiguity(FunctionModifiers.Ambiguity x) { return null; } public T visitSignatureAmbiguity(Signature.Ambiguity x) { return null; } public T visitFunctionDeclarationAmbiguity(FunctionDeclaration.Ambiguity x) { return null; } public T visitFunctionBodyAmbiguity(FunctionBody.Ambiguity x) { return null; } public T visitVariableAmbiguity(Variable.Ambiguity x) { return null; } public T visitKindAmbiguity(Kind.Ambiguity x) { return null; } public T visitFormalAmbiguity(Formal.Ambiguity x) { return null; } public T visitFormalsAmbiguity(Formals.Ambiguity x) { return null; } public T visitParametersAmbiguity(Parameters.Ambiguity x) { return null; } public T visitOperatorAsValueAmbiguity(OperatorAsValue.Ambiguity x) { return null; } public T visitFunctionAsValueAmbiguity(FunctionAsValue.Ambiguity x) { return null; } public T visitFieldAmbiguity(Field.Ambiguity x) { return null; } public T visitClosureAsFunctionAmbiguity(ClosureAsFunction.Ambiguity x) { return null; }
}