Name: UndeclaredFunction

Synopsis: A function is called that has not been declared.

Syntax:

Types:

Function:
       
Usage:

Details:

Description:
All functions, constructors and variables have to be declared before they can be used.
This error is generated when this rule is violated.

Remedies for functions:
* Declare the function.
* Declare the function as constructor of an (existing or new) [Rascal:AlgebraicDataType].
* Import a module that declares the function (Did you import all necessary library modules?)

Remedies for variables:
* Declare the variable.

Examples:
Calling the undeclared function `triple` gives an error:
<screen warnings>
triple(5)
// We can remedy this by declaring the function:
int triple(int n) = 3 * n;
triple(5)
</screen>

Calling the library function `size` gives an error if the proper library (in this case: `List`) is not imported
<screen warning>
size([20, 1, 77]);
</screen>
The solution is:
<screen>
import List;
size([20, 1, 77]);
</screen>
Another solution is to import the complete Rascal library at once:
<screen>
import Prelude;
size([20, 1, 77]);
</screen>

Using an undeclared variable gives an error:
<screen warnings>
n + 1;
</screen>
A variable is introduced by just assigning to it (with or without its expected type):
<screen>
n = 3;
n + 1;
</screen>
Or equivalenty (with an expected type):
<screen>
int n = 3;
n + 1;
</screen>

Benefits:

Pitfalls:

Questions:

       