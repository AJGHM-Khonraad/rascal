# Listing

.Synopsis
Markup for a source code listing.

.Syntax

`[source,rascal]` +
`----` +
_SourceLines_ +
`----`

.Types

.Function

.Details

.Description
A listing shows Rascal code without executing it. Source lines that start with `include::_FileName_[_Tags_]` can be used to include
a source file _FileName_ in the listing.
If _Tags_ is empty, the whole file is included, otherwise tags can be a list of tags that mark parts of the file.

.Examples
The input:

`[source,rascal]` +
`----` +
`x = 3;` +
`----`

will produce:

[source,rascal]
----
x = 3;
----

The input:

`[source,rascal]` +
`----` +
`include::\{LibDir}demo/basic/Hello.rsc[]` +
`----` 

will produce:

[source,rascal]
----
include::{LibDir}demo/basic/Hello.rsc[]
----

By placing tags in comments, it is possible to selective extracts parts of a source file.
In this example, the comments:
`// tag::module[]` and `// end::module[]` mark the boundaries of the actual module text.

The input:

`[source,rascal]` +
`----` +
`include::\{LibDir}demo/basic/Hello.rsc[tags=module]` +
`----`

will produce:

[source,rascal]
----
include::{LibDir}demo/basic/Hello.rsc[tags=module]
----

It is also possible to include <<Callout>>s in the source code.

.Benefits

.Pitfalls
Do not make the lines in a listing too long since they will not be wrapped.
Not more than 60 characters is a rule of thumb.

