# Screen

.Synopsis
Include the results of an interactive session wtih the Rascal system.

.Syntax

`[source,rascal-shell _Kind_]` +
`----` +
_Commands_ +
`----`

where _Kind_ can be empty, `-contine` or `-errors`.

.Types

.Function

.Details

.Description
The _Commands_ are executed and they are show together with the response of the Rascal system.

<<Callouts>> are supported in comments.

If `rascal-shell-continue` is used, the previous command sequence is continued. This is useful for 
inserting text between commands in a longer list commands.

If any error messages are generated or exceptions are raised, they will be logged as warnings.
The precise set of words that triggers a warning is:

*  `Exception`, `exception`
*  `Error`, `error`
*  `cancelled`.
*  `Timeout`, `timeout`.


If ` rascal-shell-errors` is used, it is assumed that the error is expected and it will not be logged.

.Examples
The text:

`[source,rascal-shell]` +
`----` +
x = 1 + 2; +
`----`

will be shown as:

[source,rascal-shell]
----
x = 1 + 2;
----

whereas

`[source,rascal-shell-continue]` +
`----` +
`x;` +
`----`

will continue the previous session:

[source,rascal-shell-continue]
----
x;
----

<<Callout>>s can be defined and used as follows. The input

`[source,rascal-shell]` +
`----` +
`123; // <1>` +
`----` +
`<1> demonstrates a call out`

gives:

[source,rascal-shell]
----
123; // <1>
----
<1> demonstrates a call out

.Benefits

*  All code in a concept is actually executed before it is included in the documentation.
*  In the warnings, an overview is maintained of code fragments that produce unexpected errors.

.Pitfalls
