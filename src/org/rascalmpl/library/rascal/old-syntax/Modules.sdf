module languages/rascal/syntax/Modules[Body]

imports languages/rascal/syntax/Names
        languages/rascal/syntax/Types
        languages/rascal/syntax/Comments

exports
sorts Import ModuleParameters ModuleActuals
      ImportedModule Renaming Renamings Module

context-free syntax
  header:Header body:Body -> Module {cons("Default")} 

context-free syntax
  "[" types:{Type ","}+ "]"                                 -> ModuleActuals  {cons("Default")}         
  name:QualifiedName actuals:ModuleActuals renamings:Renamings -> ImportedModule {cons("ActualsRenaming")} 
  name:QualifiedName actuals:ModuleActuals                     -> ImportedModule {cons("Actuals")}         
  name:QualifiedName renamings:Renamings                       -> ImportedModule {cons("Renamings")}       
  name:QualifiedName                                           -> ImportedModule {cons("Default")}         
  from:Name "=>" to:Name                                    -> Renaming       {cons("Default")}         
  "renaming" renamings:{Renaming ","}+                      -> Renamings      {cons("Default")}         

context-free syntax
  "import" module:ImportedModule ";" -> Import {cons("Default")} 
  "extend" module:ImportedModule ";" -> Import {cons("Extend")}  

sorts Header

context-free syntax
  "[" parameters:{TypeVar ","}+ "]"                                              -> ModuleParameters {cons("Default")}    
  tags:Tags "module" name:QualifiedName imports:Import*                          -> Header           {cons("Default")}    
  tags:Tags "module" name:QualifiedName params:ModuleParameters  imports:Import* -> Header           {cons("Parameters")} 
