module rascal/old-syntax/Constructors

imports 
	rascal/old-syntax/Literals

exports
sorts Expression Literal Name QualifiedName BasicType

context-free syntax
  literal:Literal                                  -> Expression {cons("Literal")}  

context-free syntax
  qualifiedName:QualifiedName                      -> Expression {cons("QualifiedName")} 

context-free syntax
    basicType:BasicType "(" arguments:{Expression ","}* ")"        -> Expression {cons("ReifiedType")}
    expression:Expression "(" arguments:{Expression ","}* ")" -> Expression {cons("CallOrTree")} 

context-free syntax
  "[" elements:{Expression ","}* "]"               -> Expression {cons("List")}      
  "{" elements:{Expression ","}* "}"               -> Expression {cons("Set")}       
  "<" elements:{Expression ","}+ ">"               -> Expression {cons("Tuple")}     


sorts Mapping
context-free syntax
  from:Expression ":" to:Expression                 ->  Mapping[[Expression]] {cons("Default")}  
  "(" mappings:{Mapping[[Expression]] ","}* ")"     -> Expression {cons("Map")}




context-free restrictions
  "." -/- [\.]
  "," -/- [\.].[\.]

