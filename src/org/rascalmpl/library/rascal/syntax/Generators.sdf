module rascal/syntax/Generators

imports rascal/syntax/Patterns
        rascal/syntax/Expressions

exports


context-free priorities
  
  condition:Expression "?" thenExp:Expression ":" 
                           elseExp:Expression     -> Expression {right,cons("IfThenElse")}
  >
  {
   from:Expression ":" to:Expression               ->  Mapping[[Expression]] {cons("Default")} 
   lhs:Expression "?" rhs:Expression               -> Expression {non-assoc,cons("IfDefinedOtherwise")}
  }
  >
  {non-assoc:
  pattern:Pattern ":=" expression:Expression      -> Expression {non-assoc, cons("Match")}   
  pattern:Pattern "!:=" expression:Expression     -> Expression {non-assoc, cons("NoMatch")}
  } 
  >
  {
   pattern:Pattern "<-" expression:Expression     -> Expression {prefer,cons("Enumerator")} 
%%   strategy:Strategy pattern:Pattern "<-" 
%%                     expression:Expression        -> Expression {prefer,cons("EnumeratorWithStrategy")} 
  }
  >
  lhs:Expression "==" rhs:Expression              -> Expression {left,cons("Equals")}  
  

sorts Strategy

context-free syntax
  "top-down"        -> Strategy {cons("TopDown")}       
  "top-down-break"  -> Strategy {cons("TopDownBreak")}  
  "bottom-up"       -> Strategy {cons("BottomUp")}      
  "bottom-up-break" -> Strategy {cons("BottomUpBreak")} 
  "outermost"       -> Strategy {cons("Outermost")}     
  "innermost"       -> Strategy {cons("Innermost")}     

sorts Comprehension

context-free syntax
  comprehension:Comprehension                                                     -> Expression    {cons("Comprehension")} 
  "{" results:{Expression ","}+ "|" generators:{Expression ","}+ "}"              -> Comprehension {cons("Set")}           
  "[" results:{Expression ","}+ "|" generators:{Expression ","}+ "]"              -> Comprehension {cons("List")}          
  "(" from:Expression ":" to:Expression "|" generators:{Expression ","}+ ")"      -> Comprehension {cons("Map")}          
  "(" init:Expression "|" result:Expression "|" generators:{Expression ","}+ ")"  -> Expression {cons("Reducer")}
  "it"                                                                            -> Expression {cons("It")}
  "all" "(" generators:{Expression ","}+ ")"                                      -> Expression    {cons("All")}        
  "any" "(" generators:{Expression ","}+ ")"                                      -> Expression    {cons("Any")}       

context-free restrictions
  "|" -/- [\|]
  ":" -/- [\=]
  "!" -/- [\:]
  "=" -/- [\=]

sorts PatternWithAction Case Replacement

context-free syntax
  replacementExpression:Expression                                          -> Replacement {cons("Unconditional")}
  replacementExpression:Expression "when" conditions:{Expression ","}+      -> Replacement {cons("Conditional")}

  pattern:Pattern "=>" replacement:Replacement                              -> PatternWithAction {cons("Replacing")} 
  pattern:Pattern ":" statement:Statement                                   -> PatternWithAction {cons("Arbitrary")} 
    
  "case" patternWithAction:PatternWithAction                                -> Case  {cons("PatternWithAction")}      
  "default" ":" statement:Statement                                         -> Case  {cons("Default")}   

sorts Visit

lexical restrictions
  "=" -/- [\>]
  "<" -/- [\-]

context-free syntax
  "visit" "(" subject:Expression ")" "{" cases:Case+ "}"                   -> Visit      {cons("DefaultStrategy")} 
  strategy:Strategy "visit" "(" subject:Expression ")" "{" cases:Case+ "}" -> Visit      {cons("GivenStrategy")}   
