module rascal/syntax/Types

imports rascal/syntax/Tags
        rascal/syntax/Symbols
        rascal/syntax/Names

exports
sorts Type

sorts BasicType

context-free syntax
  "bool"   -> BasicType {cons("Bool")}   
  "int"    -> BasicType {cons("Int")}    
  "real"   -> BasicType {cons("Real")} 
  "str"    -> BasicType {cons("String")} 
  "value"  -> BasicType {cons("Value")}  
  "node"   -> BasicType {cons("Node")}   
  "void"   -> BasicType {cons("Void")}   
  "loc"    -> BasicType {cons("Loc")}   
  "list"   -> BasicType {cons("List")}     
  "set"    -> BasicType {cons("Set")}  
  "bag"    -> BasicType {cons("Bag")}    
  "map"    -> BasicType {cons("Map")}      
  "rel"    -> BasicType {cons("Relation")} 
  "tuple"  -> BasicType {cons("Tuple")}   
  "lex"    -> BasicType {cons("Lex")}
  "type"   -> BasicType {cons("ReifiedType")}
  "adt"    -> BasicType {cons("ReifiedAdt")}
  "constructor"  -> BasicType {cons("ReifiedConstructor")}
  "fun"          -> BasicType       {cons("ReifiedFunction")}
  "non-terminal" -> BasicType {cons("ReifiedNonTerminal")}
  "reified"      -> BasicType {cons("ReifiedReifiedType")}
  "datetime"     -> BasicType {cons("DateTime")}

sorts TypeArg

context-free syntax
  type:Type                                             -> TypeArg {cons("Default")} 
  type:Type name:Name                                   -> TypeArg {cons("Named")}   

sorts StructuredType

context-free syntax
  basicType:BasicType "[" arguments:{TypeArg ","}+ "]"      -> StructuredType {cons("Default")} 

sorts FunctionType

context-free syntax
  type:Type "(" arguments:{TypeArg ","}* ")"            -> FunctionType {cons("TypeArguments")} 

sorts TypeVar

context-free syntax
  "&" name:Name                                         -> TypeVar {cons("Free")}    
  "&" name:Name "<:" bound:Type                         -> TypeVar {cons("Bounded")} 

sorts UserType

context-free syntax
  name:Name                                             -> UserType {cons("Name")} 
  name:Name "[" parameters:{Type ","}+ "]"              -> UserType {cons("Parametric")}   

sorts DataTypeSelector

context-free syntax
  sort:Name "." production:Name                         -> DataTypeSelector {cons("Selector")} 

context-free syntax
  symbol:Sym                                            -> Type {cons("Symbol")}
  basic:BasicType                                       -> Type {cons("Basic")}      
  structured:StructuredType                             -> Type {cons("Structured")} 
  function:FunctionType                                 -> Type {cons("Function")}   
  typeVar:TypeVar                                       -> Type {cons("Variable")}   
  user:UserType                                         -> Type {cons("User")}       
  selector:DataTypeSelector                             -> Type {cons("Selector")}   
  "(" type:Type ")"                                     -> Type {bracket, cons("Bracket")}
