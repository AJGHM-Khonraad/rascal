module rascal/syntax/Patterns

imports 
	rascal/syntax/Constructors[Expression => Pattern]
	rascal/syntax/Types
	rascal/syntax/Names

exports

context-free syntax

       type:Type name:Name                      -> Pattern {cons("TypedVariable")} 
       qualifiedName:QualifiedName "*"          -> Pattern {cons("MultiVariable")} 

context-free priorities
      expression:Pattern "(" arguments:{Pattern ","}* ")" -> Pattern {cons("CallOrTree")} >
{
       "/" pattern:Pattern                      -> Pattern {cons("Descendant")}
       name:Name ":" pattern:Pattern	   -> Pattern {cons("VariableBecomes")}
       type:Type name:Name ":" pattern:Pattern  -> Pattern {cons("TypedVariableBecomes")}
       "[" type:Type "]" pattern:Pattern        -> Pattern {cons("Guarded")}
       "!" pattern:Pattern                      -> Pattern {cons("Anti")}
       "/" parts:TypeArg* "/"                   -> Pattern {cons("Language")}
}

