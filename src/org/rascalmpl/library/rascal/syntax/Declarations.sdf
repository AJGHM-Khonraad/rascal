module rascal/syntax/Declarations

imports rascal/syntax/Tags
        rascal/syntax/Types
        rascal/syntax/Statements

exports
sorts Toplevel Visibility Declaration Signature

context-free syntax
  "public"                                                                       -> Visibility {cons("Public")}            
  "private"                                                                      -> Visibility {cons("Private")} 
                                                                                 -> Visibility {cons("Default")}          

context-free syntax
  declaration:Declaration                                                        -> Toplevel   {cons("GivenVisibility")}   

sorts Alternative

context-free syntax
  tags:Tags visibility:Visibility "view" view:Name "<:" superType:Name "=" alts:{Alternative "|"}+ ";" -> Declaration {cons("View")}      
  name:Name type:Type                                                            -> Alternative {cons("NamedType")} 

context-free syntax
  tags:Tags visibility:Visibility "alias" user:UserType "=" base:Type ";"                              -> Declaration {cons("Alias")} 

sorts Variant

context-free syntax
  tags:Tags visibility:Visibility "data" user:UserType "=" variants:{Variant "|"}+ ";"                 -> Declaration {cons("Data")}                 
  tags:Tags visibility:Visibility "data" user:UserType ";"                                             -> Declaration {cons("DataAbstract")} 
  name:Name "(" arguments:{TypeArg ","}* ")"                                     -> Variant     {cons("NAryConstructor")}      

sorts Test
context-free syntax
  test:Test ";" -> Declaration {cons("Test")}

  tags:Tags "test" expression:Expression                            -> Test {cons("Unlabeled")} 
  tags:Tags "test" expression:Expression ":" labeled:StringLiteral  -> Test {cons("Labeled")}  

sorts FunctionModifier FunctionModifiers

context-free syntax
  "java"                      -> FunctionModifier  {cons("Java")} 
  modifiers:FunctionModifier* -> FunctionModifiers {cons("List")} 

sorts FunctionDeclaration FunctionBody

context-free syntax
  type:Type modifiers:FunctionModifiers name:Name parameters:Parameters          -> Signature           {cons("NoThrows")}   
  type:Type modifiers:FunctionModifiers name:Name parameters:Parameters 
            "throws" exceptions:{Type ","}+                                      -> Signature           {cons("WithThrows")} 
  tags:Tags visibility:Visibility signature:Signature body:FunctionBody                                -> FunctionDeclaration {cons("Default")}    
  tags:Tags visibility:Visibility signature:Signature ";"                                              -> FunctionDeclaration {cons("Abstract")}   
  functionDeclaration:FunctionDeclaration                                        -> Declaration         {cons("Function")}   
  "{" statements:Statement* "}"                                                  -> FunctionBody        {cons("Default")}    

sorts Variable

context-free syntax
  name:Name                                                            -> Variable    {cons("UnInitialized")} 
  name:Name "=" initial:Expression                                     -> Variable    {cons("Initialized")}   
  tags:Tags visibility:Visibility type:Type variables:{Variable ","}+ ";"                                        -> Declaration {cons("Variable")}      

context-free syntax
  tags:Tags "rule" name:Name patternAction:PatternWithAction ";"                 -> Declaration {cons("Rule")} 

context-free syntax
  tags:Tags visibility:Visibility  "anno" annoType:Type onType:Type "@" name:Name ";"                   -> Declaration {cons("Annotation")} 
  tags:Tags visibility:Visibility  "tag"  kind:Kind name:Name "on" types:{Type ","}+ ";"                -> Declaration {cons("Tag")}        

sorts Kind

context-free syntax
  "module"   -> Kind {cons("Module")}   
  "function" -> Kind {cons("Function")} 
  "rule"     -> Kind {cons("Rule")}
  "variable" -> Kind {cons("Variable")} 
  "data"     -> Kind {cons("Data")}     
  "view"     -> Kind {cons("View")}     
  "alias"    -> Kind {cons("Alias")}     
  "anno"     -> Kind {cons("Anno")}     
  "tag"      -> Kind {cons("Tag")}      
  "all"      -> Kind {cons("All")}      
