module languages/new-rascal/syntax/Lexical

imports basic/Whitespace

exports 
 
  sorts StringConstant
        BooleanLiteral IntegerLiteral
        OctalIntegerLiteral HexIntegerLiteral DecimalIntegerLiteral
        StringCharacter EscapeSequence UnicodeEscape
	DecimalLongLiteral HexLongLiteral OctalLongLiteral LongLiteral
	RealLiteral CaseInsensitiveStringConstant

  lexical syntax
    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape

    "0" 			                                   -> DecimalIntegerLiteral
    [1-9] [0-9]* 		                                   -> DecimalIntegerLiteral
    [0] [xX] [0-9a-fA-F]+	                                   -> HexIntegerLiteral
    [0] [0-7]+	 		                          -> OctalIntegerLiteral

    "0" [lL] 			                          -> DecimalLongLiteral
    [1-9] [0-9]* [lL] 		                          -> DecimalLongLiteral
    [0] [xX] [0-9a-fA-F]+ [lL] 	                          -> HexLongLiteral
    [0] [0-7]+ [lL] 		                          -> OctalLongLiteral

    [0-9]+ "." [0-9]* ( [eE] [\+\-]? [0-9]+ )? [dDfF]?        -> RealLiteral
    "." [0-9]+ ( [eE] [\+\-]? [0-9]+ )? [dDfF]?               -> RealLiteral
    [0-9]+ [eE] [\+\-]? [0-9]+ [dDfF]?                        -> RealLiteral
    [0-9]+ ( [eE] [\+\-]? [0-9]+ )? [dDfF]                    -> RealLiteral

    "true"                                                    -> BooleanLiteral
    "false"                                                   -> BooleanLiteral
  
    "\\" [0-7]                                                -> EscapeSequence
    "\\" [0-7] [0-7]                                          -> EscapeSequence
    "\\" [0-3] [0-7] [0-7]                                    -> EscapeSequence
   
lexical restrictions
    EscapeSequence -/- [0-7]

lexical syntax
    UnicodeEscape                                             -> StringCharacter

    %% Slight deviation from Java strings: <and >  must be escaped.
    "\\" [btnfr\"\'\\\<\>]                                    -> EscapeSequence
    ~[\"\'\\\<\>]                                             -> StringCharacter
    EscapeSequence                                            -> StringCharacter
    "\"" StringCharacter* "\""                                -> StringConstant {category("Constant")}
    "'" StringCharacter* "'"                                  -> CaseInsensitiveStringConstant {category("Constant")}

  sorts StringLiteral
  context-free syntax
     constant:StringConstant -> StringLiteral {cons("NonInterpolated")}

  sorts PreStringChars MidStringChars PostStringChars
  lexical syntax
     [\"] StringCharacter* [\<] -> PreStringChars
     [\>] StringCharacter* [\<] -> MidStringChars
     [\>] StringCharacter* [\"] -> PostStringChars


     

  sorts LocationLiteral ProtocolChars PreProtocolChars MidProtocolChars PostProtocolChars PrePathChars MidPathChars PostPathChars PathChars ProtocolTail
        PathTail PathPart ProtocolPart 
  lexical syntax
    [\|] URLChars "://"   -> ProtocolChars
    "|" URLChars "<"    -> PreProtocolChars
    ">" URLChars "<"    -> MidProtocolChars
    ">" URLChars "://"  -> PostProtocolChars

    URLChars "<"        -> PrePathChars
    ">" URLChars "<"    -> MidPathChars
    ">" URLChars "|"    -> PostPathChars
    URLChars [\|]       -> PathChars


  context-free syntax
    protocolChars:ProtocolChars                            -> ProtocolPart {cons("NonInterpolated")}
    pathChars:PathChars                                    -> PathPart {cons("NonInterpolated")}
    protocolPart:ProtocolPart pathPart:PathPart            -> LocationLiteral {cons("Default")}
    pathPart:PathPart                                      -> LocationLiteral {cons("File")}
 
 

  sorts URLChars
  lexical syntax
    ~[\ \t\n\r\|\<]* -> URLChars

  lexical restrictions
    "://" -/- [\ \t\n\r]
 

  sorts DatePart JustDate TimePartNoTZ TimeZonePart JustTime DateAndTime DateTimeLiteral
  lexical syntax
    [0-9][0-9][0-9][0-9][0-1][0-9][0-3][0-9]                       -> DatePart
    [0-9][0-9][0-9][0-9] "-" [0-1][0-9]"-" [0-3][0-9]              -> DatePart

    "$" DatePart                                                   -> JustDate

    [0-2][0-9][0-5][0-9][0-5][0-9]                                 -> TimePartNoTZ
    [0-2][0-9][0-5][0-9][0-5][0-9][\,\.][0-9]                      -> TimePartNoTZ
    [0-2][0-9][0-5][0-9][0-5][0-9][\,\.][0-9][0-9]                 -> TimePartNoTZ
    [0-2][0-9][0-5][0-9][0-5][0-9][\,\.][0-9][0-9][0-9]            -> TimePartNoTZ
    [0-2][0-9] ":" [0-5][0-9] ":" [0-5][0-9]                       -> TimePartNoTZ
    [0-2][0-9] ":" [0-5][0-9] ":" [0-5][0-9][\,\.][0-9]            -> TimePartNoTZ
    [0-2][0-9] ":" [0-5][0-9] ":" [0-5][0-9][\,\.][0-9][0-9]       -> TimePartNoTZ
    [0-2][0-9] ":" [0-5][0-9] ":" [0-5][0-9][\,\.][0-9][0-9][0-9]  -> TimePartNoTZ

    "Z"                                                            -> TimeZonePart
    [\+\-] [0-1][0-9]                                              -> TimeZonePart
    [\+\-] [0-1][0-9][0-5][0-9]                                    -> TimeZonePart
    [\+\-] [0-1][0-9] ":" [0-5][0-9]                               -> TimeZonePart

    "$T" TimePartNoTZ TimeZonePart?                                -> JustTime

    "$" DatePart "T" TimePartNoTZ TimeZonePart?                    -> DateAndTime

  context-free syntax
    date:JustDate                                                  -> DateTimeLiteral {prefer,cons("DateLiteral")}
    time:JustTime                                                  -> DateTimeLiteral {prefer,cons("TimeLiteral")}
    dateAndTime:DateAndTime                                        -> DateTimeLiteral {prefer,cons("DateAndTimeLiteral")}

  lexical restrictions
    DecimalIntegerLiteral -/- [a-zA-Z0-9\_]
    HexIntegerLiteral -/- [a-zA-Z0-9\_]
    OctalIntegerLiteral -/- [a-zA-Z0-9\_]    
    DecimalLongLiteral -/- [a-zA-Z0-9\_]
    HexLongLiteral -/- [a-zA-Z0-9\_]
    OctalLongLiteral -/- [a-zA-Z0-9\_]
    RealLiteral -/- [a-zA-Z0-9\_]

  context-free syntax
    decimal:DecimalIntegerLiteral 	-> IntegerLiteral {prefer,cons("DecimalIntegerLiteral")}
    hex:HexIntegerLiteral 	        -> IntegerLiteral {prefer,cons("HexIntegerLiteral")}
    octal:OctalIntegerLiteral 	    -> IntegerLiteral {prefer,cons("OctalIntegerLiteral")}

    decimalLong:DecimalLongLiteral 	-> LongLiteral {prefer,cons("DecimalLongLiteral")}
    hexLong:HexLongLiteral 	        -> LongLiteral {prefer,cons("HexLongLiteral")}
    octalLong:OctalLongLiteral 	    -> LongLiteral {prefer,cons("OctalLongLiteral")}
