module rascal/syntax/Symbols

imports rascal/syntax/Names
        rascal/syntax/Literals
        rascal/syntax/Types


exports
sorts UnicodeEscape Character

sorts Sym

context-free  priorities
  symbol:Sym                         -> Type {cons("Symbol")}
  non-assoc
  user:UserType                         -> Sym {cons("Nonterminal")},
  Name "[" {Type ","}+ "]" -> UserType
  non-assoc %% to prevent ambiguity with character classes
  Sym -> Sym+

context-free syntax
  "<" symbol:Sym ">"                 -> Sym {cons("Bracket"), bracket}
  "<" symbol:Sym name:Name ">"       -> Sym {cons("Label")}
  symbol:Sym "?"                     -> Sym {cons("Optional")}    
  symbol:Sym "??"                    -> Sym {cons("NonEagerOptional")}               
  symbol:Sym "+"                     -> Sym {cons("Iter")}                   
  symbol:Sym "*"                     -> Sym {cons("IterStar")} 
  symbol:Sym "+?"                    -> Sym {cons("NonEagerIter")}                   
  symbol:Sym "*?"                    -> Sym {cons("NonEagerIterStar")}
  "{" symbol:Sym sep:StringConstant "}" "+"  -> Sym {cons("IterSep")}                
  "{" symbol:Sym sep:StringConstant "}" "*"  -> Sym {cons("IterStarSep")} 
  "{" symbol:Sym sep:StringConstant "}" "+?" -> Sym {cons("NonEagerIterSep")}                
  "{" symbol:Sym sep:StringConstant "}" "*?" -> Sym {cons("NonEagerIterStarSep")} 


context-free syntax
    "^"                                    -> Sym {cons("StartOfLine")}
    "$"                                    -> Sym {cons("EndOfLine")}
    "@" column:IntegerLiteral              -> Sym {cons("Column")}
    charClass:CharClass                    -> Sym {cons("CharacterClass")}         
    string:StringConstant                  -> Sym {cons("Literal")}                
    cistring:CaseInsensitiveStringConstant -> Sym {cons("CaseInsensitiveLiteral")}

context-free restrictions
  Sym -/- [\?]

sorts Class Range

context-free syntax
  character:Character                      -> Range     {cons("Character")}                
  start:Character "-" end:Character        -> Range     {cons("Range")}                    
  "[" ranges:Range* "]"                -> Class     {cons("SimpleCharclass")}       
  "(" charclass:Class ")"              -> Class     {cons("Bracket"),bracket}

lexical syntax
  EscapeSequence -> Character {cons("Escape"),category("Constant")}
  UnicodeEscape  -> Character {cons("Unicode"),category("Constant")}
 ~[\"\'\\\-\[\]\ ] -> Character {cons("Normal"),category("Constant")}  
 "\\" [\-\[\]\ ]   -> Character {cons("ExtraEscaped"),category("Constant")}
 

context-free priorities
  "!" charClass:Class     -> Class {cons("Complement")} >
  lhs:Class "-" rhs:Class -> Class {cons("Difference"), left} >
  lhs:Class "&" rhs:Class -> Class {cons("Intersection"), left} >
  lhs:Class "+" rhs:Class -> Class {cons("Union"), left}
