grammar({sort("Statement"),sort("Module"),sort("Command")}, {
	  prod([\iter-star(\char-class([range(100,100),range(105,105),range(109,109),range(115,115)]))],sort("RegExpModifier"),attrs([term("lexical")]))
	, prod([lit("str")],sort("Reserved"),\no-attrs())
	, prod([lit("\\"),\char-class([range(48,55)]),\char-class([range(48,55)])],sort("EscapeSequence"),attrs([term("lexical")]))
	, prod([label("type",sort("Type")),label("name",sort("Name"))],sort("Pattern"),attrs([term(cons("TypedVariable"))]))
	, prod([label("literal",sort("Literal"))],sort("Expression"),attrs([term(cons("Literal"))]))
	, prod([lit("dynamic")],sort("Reserved"),\no-attrs())
	, prod([lit("solve")],sort("Reserved"),\no-attrs())
	, prod([iter(\char-class([range(48,57)])),lit("."),\iter-star(\char-class([range(48,57)])),opt(seq([\char-class([range(69,69),range(101,101)]),opt(\char-class([range(43,43),range(45,45)])),iter(\char-class([range(48,57)]))])),opt(\char-class([range(68,68),range(100,100)]))],sort("RealLiteral"),attrs([term("lexical")]))
	, prod([\char-class([range(0,33),range(35,48),range(50,91),range(93,65535)])],sort("StrChar"),attrs([term("lexical")]))
	, prod([lit("reified")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(34,34)]),label("chars",\iter-star(sort("StrChar"))),\char-class([range(34,34)])],sort("StrCon"),attrs([term("lexical")]))
	, others(lit("value"))
	, prod([label("name",sort("Name")),lit("["),label("parameters",\iter-seps(sort("Type"),[layout(),lit(","),layout()])),lit("]")],sort("UserType"),attrs([term(cons("Parametric"))]))
	, prod([],sort("OptCharRanges"),attrs([term(cons("Absent"))]))
	, prod([lit("("),label("expression",sort("Expression")),lit(")")],sort("Expression"),attrs([term(cons("Bracket"))]))
	, prod([lit("\<"),label("elements",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("\>")],sort("Expression"),attrs([term(cons("Tuple"))]))
	, prod([label("pattern",sort("Pattern")),lit("=>"),label("replacement",sort("Replacement"))],sort("PatternWithAction"),attrs([term(cons("Replacing"))]))
	, prod([lit("unimport"),label("name",sort("QualifiedName"))],sort("ShellCommand"),attrs([term(cons("Unimport"))]))
	, prod([lit("&"),label("name",sort("Name"))],sort("TypeVar"),attrs([term(cons("Free"))]))
	, first(sort("Statement"),[prod([label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Expression"))])),choice(sort("Statement"),{prod([lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Expression"),attrs([term(cons("NonEmptyBlock"))])),prod([label("eos",sort("EOS"))],sort("Statement"),attrs([term(cons("EOS"))]))})])
	, others(lit("non-terminal"))
	, prod([label("decimal",sort("DecimalIntegerLiteral"))],sort("IntegerLiteral"),attrs([term(cons("DecimalIntegerLiteral"))]))
	, prod([lit("tag")],sort("Kind"),attrs([term(cons("Tag"))]))
	, others(lit("fun"))
	, others(lit("loc"))
	, prod([label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Expression"))]))
	, prod([lit("@"),label("name",sort("Name")),label("contents",sort("TagString"))],sort("Tag"),attrs([term(cons("Default")),term(cons("Comment"))]))
	, prod([label("hexLong",sort("HexLongLiteral"))],sort("LongLiteral"),attrs([term(cons("HexLongLiteral"))]))
	, prod([lit("loc")],sort("BasicType"),attrs([term(cons("Loc"))]))
	, prod([lit("{"),label("results",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("|"),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("}")],sort("Comprehension"),attrs([term(cons("Set"))]))
	, prod([\char-class([range(92,92)]),\char-class([range(47,47),range(60,60),range(62,62),range(92,92)])],sort("RegExp"),attrs([term("lexical")]))
	, prod([lit("rel")],sort("BasicType"),attrs([term(cons("Relation"))]))
	, others(sort("Asterisk"))
	, others(lit("assert"))
	, prod([lit("\\"),label("a",\char-class([range(48,57)])),label("b",\char-class([range(48,57)])),label("c",\char-class([range(48,57)]))],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, others(sort("OctalIntegerLiteral"))
	, prod([label("stringLiteral",sort("StringLiteral"))],sort("Literal"),attrs([term(cons("String"))]))
	, prod([\char-class([range(92,92)])],sort("Backslash"),attrs([term("lexical")]))
	, prod([lit("continue"),lit(";")],sort("Statement"),attrs([term(cons("Continue"))]))
	, prod([lit("["),label("parameters",\iter-seps(sort("TypeVar"),[layout(),lit(","),layout()])),lit("]")],sort("ModuleParameters"),attrs([term(cons("Default"))]))
	, prod([lit("bool")],sort("BasicType"),attrs([term(cons("Bool"))]))
	, prod([lit("("),label("formals",sort("Formals")),lit(")")],sort("Parameters"),attrs([term(cons("Default"))]))
	, others(lit("visit"))
	, prod([lit("alias")],sort("Kind"),attrs([term(cons("Alias"))]))
	, prod([lit("try"),label("body",sort("Statement")),label("handlers",\iter-seps(sort("Catch"),[layout()])),lit("finally"),label("finallyBody",sort("Statement"))],sort("Statement"),attrs([term(cons("TryFinally"))]))
	, prod([\char-class([range(49,57)]),\iter-star(\char-class([range(48,57)]))],sort("DecimalIntegerLiteral"),attrs([term("lexical")]))
	, prod([\char-class([range(65,90),range(95,95),range(97,122)]),\iter-star(\char-class([range(48,57),range(65,90),range(95,95),range(97,122)]))],sort("Name"),attrs([term("lexical")]))
	, prod([label("protocolPart",sort("ProtocolPart")),label("pathPart",sort("PathPart"))],sort("LocationLiteral"),attrs([term(cons("Default"))]))
	, prod([lit("\'\\"),sort("SingleCharacter"),lit("\'\\")],sort("CharacterLiteral"),attrs([term("lexical")]))
	, prod([lit("value")],sort("BasicType"),attrs([term(cons("Value"))]))
	, prod([lit("all")],sort("Kind"),attrs([term(cons("All"))]))
	, prod([lit("node")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(48,48)]),\char-class([range(88,88),range(120,120)]),iter(\char-class([range(48,57),range(65,70),range(97,102)]))],sort("HexIntegerLiteral"),attrs([term("lexical")]))
	, prod([lit("\<"),sort("Name"),lit(":"),\iter-star(sort("NamedRegExp")),lit("\>")],sort("RegExp"),attrs([term("lexical")]))
	, prod([lit("\\\'\\")],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, prod([label("strategy",sort("Strategy")),lit("visit"),lit("("),label("subject",sort("Expression")),lit(")"),lit("{"),label("cases",\iter-seps(sort("Case"),[layout()])),lit("}")],sort("Visit"),attrs([term(cons("GivenStrategy"))]))
	, prod([lit("catch"),label("pattern",sort("Pattern")),lit(":"),label("body",sort("Statement"))],sort("Catch"),attrs([term(cons("Binding"))]))
	, prod([lit("all"),lit("("),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("All"))]))
	, others(lit("map"))
	, prod([lit("map")],sort("BasicType"),attrs([term(cons("Map"))]))
	, prod([lit("bag")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(92,92)]),\char-class([range(65,90),range(95,95),range(97,122)]),\iter-star(\char-class([range(45,45),range(48,57),range(65,90),range(95,95),range(97,122)]))],sort("EscapedName"),attrs([term("lexical")]))
	, prod([lit("insert"),label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Insert"))]))
	, prod([],sort("NoElseMayFollow"),attrs([term(cons("Default"))]))
	, prod([\char-class([range(92,92)])],sort("NamedBackslash"),attrs([term("lexical")]))
	, prod([label("label",sort("Label")),lit("if"),lit("("),label("conditions",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")"),label("thenStatement",sort("Statement")),lit("else"),label("elseStatement",sort("Statement"))],sort("Statement"),attrs([term(cons("IfThenElse"))]))
	, others(lit("false"))
	, prod([label("fieldIndex",sort("IntegerLiteral"))],sort("Field"),attrs([term(cons("Index"))]))
	, others(lit("in"))
	, prod([label("post",sort("PostPathChars"))],sort("PathTail"),attrs([term(cons("Post"))]))
	, prod([label("hex",sort("HexIntegerLiteral"))],sort("IntegerLiteral"),attrs([term(cons("HexIntegerLiteral"))]))
	, prod([label("type",sort("Type"))],sort("TypeArg"),attrs([term(cons("Default"))]))
	, prod([label("name",sort("Name")),lit("="),label("initial",sort("Expression"))],sort("Variable"),attrs([term(cons("Initialized"))]))
	, prod([lit("catch"),lit(":"),label("body",sort("Statement"))],sort("Catch"),attrs([term(cons("Default"))]))
	, others(lit("join"))
	, prod([label("type",sort("Type")),label("modifiers",sort("FunctionModifiers")),label("name",sort("Name")),label("parameters",sort("Parameters")),lit("throws"),label("exceptions",\iter-seps(sort("Type"),[layout(),lit(","),layout()]))],sort("Signature"),attrs([term(cons("WithThrows"))]))
	, prod([lit("["),label("optionalCharRanges",sort("OptCharRanges")),lit("]")],sort("CharClass"),attrs([term(cons("SimpleCharclass"))]))
	, others(lit("case"))
	, others(lit("return"))
	, prod([lit("one")],sort("Reserved"),\no-attrs())
	, prod([lit("any"),lit("("),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("Any"))]))
	, prod([lit("\\"),\char-class([range(34,34),range(39,39),range(60,60),range(62,62),range(92,92),range(98,98),range(102,102),range(110,110),range(114,114),range(116,116)])],sort("EscapeSequence"),attrs([term("lexical")]))
	, others(lit("while"))
	, prod([label("user",sort("UserType"))],sort("Type"),attrs([term(cons("User"))]))
	, prod([lit("@"),label("name",sort("Name"))],sort("Tag"),attrs([term(cons("Empty")),term(cons("Comment"))]))
	, prod([lit("break"),lit(";")],sort("Break"),attrs([term(cons("NoLabel"))]))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),lit("tag"),label("kind",sort("Kind")),label("name",sort("Name")),lit("on"),label("types",\iter-seps(sort("Type"),[layout(),lit(","),layout()])),lit(";")],sort("Declaration"),attrs([term(cons("Tag"))]))
	, prod([label("tags",\iter-star-seps(sort("Tag"),[layout()]))],sort("Tags"),attrs([term(cons("Default"))]))
	, others(lit("switch"))
	, prod([lit(";")],sort("Statement"),attrs([term(cons("EmptyStatement"))]))
	, prod([lit("set")],sort("Reserved"),\no-attrs())
	, prod([iter(\char-class([range(48,57)])),opt(seq([\char-class([range(69,69),range(101,101)]),opt(\char-class([range(43,43),range(45,45)])),iter(\char-class([range(48,57)]))])),\char-class([range(68,68),range(100,100)])],sort("RealLiteral"),attrs([term("lexical")]))
	, prod([label("declaration",sort("Declaration"))],sort("Command"),attrs([term(cons("Declaration"))]))
	, prod([lit("true")],sort("BooleanLiteral"),attrs([term("lexical")]))
	, others(lit("notin"))
	, others(lit("else"))
	, others(lit("type"))
	, prod([lit("module")],sort("Reserved"),\no-attrs())
	, prod([label("decimalLong",sort("DecimalLongLiteral"))],sort("LongLiteral"),attrs([term(cons("DecimalLongLiteral"))]))
	, prod([lit("fail"),label("label",sort("Name")),lit(";")],sort("Fail"),attrs([term(cons("WithLabel"))]))
	, prod([lit("public")],sort("Reserved"),\no-attrs())
	, prod([label("eos",sort("EOS"))],sort("Expression"),attrs([term(cons("EOS"))]))
	, prod([lit("node")],sort("BasicType"),attrs([term(cons("Node"))]))
	, prod([lit("variable")],sort("Kind"),attrs([term(cons("Variable"))]))
	, prod([lit("alias")],sort("Reserved"),\no-attrs())
	, prod([lit("data")],sort("Kind"),attrs([term(cons("Data"))]))
	, prod([label("symbol",sort("Symbol")),lit("+")],sort("Symbol"),attrs([term(cons("Iter"))]))
	, others(sort("NoElseMayFollow"))
	, others(sort("NamedBackslash"))
	, prod([lit("\\\\")],sort("StrChar"),attrs([term("lexical")]))
	, first(sort("Expression"),[choice(sort("Expression"),{prod([sort("Expression"),lit("+"),sort("Expression")],sort("Expression"),\no-attrs()),prod([sort("Expression"),lit("*"),sort("Expression")],sort("Expression"),\no-attrs())}),prod([lit("-"),sort("Expression")],sort("Expression"),\no-attrs())])
	, prod([lit("edit"),label("name",sort("QualifiedName"))],sort("ShellCommand"),attrs([term(cons("Edit"))]))
	, prod([lit("\\t")],sort("StrChar"),attrs([term("lexical")]))
	, prod([lit("solve"),lit("("),label("variables",\iter-seps(sort("QualifiedName"),[layout(),lit(","),layout()])),label("bound",sort("Bound")),lit(")"),label("body",sort("Statement"))],sort("Statement"),attrs([term(cons("Solve"))]))
	, prod([lit("default")],sort("Reserved"),\no-attrs())
	, prod([label("basic",sort("BasicType"))],sort("Type"),attrs([term(cons("Basic"))]))
	, prod([lit("\'\\"),sort("EscapeSequence"),lit("\'\\")],sort("CharacterLiteral"),attrs([term("lexical")]))
	, prod([lit("function")],sort("Kind"),attrs([term(cons("Function"))]))
	, first(sort("Pattern"),[prod([label("expression",sort("Pattern")),lit("("),label("arguments",\iter-star-seps(sort("Pattern"),[layout(),lit(","),layout()])),lit(")")],sort("Pattern"),attrs([term(cons("CallOrTree"))])),choice(sort("Pattern"),{prod([lit("["),label("type",sort("Type")),lit("]"),label("pattern",sort("Pattern"))],sort("Pattern"),attrs([term(cons("Guarded"))])),prod([lit("/"),label("pattern",sort("Pattern"))],sort("Pattern"),attrs([term(cons("Descendant"))])),prod([label("name",sort("Name")),lit(":"),label("pattern",sort("Pattern"))],sort("Pattern"),attrs([term(cons("VariableBecomes"))])),prod([lit("!"),label("pattern",sort("Pattern"))],sort("Pattern"),attrs([term(cons("Anti"))])),prod([label("type",sort("Type")),label("name",sort("Name")),lit(":"),label("pattern",sort("Pattern"))],sort("Pattern"),attrs([term(cons("TypedVariableBecomes"))]))})])
	, prod([label("post",sort("PostProtocolChars"))],sort("ProtocolTail"),attrs([term(cons("Post"))]))
	, prod([lit("java")],sort("FunctionModifier"),attrs([term(cons("Java"))]))
	, others(lit("extend"))
	, prod([lit("throw"),label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Throw"))]))
	, prod([lit("throws")],sort("Reserved"),\no-attrs())
	, prod([label("name",sort("Name")),lit(":")],sort("Label"),attrs([term(cons("Default"))]))
	, prod([\char-class([range(0,41),range(43,65535)])],sort("CommentChar"),attrs([term("lexical")]))
	, prod([label("mid",sort("MidPathChars")),label("expression",sort("Expression")),label("tail",sort("PathTail"))],sort("PathTail"),attrs([term(cons("Mid"))]))
	, others(lit("if"))
	, prod([label("label",sort("Label")),lit("do"),label("body",sort("Statement")),lit("while"),lit("("),label("condition",sort("Expression")),lit(")"),lit(";")],sort("EOS"),attrs([term(cons("DoWhile"))]))
	, prod([lit("adt")],sort("BasicType"),attrs([term(cons("ReifiedAdt"))]))
	, others(lit("fail"))
	, prod([\char-class([range(39,39)]),label("chars",\iter-star(sort("SingleQuotedStrChar"))),\char-class([range(39,39)])],sort("SingleQuotedStrCon"),attrs([term("lexical")]))
	, first(sort("Type"),[prod([label("symbol",sort("Symbol"))],sort("Type"),attrs([term(cons("Symbol"))])),choice(sort("Symbol"),{prod([label("name",sort("Name"))],sort("Symbol"),attrs([term(cons("Sort"))])),prod([label("lhs",sort("Symbol")),lit("|"),label("rhs",sort("Symbol"))],sort("Symbol"),attrs([term(cons("Alternative"))]))})])
	, prod([lit("top-down")],sort("Strategy"),attrs([term(cons("TopDown"))]))
	, prod([lit("int")],sort("BasicType"),attrs([term(cons("Int"))]))
	, prod([lit("return"),label("expression",sort("Expression")),lit(";")],sort("Return"),attrs([term(cons("WithExpression"))]))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),lit("alias"),label("user",sort("UserType")),lit("="),label("base",sort("Type")),lit(";")],sort("Declaration"),attrs([term(cons("Alias"))]))
	, prod([lit("adt")],sort("Reserved"),\no-attrs())
	, prod([label("sort",sort("Name")),lit("."),label("production",sort("Name"))],sort("DataTypeSelector"),attrs([term(cons("Selector"))]))
	, others(lit("any"))
	, prod([sort("URLChars"),lit("\<")],sort("PrePathChars"),attrs([term("lexical")]))
	, prod([lit("\""),\iter-star(sort("StringCharacter")),lit("\"")],sort("StringLiteral"),attrs([term("lexical")]))
	, prod([lit("modules")],sort("ShellCommand"),attrs([term(cons("ListModules"))]))
	, prod([lit("catch")],sort("Reserved"),\no-attrs())
	, prod([lit("fail"),lit(";")],sort("Fail"),attrs([term(cons("NoLabel"))]))
	, prod([lit("void")],sort("BasicType"),attrs([term(cons("Void"))]))
	, prod([label("tags",sort("Tags")),lit("test"),label("expression",sort("Expression"))],sort("Test"),attrs([term(cons("Unlabeled"))]))
	, prod([label("numChar",sort("NumChar"))],sort("Character"),attrs([term(cons("Numeric"))]))
	, others(lit("int"))
	, prod([lit("insert")],sort("Reserved"),\no-attrs())
	, prod([lit("#"),label("type",sort("Type"))],sort("Expression"),attrs([term(cons("ReifyType"))]))
	, prod([lit("extend"),label("module",sort("ImportedModule")),lit(";")],sort("Import"),attrs([term(cons("Extend"))]))
	, prod([\char-class([range(0,124),range(126,65535)])],sort("TagChar"),attrs([term("lexical")]))
	, others(sort("QualifiedName"))
	, prod([lit("view")],sort("Reserved"),\no-attrs())
	, prod([lit("bottom-up-break")],sort("Strategy"),attrs([term(cons("BottomUpBreak"))]))
	, prod([label("octal",sort("OctalIntegerLiteral"))],sort("IntegerLiteral"),attrs([term(cons("OctalIntegerLiteral"))]))
	, prod([],sort("Label"),attrs([term(cons("Empty"))]))
	, others(sort("DecimalIntegerLiteral"))
	, prod([sort("Comment")],sort("LAYOUT"),attrs([term("lexical")]))
	, prod([lit("anno")],sort("Reserved"),\no-attrs())
	, prod([lit("=")],sort("Assignment"),attrs([term(cons("Default"))]))
	, others(lit("constructor"))
	, prod([lit("history")],sort("ShellCommand"),attrs([term(cons("History"))]))
	, prod([\char-class([range(60,60)]),cf(opt(sort("LAYOUT"))),cf(sort("Expression")),cf(opt(sort("LAYOUT"))),\char-class([range(62,62)])],lex(sort("StringCharacter")),attrs([term(cons("MetaVariable")),term("lexical")]))
	, prod([lit("import"),label("module",sort("ImportedModule")),lit(";")],sort("Import"),attrs([term(cons("Default"))]))
	, prod([label("replacementExpression",sort("Expression"))],sort("Replacement"),attrs([term(cons("Unconditional"))]))
	, prod([lit("("),label("from",sort("Expression")),lit(":"),label("to",sort("Expression")),lit("|"),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Comprehension"),attrs([term(cons("Map"))]))
	, prod([label("lhs",sort("CharRanges")),label("rhs",sort("CharRanges"))],sort("CharRanges"),attrs([term(cons("Concatenate")),memo()]))
	, prod([lit("assert"),label("expression",sort("Expression")),lit(":"),label("message",sort("StringLiteral")),lit(";")],sort("Statement"),attrs([term(cons("AssertWithMessage"))]))
	, prod([label("label",sort("Label")),lit("for"),lit("("),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")"),label("body",sort("Statement"))],sort("EOS"),attrs([term(cons("For"))]))
	, prod([lit("try"),label("body",sort("Statement")),label("handlers",\iter-seps(sort("Catch"),[layout()]))],sort("Statement"),attrs([term(cons("Try"))]))
	, prod([\char-class([range(48,48)]),iter(\char-class([range(48,55)]))],sort("OctalIntegerLiteral"),attrs([term("lexical")]))
	, others(sort("RealLiteral"))
	, others(lit("tuple"))
	, prod([lit("list")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(124,124)]),sort("URLChars"),lit("://")],sort("ProtocolChars"),attrs([term("lexical")]))
	, prod([],sort("Bound"),attrs([term(cons("Empty"))]))
	, prod([],sort("Marker"),attrs([term("lexical")]))
	, prod([label("start",sort("Character")),lit("-"),label("end",sort("Character"))],sort("CharRange"),attrs([term(cons("Range"))]))
	, prod([lit("\\\"")],sort("StrChar"),attrs([term("lexical")]))
	, prod([label("visit",sort("Visit"))],sort("EOS"),attrs([term(cons("Visit"))]))
	, prod([label("qualifiedName",sort("QualifiedName"))],sort("Assignable"),attrs([term(cons("Variable"))]))
	, prod([label("pathPart",sort("PathPart"))],sort("LocationLiteral"),attrs([term(cons("File"))]))
	, prod([label("type",sort("Type")),lit("("),label("arguments",\iter-star-seps(sort("TypeArg"),[layout(),lit(","),layout()])),lit(")")],sort("FunctionType"),attrs([term(cons("TypeArguments"))]))
	, prod([lit("rel")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(0,38),range(40,48),range(50,91),range(93,65535)])],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, prod([sort("UnicodeEscape")],sort("SingleCharacter"),attrs([term("lexical")]))
	, prod([lit("\<"),sort("Name"),lit("\>")],sort("RegExp"),attrs([term("lexical")]))
	, prod([label("singelQuotedString",sort("SingleQuotedStrCon"))],sort("Symbol"),attrs([term(cons("CaseInsensitiveLiteral"))]))
	, prod([label("toplevels",\iter-star-seps(sort("Toplevel"),[layout()]))],sort("Body"),attrs([term(cons("Toplevels"))]))
	, prod([lit("anno")],sort("Kind"),attrs([term(cons("Anno"))]))
	, prod([lit("\\"),label("a",\char-class([range(48,57)])),label("b",\char-class([range(48,57)])),label("c",\char-class([range(48,57)]))],sort("StrChar"),attrs([term("lexical")]))
	, others(sort("EscapedName"))
	, prod([label("basicType",sort("BasicType")),lit("["),label("arguments",\iter-seps(sort("TypeArg"),[layout(),lit(","),layout()])),lit("]")],sort("StructuredType"),attrs([term(cons("Default"))]))
	, prod([\char-class([range(0,59),range(61,91),range(93,65535)])],sort("NamedRegExp"),attrs([term("lexical")]))
	, prod([label("from",sort("Name")),lit("=>"),label("to",sort("Name"))],sort("Renaming"),attrs([term(cons("Default"))]))
	, prod([lit("list")],sort("BasicType"),attrs([term(cons("List"))]))
	, prod([lit("constructor")],sort("BasicType"),attrs([term(cons("ReifiedConstructor"))]))
	, prod([lit("private")],sort("Visibility"),attrs([term(cons("Private"))]))
	, prod([lit("["),label("elements",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("]")],sort("Expression"),attrs([term(cons("List"))]))
	, prod([lit("?=")],sort("Assignment"),attrs([term(cons("IfDefined"))]))
	, prod([lit("\\"),\char-class([range(48,55)])],sort("EscapeSequence"),attrs([term("lexical")]))
	, prod([label("label",sort("Label")),lit("if"),lit("("),label("conditions",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")"),label("thenStatement",sort("Statement")),label("noElseMayFollow",sort("NoElseMayFollow"))],sort("Statement"),attrs([term(cons("IfThen"))]))
	, others(lit("=="))
	, others(lit("all"))
	, prod([label("declarator",sort("Declarator"))],sort("LocalVariableDeclaration"),attrs([term(cons("Default"))]))
	, prod([label("name",sort("Name")),lit("("),label("arguments",\iter-star-seps(sort("TypeArg"),[layout(),lit(","),layout()])),lit(")")],sort("Variant"),attrs([term(cons("NAryConstructor"))]))
	, others(lit("global"))
	, others(lit("import"))
	, prod([lit("break"),label("label",sort("Name")),lit(";")],sort("Break"),attrs([term(cons("WithLabel"))]))
	, prod([lit("fun")],sort("BasicType"),attrs([term(cons("ReifiedFunction"))]))
	, prod([label("typeVar",sort("TypeVar"))],sort("Type"),attrs([term(cons("Variable"))]))
	, others(lit("data"))
	, prod([lit("rule")],sort("Reserved"),\no-attrs())
	, first(sort("Expression"),[prod([label("condition",sort("Expression")),lit("?"),label("thenExp",sort("Expression")),lit(":"),label("elseExp",sort("Expression"))],sort("Expression"),attrs([term(cons("IfThenElse"))])),choice(\parameterized-sort("Mapping",[sort("Expression")]),{prod([label("from",sort("Expression")),lit(":"),label("to",sort("Expression"))],\parameterized-sort("Mapping",[sort("Expression")]),attrs([term(cons("Default"))])),prod([label("lhs",sort("Expression")),lit("?"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("IfDefinedOtherwise"))]))}),prod([label("pattern",sort("Pattern")),lit("<-"),label("expression",sort("Expression"))],sort("Expression"),attrs([term(cons("Enumerator"))])),prod([label("lhs",sort("Expression")),lit("=="),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("Equals"))]))])
	, prod([iter(\char-class([range(48,57)])),\char-class([range(69,69),range(101,101)]),opt(\char-class([range(43,43),range(45,45)])),iter(\char-class([range(48,57)])),opt(\char-class([range(68,68),range(100,100)]))],sort("RealLiteral"),attrs([term("lexical")]))
	, prod([lit("throw")],sort("Reserved"),\no-attrs())
	, first(sort("Expression"),[choice(sort("Expression"),{prod([label("expression",sort("Expression")),lit("."),label("field",sort("Name"))],sort("Expression"),attrs([term(cons("FieldAccess"))])),prod([label("expression",sort("Expression")),lit("("),label("arguments",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("CallOrTree"))])),prod([label("expression",sort("Expression")),lit("["),label("key",sort("Name")),lit("="),label("replacement",sort("Expression")),lit("]")],sort("Expression"),attrs([term(cons("FieldUpdate"))])),prod([label("basicType",sort("BasicType")),lit("("),label("arguments",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("ReifiedType"))])),prod([label("expression",sort("Expression")),lit("["),label("subscripts",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("]")],sort("Expression"),attrs([term(cons("Subscript"))])),prod([label("expression",sort("Expression")),lit("\<"),label("fields",\iter-seps(sort("Field"),[layout(),lit(","),layout()])),lit("\>")],sort("Expression"),attrs([term(cons("FieldProject"))]))}),prod([label("argument",sort("Expression")),lit("?")],sort("Expression"),attrs([term(cons("IsDefined"))])),choice(sort("Expression"),{prod([lit("!"),label("argument",sort("Expression"))],sort("Expression"),attrs([term(cons("Negation"))])),prod([lit("-"),label("argument",sort("Expression"))],sort("Expression"),attrs([term(cons("Negative"))]))}),choice(sort("Expression"),{prod([label("argument",sort("Expression")),lit("+")],sort("Expression"),attrs([term(cons("TransitiveClosure"))])),prod([label("argument",sort("Expression")),lit("*")],sort("Expression"),attrs([term(cons("TransitiveReflexiveClosure"))]))}),choice(sort("Expression"),{prod([label("expression",sort("Expression")),lit("["),lit("@"),label("name",sort("Name")),lit("="),label("value",sort("Expression")),lit("]")],sort("Expression"),attrs([term(cons("SetAnnotation"))])),prod([label("expression",sort("Expression")),lit("@"),label("name",sort("Name"))],sort("Expression"),attrs([term(cons("GetAnnotation"))]))}),prod([label("lhs",sort("Expression")),lit("o"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("Composition"))])),prod([label("lhs",sort("Expression")),lit("&"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("Intersection"))])),prod([label("lhs",sort("Expression")),lit("?"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("IfDefinedOtherwise"))])),prod([label("lhs",sort("Expression")),lit("&&"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("And"))])),prod([label("lhs",sort("Expression")),lit("||"),label("rhs",sort("Expression"))],sort("Expression"),attrs([term(cons("Or"))]))])
	, prod([\char-class([range(92,92)]),label("number",iter(\char-class([range(48,57)])))],sort("NumChar"),attrs([term("lexical")]))
	, prod([lit("case"),label("patternWithAction",sort("PatternWithAction"))],sort("Case"),attrs([term(cons("PatternWithAction"))]))
	, prod([lit("top-down-break")],sort("Strategy"),attrs([term(cons("TopDownBreak"))]))
	, prod([],sort("Rest"),attrs([term("lexical")]))
	, prod([label("selector",sort("DataTypeSelector"))],sort("Type"),attrs([term(cons("Selector"))]))
	, others(sort("HexIntegerLiteral"))
	, others(lit("try"))
	, prod([lit("bool")],sort("Reserved"),\no-attrs())
	, prod([label("symbol",sort("Symbol")),lit("*")],sort("Symbol"),attrs([term(cons("IterStar"))]))
	, prod([label("type",sort("Type")),label("variables",\iter-seps(sort("Variable"),[layout(),lit(","),layout()]))],sort("Declarator"),attrs([term(cons("Default"))]))
	, prod([lit("("),label("charClass",sort("CharClass")),lit(")")],sort("CharClass"),attrs([term(cons("Bracket"))]))
	, prod([lit("/*"),\iter-star(sort("CommentChar")),lit("*/")],sort("Comment"),attrs([term(cons("Comment")),term("lexical")]))
	, others(lit("<="))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),label("signature",sort("Signature")),label("body",sort("FunctionBody"))],sort("FunctionDeclaration"),attrs([term(cons("Default"))]))
	, others(lit("private"))
	, others(lit("finally"))
	, prod([label("functionDeclaration",sort("FunctionDeclaration"))],sort("Statement"),attrs([term(cons("FunctionDeclaration"))]))
	, others(\iter-star-seps(\iter-star(\char-class([range(0,9),range(11,65535)])),[\char-class([range(10,10)])]))
	, prod([lit("\\t")],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, prod([label("label",sort("Label")),lit("switch"),lit("("),label("expression",sort("Expression")),lit(")"),lit("{"),label("cases",\iter-seps(sort("Case"),[layout()])),lit("}")],sort("Statement"),attrs([term(cons("Switch"))]))
	, prod([label("string",sort("StrCon"))],sort("Symbol"),attrs([term(cons("Literal"))]))
	, prod([lit("("),label("type",sort("Type")),lit(")")],sort("Type"),attrs([term(cons("Bracket"))]))
	, prod([lit("rule")],sort("Kind"),attrs([term(cons("Rule"))]))
	, first(sort("CharClass"),[prod([lit("~"),label("charClass",sort("CharClass"))],sort("CharClass"),attrs([term(cons("Complement"))])),prod([label("lhs",sort("CharClass")),lit("/"),label("rhs",sort("CharClass"))],sort("CharClass"),attrs([term(cons("Difference")),memo()])),prod([label("lhs",sort("CharClass")),lit("/\\"),label("rhs",sort("CharClass"))],sort("CharClass"),attrs([term(cons("Intersection")),memo()])),prod([label("lhs",sort("CharClass")),lit("\\/"),label("rhs",sort("CharClass"))],sort("CharClass"),attrs([term(cons("Union"))]))])
	, others(lit("true"))
	, prod([lit("\\n")],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, prod([lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Expression"),attrs([term(cons("NonEmptyBlock"))]))
	, prod([sort("Asterisk")],sort("CommentChar"),attrs([term("lexical")]))
	, prod([label("header",sort("Header")),label("body",sort("Body"))],sort("Module"),attrs([term(cons("Default"))]))
	, others(lit("void"))
	, prod([label("brk",sort("Break"))],sort("Statement"),attrs([term(cons("Break"))]))
	, prod([label("from",sort("Expression")),lit(":"),label("to",sort("Expression"))],\parameterized-sort("Mapping",[sort("Expression")]),attrs([term(cons("Default"))]))
	, prod([label("functionDeclaration",sort("FunctionDeclaration"))],sort("Declaration"),attrs([term(cons("Function"))]))
	, prod([label("statement",sort("Statement"))],sort("Command"),attrs([term(cons("Statement"))]))
	, prod([label("pathChars",sort("PathChars"))],sort("PathPart"),attrs([term(cons("NonInterpolated"))]))
	, others(lit("tag"))
	, others(lit("://"))
	, prod([lit("false")],sort("BooleanLiteral"),attrs([term("lexical")]))
	, others(lit("repeat"))
	, others(sort("Reserved"))
	, prod([lit("\\\\")],sort("SingleQuotedStrChar"),attrs([term("lexical")]))
	, others(lit("real"))
	, prod([lit("renaming"),label("renamings",\iter-seps(sort("Renaming"),[layout(),lit(","),layout()]))],sort("Renamings"),attrs([term(cons("Default"))]))
	, prod([\iter-star-seps(\iter-star(\char-class([range(0,9),range(11,65535)])),[\char-class([range(10,10)])])],sort("Rest"),attrs([term("lexical")]))
	, prod([lit("for")],sort("Reserved"),\no-attrs())
	, prod([label("ranges",sort("CharRanges"))],sort("OptCharRanges"),attrs([term(cons("Present"))]))
	, prod([label("range",sort("CharRange"))],sort("CharRanges"),attrs([term(cons("Range"))]))
	, others(lit("set"))
	, prod([lit("switch")],sort("Reserved"),\no-attrs())
	, prod([label("marker",sort("Marker")),label("rest",sort("Rest"))],sort("Body"),attrs([term(cons("Anything"))]))
	, others(lit("one"))
	, prod([lit("case")],sort("Reserved"),\no-attrs())
	, prod([lit("return")],sort("Reserved"),\no-attrs())
	, prod([lit("real")],sort("BasicType"),attrs([term(cons("Real"))]))
	, prod([lit("while")],sort("Reserved"),\no-attrs())
	, prod([label("mid",sort("MidProtocolChars")),label("expression",sort("Expression")),label("tail",sort("ProtocolTail"))],sort("ProtocolTail"),attrs([term(cons("Mid"))]))
	, others(lit("public"))
	, others(lit("module"))
	, prod([lit("type")],sort("Reserved"),\no-attrs())
	, prod([lit("notin")],sort("Reserved"),\no-attrs())
	, prod([lit("else")],sort("Reserved"),\no-attrs())
	, prod([label("assignable",sort("Assignable")),label("operator",sort("Assignment")),label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Assignment"))]))
	, others(lit("o"))
	, prod([lit("non-terminal")],sort("BasicType"),attrs([term(cons("ReifiedNonTerminal"))]))
	, prod([label("name",sort("Name"))],sort("Variable"),attrs([term(cons("UnInitialized"))]))
	, prod([label("pre",sort("PreProtocolChars")),label("expression",sort("Expression")),label("tail",sort("ProtocolTail"))],sort("ProtocolPart"),attrs([term(cons("Interpolated"))]))
	, prod([\char-class([range(0,91),range(93,65535)])],sort("StringCharacter"),attrs([term("lexical")]))
	, prod([lit("set"),label("name",sort("QualifiedName")),label("expression",sort("Expression"))],sort("ShellCommand"),attrs([term(cons("SetOption"))]))
	, prod([lit("in")],sort("Reserved"),\no-attrs())
	, prod([label("name",sort("QualifiedName"))],sort("ImportedModule"),attrs([term(cons("Default"))]))
	, prod([lit("false")],sort("Reserved"),\no-attrs())
	, others(sort("DecimalLongLiteral"))
	, prod([lit("set")],sort("BasicType"),attrs([term(cons("Set"))]))
	, prod([label("qualifiedName",sort("QualifiedName"))],sort("Expression"),attrs([term(cons("QualifiedName"))]))
	, prod([lit("\\BOT")],sort("Character"),attrs([term(cons("Bottom"))]))
	, prod([lit("join")],sort("Reserved"),\no-attrs())
	, others(lit("|"))
	, prod([label("name",sort("QualifiedName")),label("actuals",sort("ModuleActuals"))],sort("ImportedModule"),attrs([term(cons("Actuals"))]))
	, prod([label("locationLiteral",sort("LocationLiteral"))],sort("Literal"),attrs([term(cons("Location"))]))
	, others(sort("Name"))
	, prod([lit("undeclare"),label("name",sort("QualifiedName"))],sort("ShellCommand"),attrs([term(cons("Undeclare"))]))
	, others(lit("default"))
	, prod([lit("["),label("types",\iter-seps(sort("Type"),[layout(),lit(","),layout()])),lit("]")],sort("ModuleActuals"),attrs([term(cons("Default"))]))
	, prod([label("pre",sort("PrePathChars")),label("expression",sort("Expression")),label("tail",sort("PathTail"))],sort("PathPart"),attrs([term(cons("Interpolated"))]))
	, prod([lit("\\n")],sort("StrChar"),attrs([term(cons("newline")),term("lexical")]))
	, prod([\char-class([range(42,42)])],sort("Asterisk"),attrs([term("lexical")]))
	, prod([lit("\>"),sort("URLChars"),lit("://")],sort("PostProtocolChars"),attrs([term("lexical")]))
	, prod([lit("fail")],sort("Reserved"),\no-attrs())
	, prod([label("name",sort("QualifiedName")),label("actuals",sort("ModuleActuals")),label("renamings",sort("Renamings"))],sort("ImportedModule"),attrs([term(cons("ActualsRenaming"))]))
	, prod([lit("if")],sort("Reserved"),\no-attrs())
	, prod([lit("extend")],sort("Reserved"),\no-attrs())
	, others(sort("HexLongLiteral"))
	, prod([lit("0")],sort("DecimalIntegerLiteral"),attrs([term("lexical")]))
	, others(lit("throws"))
	, prod([lit("innermost")],sort("Strategy"),attrs([term(cons("Innermost"))]))
	, prod([label("type",sort("Type")),label("modifiers",sort("FunctionModifiers")),label("name",sort("Name")),label("parameters",sort("Parameters"))],sort("Signature"),attrs([term(cons("NoThrows"))]))
	, prod([lit("\<"),sort("Name"),lit("\>")],sort("NamedRegExp"),attrs([term("lexical")]))
	, prod([lit("."),iter(\char-class([range(48,57)])),opt(seq([\char-class([range(69,69),range(101,101)]),opt(\char-class([range(43,43),range(45,45)])),iter(\char-class([range(48,57)]))])),opt(\char-class([range(68,68),range(100,100)]))],sort("RealLiteral"),attrs([term("lexical")]))
	, prod([label("expression",sort("Expression")),lit("("),label("arguments",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("CallOrTree"))]))
	, prod([label("type",sort("Type")),label("name",sort("Name"))],sort("Formal"),attrs([term(cons("TypeName"))]))
	, prod([lit("\\EOF")],sort("Character"),attrs([term(cons("EOF"))]))
	, prod([label("type",sort("Type")),label("parameters",sort("Parameters")),lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Expression"),attrs([term(cons("Closure"))]))
	, prod([label("expression",sort("Expression"))],sort("Command"),attrs([term(cons("Expression"))]))
	, prod([lit("return"),lit(";")],sort("Return"),attrs([term(cons("NoExpression"))]))
	, prod([lit("&=")],sort("Assignment"),attrs([term(cons("Intersection"))]))
	, prod([lit("\\"),iter(\char-class([range(117,117)])),\char-class([range(48,57),range(65,70),range(97,102)]),\char-class([range(48,57),range(65,70),range(97,102)]),\char-class([range(48,57),range(65,70),range(97,102)]),\char-class([range(48,57),range(65,70),range(97,102)])],sort("UnicodeEscape"),attrs([term("lexical")]))
	, prod([\char-class([range(0,59),range(61,91),range(93,65535)])],sort("RegExp"),attrs([term("lexical")]))
	, prod([lit("{"),\iter-star(sort("TagChar")),lit("}")],sort("TagString"),attrs([term("lexical")]))
	, prod([label("test",sort("Test")),lit(";")],sort("Declaration"),attrs([term(cons("Test"))]))
	, prod([label("qualifiedName",sort("QualifiedName")),lit("*")],sort("Pattern"),attrs([term(cons("MultiVariable"))]))
	, others(lit("on "))
	, prod([lit("type")],sort("BasicType"),attrs([term(cons("ReifiedType"))]))
	, others(lit("!"))
	, prod([\char-class([range(48,48)]),\char-class([range(88,88),range(120,120)]),iter(\char-class([range(48,57),range(65,70),range(97,102)])),\char-class([range(76,76),range(108,108)])],sort("HexLongLiteral"),attrs([term("lexical")]))
	, prod([lit("("),label("head",sort("Symbol")),label("tail",\iter-seps(sort("Symbol"),[layout()])),lit(")")],sort("Symbol"),attrs([term(cons("Sequence"))]))
	, prod([lit("{"),label("elements",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("}")],sort("Expression"),attrs([term(cons("Set"))]))
	, prod([\char-class([range(49,57)]),\iter-star(\char-class([range(48,57)])),\char-class([range(76,76),range(108,108)])],sort("DecimalLongLiteral"),attrs([term("lexical")]))
	, prod([lit("tuple")],sort("BasicType"),attrs([term(cons("Tuple"))]))
	, others(lit("&"))
	, prod([label("booleanLiteral",sort("BooleanLiteral"))],sort("Literal"),attrs([term(cons("Boolean"))]))
	, prod([lit("value")],sort("Reserved"),\no-attrs())
	, prod([lit("0"),\char-class([range(76,76),range(108,108)])],sort("DecimalLongLiteral"),attrs([term("lexical")]))
	, prod([lit("fun")],sort("Reserved"),\no-attrs())
	, prod([lit("+=")],sort("Assignment"),attrs([term(cons("Addition"))]))
	, others(lit("*"))
	, prod([lit("non-terminal")],sort("Reserved"),\no-attrs())
	, others(lit("+"))
	, others(lit(","))
	, others(lit("-"))
	, others(lit("."))
	, others(lit("/"))
	, others(lit("str"))
	, prod([label("ret",sort("Return"))],sort("Statement"),attrs([term(cons("Return"))]))
	, prod([label("name",sort("Name"))],sort("UserType"),attrs([term(cons("Name"))]))
	, choice(sort("Assignable"),{prod([label("receiver",sort("Assignable")),lit("["),label("subscript",sort("Expression")),lit("]")],sort("Assignable"),attrs([term(cons("Subscript"))])),prod([label("receiver",sort("Assignable")),lit("."),label("field",sort("Name"))],sort("Assignable"),attrs([term(cons("FieldAccess"))])),prod([label("receiver",sort("Assignable")),lit("?"),label("defaultExpression",sort("Expression"))],sort("Assignable"),attrs([term(cons("IfDefinedOrDefault"))]))})
	, prod([sort("URLChars"),\char-class([range(124,124)])],sort("PathChars"),attrs([term("lexical")]))
	, prod([label("fieldName",sort("Name"))],sort("Field"),attrs([term(cons("Name"))]))
	, others(lit("reified"))
	, others(lit(":"))
	, prod([lit("view")],sort("Kind"),attrs([term(cons("View"))]))
	, prod([lit("["),label("results",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("|"),label("generators",\iter-seps(sort("Expression"),[layout(),lit(","),layout()])),lit("]")],sort("Comprehension"),attrs([term(cons("List"))]))
	, others(lit("\<"))
	, prod([\char-class([range(9,10),range(13,13),range(32,32)])],sort("LAYOUT"),attrs([term(cons("whitespace")),term("lexical")]))
	, prod([\char-class([range(60,60)]),cf(opt(sort("LAYOUT"))),cf(sort("Expression")),cf(opt(sort("LAYOUT"))),\char-class([range(62,62)])],lex(sort("RegExp")),attrs([term(cons("MetaVariable")),term("lexical")]))
	, others(lit("="))
	, prod([lit("&"),label("name",sort("Name")),lit("<:"),label("bound",sort("Type"))],sort("TypeVar"),attrs([term(cons("Bounded"))]))
	, prod([label("eos",sort("EOS"))],sort("Statement"),attrs([term(cons("EOS"))]))
	, others(lit("\>"))
	, others(lit("dynamic"))
	, others(lit("solve"))
	, prod([lit("visit"),lit("("),label("subject",sort("Expression")),lit(")"),lit("{"),label("cases",\iter-seps(sort("Case"),[layout()])),lit("}")],sort("Visit"),attrs([term(cons("DefaultStrategy"))]))
	, others(lit("?"))
	, prod([lit("{"),label("symbol",sort("Symbol")),label("sep",sort("StrCon")),lit("}"),lit("+")],sort("Symbol"),attrs([term(cons("IterSep"))]))
	, others(sort("Backslash"))
	, others(lit("node"))
	, prod([lit("("),lit(")")],sort("Symbol"),attrs([term(cons("Empty"))]))
	, prod([lit("bottom-up")],sort("Strategy"),attrs([term(cons("BottomUp"))]))
	, prod([lit("bag")],sort("BasicType"),attrs([term(cons("Bag"))]))
	, prod([lit("\\"),\char-class([range(48,51)]),\char-class([range(48,55)]),\char-class([range(48,55)])],sort("EscapeSequence"),attrs([term("lexical")]))
	, prod([label("character",sort("Character"))],sort("CharRange"),attrs([term(cons("Character"))]))
	, prod([label("fail",sort("Fail"))],sort("Statement"),attrs([term(cons("Fail"))]))
	, prod([\iter-star(\char-class([range(0,123),range(125,65535)]))],sort("URLChars"),attrs([term("lexical")]))
	, prod([label("label",sort("Label")),lit("while"),lit("("),label("condition",sort("Expression")),lit(")"),label("body",sort("Statement"))],sort("EOS"),attrs([term(cons("While"))]))
	, prod([lit("map")],sort("Reserved"),\no-attrs())
	, prod([lit("test")],sort("ShellCommand"),attrs([term(cons("Test"))]))
	, prod([label("declaration",sort("Declaration"))],sort("Toplevel"),attrs([term(cons("GivenVisibility"))]))
	, prod([sort("Backslash")],sort("RegExp"),attrs([term("lexical")]))
	, prod([lit("assert")],sort("Reserved"),\no-attrs())
	, prod([lit("["),label("first",sort("Expression")),lit(".."),label("last",sort("Expression")),lit("]")],sort("Expression"),attrs([term(cons("Range"))]))
	, prod([label("tags",sort("Tags")),lit("module"),label("name",sort("QualifiedName")),label("params",sort("ModuleParameters")),label("imports",\iter-star-seps(sort("Import"),[layout()]))],sort("Header"),attrs([term(cons("Parameters"))]))
	, prod([label("function",sort("FunctionType"))],sort("Type"),attrs([term(cons("Function"))]))
	, prod([lit("*=")],sort("Assignment"),attrs([term(cons("Product"))]))
	, prod([lit("loc")],sort("Reserved"),\no-attrs())
	, first(sort("Symbol"),[choice(sort("Symbol"),{prod([label("symbol",sort("Symbol")),lit("?")],sort("Symbol"),attrs([term(cons("Optional"))])),prod([label("symbol",sort("Symbol")),lit("+")],sort("Symbol"),attrs([term(cons("Iter"))])),prod([label("symbol",sort("Symbol")),lit("*")],sort("Symbol"),attrs([term(cons("IterStar"))]))}),prod([label("lhs",sort("Symbol")),lit("|"),label("rhs",sort("Symbol"))],sort("Symbol"),attrs([term(cons("Alternative"))]))])
	, prod([lit("\\TOP")],sort("Character"),attrs([term(cons("Top"))]))
	, prod([lit("visit")],sort("Reserved"),\no-attrs())
	, prod([lit("lex")],sort("BasicType"),attrs([term(cons("Lex"))]))
	, prod([lit("("),label("mappings",\iter-star-seps(\parameterized-sort("Mapping",[sort("Expression")]),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("Map"))]))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),lit("anno"),label("annoType",sort("Type")),label("onType",sort("Type")),lit("@"),label("name",sort("Name")),lit(";")],sort("Declaration"),attrs([term(cons("Annotation"))]))
	, prod([lit("dynamic"),label("declarator",sort("Declarator"))],sort("LocalVariableDeclaration"),attrs([term(cons("Dynamic"))]))
	, prod([lit("assert"),label("expression",sort("Expression")),lit(";")],sort("Statement"),attrs([term(cons("Assert"))]))
	, prod([\char-class([range(0,38),range(40,91),range(93,65535)])],sort("SingleCharacter"),attrs([term("lexical")]))
	, prod([lit("//"),\iter-star(\char-class([range(0,9),range(11,65535)])),\char-class([range(10,10)])],sort("Comment"),attrs([term(cons("Comment")),term("lexical")]))
	, prod([lit("("),label("ranges",sort("CharRanges")),lit(")")],sort("CharRanges"),attrs([term(cons("Bracket"))]))
	, prod([label("type",sort("Type")),label("name",sort("Name"))],sort("TypeArg"),attrs([term(cons("Named"))]))
	, others(lit("throw"))
	, prod([lit("str")],sort("BasicType"),attrs([term(cons("String"))]))
	, others(lit("bool"))
	, prod([label("tags",sort("Tags")),lit("module"),label("name",sort("QualifiedName")),label("imports",\iter-star-seps(sort("Import"),[layout()]))],sort("Header"),attrs([term(cons("Default"))]))
	, prod([label("name",sort("Name")),label("type",sort("Type"))],sort("Alternative"),attrs([term(cons("NamedType"))]))
	, prod([lit("try")],sort("Reserved"),\no-attrs())
	, prod([lit("reified")],sort("BasicType"),attrs([term(cons("ReifiedReifiedType"))]))
	, prod([lit("\>"),sort("URLChars"),lit("\<")],sort("MidPathChars"),attrs([term("lexical")]))
	, prod([lit("import")],sort("Reserved"),\no-attrs())
	, prod([lit("global")],sort("Reserved"),\no-attrs())
	, prod([label("pattern",sort("Pattern")),lit(":"),label("statement",sort("Statement"))],sort("PatternWithAction"),attrs([term(cons("Arbitrary"))]))
	, prod([lit("all")],sort("Reserved"),\no-attrs())
	, prod([\char-class([range(92,92)]),\char-class([range(92,92),range(125,125)])],sort("TagChar"),attrs([term("lexical")]))
	, prod([label("character",\char-class([range(48,57),range(65,90),range(97,122)]))],sort("ShortChar"),attrs([term("lexical")]))
	, prod([lit("("),label("formals",sort("Formals")),lit("..."),lit(")")],sort("Parameters"),attrs([term(cons("VarArgs"))]))
	, prod([lit("outermost")],sort("Strategy"),attrs([term(cons("Outermost"))]))
	, others(lit("rule"))
	, prod([lit("data")],sort("Reserved"),\no-attrs())
	, prod([lit("module")],sort("Kind"),attrs([term(cons("Module"))]))
	, prod([lit("public")],sort("Visibility"),attrs([term(cons("Public"))]))
	, prod([label("names",\iter-seps(sort("Name"),[layout(),lit("::"),layout()]))],sort("QualifiedName"),attrs([term(cons("Default"))]))
	, prod([label("octalLong",sort("OctalLongLiteral"))],sort("LongLiteral"),attrs([term(cons("OctalLongLiteral"))]))
	, prod([lit("void")],sort("Reserved"),\no-attrs())
	, prod([lit("["),label("first",sort("Expression")),lit(","),label("second",sort("Expression")),lit(".."),label("last",sort("Expression")),lit("]")],sort("Expression"),attrs([term(cons("StepRange"))]))
	, prod([label("regExpLiteral",sort("RegExpLiteral"))],sort("Literal"),attrs([term(cons("RegExp"))]))
	, prod([sort("Reserved")],sort("Name"),\no-attrs())
	, prod([label("basicType",sort("BasicType")),lit("("),label("arguments",\iter-star-seps(sort("Expression"),[layout(),lit(","),layout()])),lit(")")],sort("Expression"),attrs([term(cons("ReifiedType"))]))
	, prod([lit("@"),label("name",sort("Name")),lit("="),label("expression",sort("Expression"))],sort("Tag"),attrs([term(cons("Expression")),term(cons("Comment"))]))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),label("type",sort("Type")),label("variables",\iter-seps(sort("Variable"),[layout(),lit(","),layout()])),lit(";")],sort("Declaration"),attrs([term(cons("Variable"))]))
	, prod([lit("real")],sort("Reserved"),\no-attrs())
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),label("signature",sort("Signature")),lit(";")],sort("FunctionDeclaration"),attrs([term(cons("Abstract"))]))
	, prod([label("tags",sort("Tags")),lit("test"),label("expression",sort("Expression")),lit(":"),label("labeled",sort("StringLiteral"))],sort("Test"),attrs([term(cons("Labeled"))]))
	, others(lit("for"))
	, prod([lit(";"),label("expression",sort("Expression"))],sort("Bound"),attrs([term(cons("Default"))]))
	, prod([sort("EscapedName")],sort("Name"),attrs([term("lexical")]))
	, prod([\char-class([range(48,48)]),iter(\char-class([range(48,55)])),\char-class([range(76,76),range(108,108)])],sort("OctalLongLiteral"),attrs([term("lexical")]))
	, prod([lit("tag")],sort("Reserved"),\no-attrs())
	, prod([lit("repeat")],sort("Reserved"),\no-attrs())
	, prod([label("declaration",sort("LocalVariableDeclaration")),lit(";")],sort("Statement"),attrs([term(cons("VariableDeclaration"))]))
	, prod([label("parameters",sort("Parameters")),lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Expression"),attrs([term(cons("VoidClosure"))]))
	, prod([lit("/=")],sort("Assignment"),attrs([term(cons("Division"))]))
	, prod([lit("finally")],sort("Reserved"),\no-attrs())
	, prod([lit("private")],sort("Reserved"),\no-attrs())
	, prod([lit("\>"),sort("URLChars"),lit("|")],sort("PostPathChars"),attrs([term("lexical")]))
	, prod([label("realLiteral",sort("RealLiteral"))],sort("Literal"),attrs([term(cons("Real"))]))
	, prod([lit("true")],sort("Reserved"),\no-attrs())
	, prod([lit("|"),sort("URLChars"),lit("\<")],sort("PreProtocolChars"),attrs([term("lexical")]))
	, prod([lit("help")],sort("ShellCommand"),attrs([term(cons("Help"))]))
	, others(lit("view"))
	, prod([lit(":"),label("command",sort("ShellCommand"))],sort("Command"),attrs([term(cons("Shell"))]))
	, prod([lit("declarations")],sort("ShellCommand"),attrs([term(cons("ListDeclarations"))]))
	, prod([label("comprehension",sort("Comprehension"))],sort("Expression"),attrs([term(cons("Comprehension"))]))
	, prod([lit("constructor")],sort("Reserved"),\no-attrs())
	, others(\iter-star(\char-class([range(0,9),range(11,65535)])))
	, prod([label("lhs",sort("Symbol")),lit("|"),label("rhs",sort("Symbol"))],sort("Symbol"),attrs([term(cons("Alternative"))]))
	, prod([lit("\>"),sort("URLChars"),lit("\<")],sort("MidProtocolChars"),attrs([term("lexical")]))
	, others(lit("anno"))
	, others(lit("adt"))
	, prod([lit("{"),label("statements",\iter-star-seps(sort("Statement"),[layout()])),lit("}")],sort("FunctionBody"),attrs([term(cons("Default"))]))
	, prod([label("modifiers",\iter-star-seps(sort("FunctionModifier"),[layout()]))],sort("FunctionModifiers"),attrs([term(cons("List"))]))
	, prod([label("shortChar",sort("ShortChar"))],sort("Character"),attrs([term(cons("Short"))]))
	, prod([lit("-=")],sort("Assignment"),attrs([term(cons("Subtraction"))]))
	, others(lit("insert"))
	, prod([lit("int")],sort("Reserved"),\no-attrs())
	, prod([lit("global"),label("type",sort("Type")),label("names",\iter-seps(sort("QualifiedName"),[layout(),lit(","),layout()])),lit(";")],sort("Statement"),attrs([term(cons("GlobalDirective"))]))
	, prod([lit("any")],sort("Reserved"),\no-attrs())
	, first(sort("Command"),[prod([label("expression",sort("Expression"))],sort("Command"),attrs([term(cons("Expression"))])),choice(sort("Expression"),{prod([lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Expression"),attrs([term(cons("NonEmptyBlock"))])),prod([label("eos",sort("EOS"))],sort("Expression"),attrs([term(cons("EOS"))]))})])
	, others(lit("catch"))
	, others(sort("OctalLongLiteral"))
	, prod([label("formals",\iter-star-seps(sort("Formal"),[layout(),lit(","),layout()]))],sort("Formals"),attrs([term(cons("Default"))]))
	, prod([label("replacementExpression",sort("Expression")),lit("when"),label("conditions",\iter-seps(sort("Expression"),[layout(),lit(","),layout()]))],sort("Replacement"),attrs([term(cons("Conditional"))]))
	, prod([sort("UnicodeEscape")],sort("StringCharacter"),attrs([term("lexical")]))
	, others(opt(sort("LAYOUT")))
	, prod([label("symbol",sort("Symbol")),lit("?")],sort("Symbol"),attrs([term(cons("Optional"))]))
	, prod([lit("default"),lit(":"),label("statement",sort("Statement"))],sort("Case"),attrs([term(cons("Default"))]))
	, prod([lit("/"),\iter-star(sort("RegExp")),lit("/"),sort("RegExpModifier")],sort("RegExpLiteral"),attrs([term("lexical")]))
	, prod([label("protocolChars",sort("ProtocolChars"))],sort("ProtocolPart"),attrs([term(cons("NonInterpolated"))]))
	, prod([label("integerLiteral",sort("IntegerLiteral"))],sort("Literal"),attrs([term(cons("Integer"))]))
	, prod([],sort("Visibility"),attrs([term(cons("Default"))]))
	, prod([sort("NamedBackslash")],sort("NamedRegExp"),attrs([term("lexical")]))
	, prod([label("structured",sort("StructuredType"))],sort("Type"),attrs([term(cons("Structured"))]))
	, prod([lit("on")],sort("Reserved"),\no-attrs())
	, prod([lit("{"),label("symbol",sort("Symbol")),label("sep",sort("StrCon")),lit("}"),lit("*")],sort("Symbol"),attrs([term(cons("IterStarSep"))]))
	, prod([label("tags",sort("Tags")),lit("rule"),label("name",sort("Name")),label("patternAction",sort("PatternWithAction")),lit(";")],sort("Declaration"),attrs([term(cons("Rule"))]))
	, prod([label("imported",sort("Import"))],sort("Command"),attrs([term(cons("Import"))]))
	, others(sort("Marker"))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),lit("data"),label("user",sort("UserType")),lit("="),label("variants",\iter-seps(sort("Variant"),[layout(),lit("|"),layout()])),lit(";")],sort("Declaration"),attrs([term(cons("Data"))]))
	, prod([label("label",sort("Label")),lit("{"),label("statements",\iter-seps(sort("Statement"),[layout()])),lit("}")],sort("Statement"),attrs([term(cons("Block"))]))
	, others(lit("rel"))
	, prod([lit("quit")],sort("ShellCommand"),attrs([term(cons("Quit"))]))
	, prod([\char-class([range(92,92)]),label("escape",\char-class([range(0,96),range(110,110),range(114,114),range(116,116),range(123,65535)]))],sort("ShortChar"),attrs([term("lexical")]))
	, prod([label("tags",sort("Tags")),label("visibility",sort("Visibility")),lit("view"),label("view",sort("Name")),lit("<:"),label("superType",sort("Name")),lit("="),label("alts",\iter-seps(sort("Alternative"),[layout(),lit("|"),layout()])),lit(";")],sort("Declaration"),attrs([term(cons("View"))]))
	, prod([sort("EscapeSequence")],sort("StringCharacter"),attrs([term("lexical")]))
	, prod([label("charClass",sort("CharClass"))],sort("Symbol"),attrs([term(cons("CharacterClass"))]))
	, prod([label("name",sort("QualifiedName")),label("renamings",sort("Renamings"))],sort("ImportedModule"),attrs([term(cons("Renamings"))]))
	, prod([\char-class([range(92,92)]),\char-class([range(60,60),range(62,62),range(92,92)])],sort("NamedRegExp"),attrs([term("lexical")]))
	, others(lit("list"))
	, prod([lit("tuple")],sort("Reserved"),\no-attrs())
})