module experiments::Compiler::Examples::Tst3

import util::Reflective;
import analysis::graphs::Graph;
import Relation;
import IO;
import Set;
import Node;
import List;

data RName =
      RSimpleName(str name)
    | RCompoundName(list[str] nameParts)     
    ;
anno loc RName@at;  

@doc{Pretty-print a list of abstract names, separated by ::}
public str prettyPrintNameList(list[str] nameList) = intercalate("::", nameList);
    
@doc{Pretty-print the abstract representation of a name.}
public str prettyPrintName(RSimpleName(str s)) = s;
public str prettyPrintName(RCompoundName(list[str] sl)) = prettyPrintNameList(sl); 

alias ImportGraph = Graph[RName];

data IGComponent = singleton(RName item) | component(set[RName] items); 

bool tst(){
    return directedConnectedComponents(entryNode, igINT) == igComponentsINT;
}

public Graph[IGComponent] directedConnectedComponents(RName entryNode, ImportGraph ig) {
    
    Graph[IGComponent] res = { };
    set[IGComponent] newNodes = { };
    igrtrans = ig+;
    firstIter = true;
    allNodes = carrier(ig);
    currentNode = delAnnotations(entryNode);
    
    while (!isEmpty(allNodes)) {
        if (firstIter) {
            firstIter = false;
        } else {
            currentNode = getFirstFrom(allNodes);
        } 
        allNodes = allNodes - currentNode;
            
        if (currentNode in igrtrans[currentNode]) {
            newComponent = component(currentNode + { n | n <- igrtrans[currentNode], currentNode in igrtrans[n] });
            newNodes = newNodes + newComponent;
            allNodes - allNodes - newComponent.items;
        } else {
            newNodes = newNodes + singleton(currentNode);
        }
    }
    
    println("newNodes == newNodesINT: <newNodes == newNodesINT>");
    
    //newNodes = newNodes + { singleton(n) | n <- bottom(ig) };
    
    nodeMapping = ( n : c | n <- carrier(ig), c <- newNodes, singleton(n) := c || (component(ns) := c && n in ns) );

    println("nodeMapping == nodeMappingINT:  <nodeMapping == nodeMappingINT>");
    
    for (n <- carrier(ig)) {
        if (n notin nodeMapping) {
            println("We are missing <prettyPrintName(n)>");
        //} else {
        //  println("<prettyPrintName(n)> = <nodeMapping[n]>");
        }
    }

    res = { < nodeMapping[n1], nodeMapping[n2] > | < n1, n2 > <- ig };
    
    println("res == resINT: <res == resINT>");
    
    scnt = 0;
    solve(res) {
        scnt += 1;
        
        if ( { <IGComponent a, IGComponent b >, < b, b >, c* } := res ){
            println("<scnt>: remove \<<b>, <b>\>");
            res = { *c, < a, b > };
        } else {
            println("<scnt>: no change");
        }
    }
    
    println("scnt: <scnt>");
    
    return res;
}

public map[RName,IGComponent] nodeMappingINT =
(RSimpleName("ToString"):singleton(RSimpleName("ToString")),RSimpleName("Exception"):singleton(RSimpleName("Exception")),RCompoundName(["experiments","Compiler","muRascal","AST"]):singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),RCompoundName(["lang","rascal","types","TestChecker"]):singleton(RCompoundName(["lang","rascal","types","TestChecker"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]):singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])),RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)]:singleton(RCompoundName(["experiments","Compiler","Compile"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),RCompoundName(["lang","rascal","grammar","definition","Names"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]):singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]):singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])),RCompoundName(["lang","rascal","grammar","definition","Characters"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),RCompoundName(["lang","manifest","IO"]):singleton(RCompoundName(["lang","manifest","IO"])),RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]):singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),RCompoundName(["lang","rascal","checker","ListUtils"]):singleton(RCompoundName(["lang","rascal","checker","ListUtils"])),RCompoundName(["lang","rascal","checker","TreeUtils"]):singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])),RSimpleName("Origins"):singleton(RSimpleName("Origins")),RCompoundName(["lang","rascal","types","ConvertType"]):singleton(RCompoundName(["lang","rascal","types","ConvertType"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])),RCompoundName(["lang","rascal","types","AbstractName"]):singleton(RCompoundName(["lang","rascal","types","AbstractName"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),RSimpleName("Set"):singleton(RSimpleName("Set")),RCompoundName(["lang","rascal","meta","ModuleInfo"]):singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])),RSimpleName("Node"):singleton(RSimpleName("Node")),RCompoundName(["lang","rascal","types","Util"]):singleton(RCompoundName(["lang","rascal","types","Util"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),RCompoundName(["lang","rascal","grammar","definition","Literals"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),RSimpleName("IO"):singleton(RSimpleName("IO")),RCompoundName(["util","Maybe"]):singleton(RCompoundName(["util","Maybe"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),RCompoundName(["util","Math"]):singleton(RCompoundName(["util","Math"])),RSimpleName("Grammar"):singleton(RSimpleName("Grammar")),RSimpleName("Message"):singleton(RSimpleName("Message")),RSimpleName("ListRelation"):singleton(RSimpleName("ListRelation")),RCompoundName(["lang","rascal","grammar","definition","Productions"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),RSimpleName("Type"):singleton(RSimpleName("Type")),RSimpleName("DateTime"):singleton(RSimpleName("DateTime")),RCompoundName(["lang","rascal","grammar","definition","Symbols"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),RSimpleName("Map"):singleton(RSimpleName("Map")),RCompoundName(["lang","rascal","types","AbstractType"]):singleton(RCompoundName(["lang","rascal","types","AbstractType"])),RSimpleName("Relation"):singleton(RSimpleName("Relation")),RSimpleName("List"):singleton(RSimpleName("List")),RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]):singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),RCompoundName(["analysis","graphs","Graph"]):singleton(RCompoundName(["analysis","graphs","Graph"])),RCompoundName(["lang","rascal","types","TypeExceptions"]):singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])),RCompoundName(["lang","rascal","syntax","Rascal"]):singleton(RCompoundName(["lang","rascal","syntax","Rascal"])),RCompoundName(["lang","rascal","types","TypeSignature"]):singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),RSimpleName("ParseTree"):singleton(RSimpleName("ParseTree")),RSimpleName("String"):singleton(RSimpleName("String")),RCompoundName(["lang","rascal","types","CheckTypes"]):singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),RCompoundName(["util","Benchmark"]):singleton(RCompoundName(["util","Benchmark"])),RCompoundName(["lang","rascal","types","TypeInstantiation"]):singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]):singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),RCompoundName(["lang","rascal","types","CheckModule"]):singleton(RCompoundName(["lang","rascal","types","CheckModule"])),RCompoundName(["lang","rascal","checker","ParserHelper"]):singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),RCompoundName(["util","Reflective"]):singleton(RCompoundName(["util","Reflective"])),RCompoundName(["util","UUID"]):singleton(RCompoundName(["util","UUID"])),RCompoundName(["lang","rascal","types","AbstractKind"]):singleton(RCompoundName(["lang","rascal","types","AbstractKind"])),RCompoundName(["experiments","Compiler","RVM","AST"]):singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]):singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])),RCompoundName(["lang","rascal","types","CheckerConfig"]):singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),RCompoundName(["lang","rascal","grammar","definition","Attributes"]):singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),RSimpleName("ValueIO"):singleton(RSimpleName("ValueIO")),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]):component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}));

public Graph[IGComponent] resINT =
{<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","checker","TreeUtils"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RSimpleName("ValueIO"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["util","Math"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RSimpleName("Node"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Map"))>,<singleton(RSimpleName("List")),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["util","Benchmark"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("Grammar"))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["util","Math"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Node"))>,<singleton(RSimpleName("Set")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("Message"))>,<singleton(RSimpleName("Node")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RSimpleName("ValueIO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["analysis","graphs","Graph"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","Util"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RSimpleName("Set"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("String"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RCompoundName(["util","Math"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractName"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Node"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["analysis","graphs","Graph"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,<singleton(RSimpleName("Set")),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","checker","TreeUtils"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RSimpleName("IO"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("ValueIO"))>,<singleton(RSimpleName("Grammar")),singleton(RSimpleName("Exception"))>,<singleton(RSimpleName("Message")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["util","UUID"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["analysis","graphs","Graph"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,<singleton(RCompoundName(["util","Math"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Set"))>,<singleton(RSimpleName("Grammar")),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["util","Maybe"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,<singleton(RSimpleName("IO")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("ValueIO"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"]))>,<singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractKind"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),singleton(RSimpleName("ParseTree"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])),singleton(RSimpleName("Exception"))>,<singleton(RSimpleName("ParseTree")),singleton(RSimpleName("Type"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,<singleton(RCompoundName(["lang","rascal","checker","ListUtils"])),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","Util"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RCompoundName(["lang","manifest","IO"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","CheckModule"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","manifest","IO"])),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("ValueIO"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])})>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("DateTime"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractName"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RSimpleName("Relation")),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("String"))>,<singleton(RSimpleName("ValueIO")),singleton(RSimpleName("Type"))>,<singleton(RSimpleName("Origins")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RCompoundName(["analysis","graphs","Graph"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Node"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Names"]))>,<singleton(RSimpleName("ToString")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),singleton(RSimpleName("Type"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["analysis","graphs","Graph"])),singleton(RSimpleName("Set"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RSimpleName("Set"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("Node"))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","checker","ListUtils"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("String"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,<singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RCompoundName(["util","Math"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("ToString"))>,<singleton(RCompoundName(["analysis","graphs","Graph"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,<singleton(RSimpleName("List")),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RSimpleName("ParseTree")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])),singleton(RSimpleName("Grammar"))>,<singleton(RSimpleName("String")),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Node"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","types","Util"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RCompoundName(["lang","rascal","types","TypeExceptions"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","manifest","IO"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("String"))>,<singleton(RSimpleName("ParseTree")),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","manifest","IO"])),singleton(RSimpleName("Type"))>,<singleton(RSimpleName("String")),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]))>,<singleton(RCompoundName(["analysis","graphs","Graph"])),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("Node"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("Grammar"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractName"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["util","Benchmark"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("IO"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])})>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("ListRelation"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["util","UUID"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("Set"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("IO"))>,<singleton(RSimpleName("String")),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","TestChecker"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("ParseTree"))>,<singleton(RSimpleName("ParseTree")),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("ValueIO"))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"]))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("String"))>,<singleton(RSimpleName("ValueIO")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RSimpleName("Exception"))>,<singleton(RSimpleName("Grammar")),singleton(RSimpleName("IO"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractName"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["lang","rascal","types","TestChecker"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractKind"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),singleton(RSimpleName("Exception"))>,<singleton(RSimpleName("Grammar")),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RSimpleName("Set")),singleton(RCompoundName(["util","Math"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["lang","rascal","types","Util"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RSimpleName("Grammar")),singleton(RSimpleName("ParseTree"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["util","Benchmark"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Type"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Node"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("DateTime"))>,<singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RCompoundName(["util","Math"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","checker","ListUtils"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,<singleton(RSimpleName("DateTime")),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RCompoundName(["util","Maybe"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RSimpleName("Set"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]))>,<singleton(RSimpleName("Type")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","manifest","IO"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("Type"))>,<singleton(RSimpleName("ListRelation")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","Util"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("Relation"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("Map"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["util","Reflective"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("IO"))>,<singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("Grammar"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RSimpleName("Relation"))>,<singleton(RSimpleName("Relation")),singleton(RSimpleName("Exception"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("Map"))>,<singleton(RSimpleName("Map")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["util","Reflective"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),singleton(RSimpleName("Type"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RSimpleName("ParseTree"))>,<singleton(RSimpleName("String")),singleton(RSimpleName("Origins"))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("Set"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("Exception"))>,<singleton(RSimpleName("ListRelation")),singleton(RSimpleName("List"))>,<singleton(RSimpleName("Type")),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"]))>,<singleton(RCompoundName(["lang","rascal","types","AbstractKind"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","TypeExceptions"]))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RSimpleName("DateTime"))>,<singleton(RSimpleName("DateTime")),singleton(RSimpleName("List"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("Type"))>,<singleton(RSimpleName("List")),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RSimpleName("ParseTree"))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RSimpleName("String"))>,<singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["lang","rascal","syntax","Rascal"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RSimpleName("Message"))>,<singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,<singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RSimpleName("Exception"))>,<singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","checker","ListUtils"]))>,<singleton(RCompoundName(["analysis","graphs","Graph"])),singleton(RSimpleName("Exception"))>}
;
 
public set[IGComponent] newNodesINT =
{singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])),singleton(RCompoundName(["lang","rascal","types","TestChecker"])),singleton(RSimpleName("ToString")),singleton(RSimpleName("Exception")),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])),singleton(RCompoundName(["experiments","Compiler","Compile"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])),singleton(RSimpleName("Message")),singleton(RSimpleName("Grammar")),singleton(RCompoundName(["util","Maybe"])),singleton(RSimpleName("IO")),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])),singleton(RCompoundName(["util","Math"])),singleton(RSimpleName("Set")),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}),singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])),singleton(RCompoundName(["lang","rascal","types","Util"])),singleton(RSimpleName("Node")),singleton(RCompoundName(["lang","rascal","types","ConvertType"])),singleton(RSimpleName("Origins")),singleton(RCompoundName(["lang","rascal","types","AbstractName"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])),singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])),singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])),singleton(RCompoundName(["lang","rascal","checker","ListUtils"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])),singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])),singleton(RCompoundName(["lang","manifest","IO"])),singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])),singleton(RCompoundName(["util","Reflective"])),singleton(RCompoundName(["util","UUID"])),singleton(RCompoundName(["lang","rascal","types","CheckModule"])),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])),singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])),singleton(RSimpleName("ValueIO")),singleton(RCompoundName(["experiments","Compiler","RVM","AST"])),singleton(RCompoundName(["lang","rascal","types","AbstractKind"])),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])),singleton(RSimpleName("String")),singleton(RSimpleName("ParseTree")),singleton(RCompoundName(["lang","rascal","types","CheckTypes"])),singleton(RCompoundName(["util","Benchmark"])),singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])),singleton(RSimpleName("Map")),component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}),singleton(RCompoundName(["lang","rascal","types","AbstractType"])),singleton(RSimpleName("Relation")),singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])),singleton(RSimpleName("List")),singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])),singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])),singleton(RCompoundName(["analysis","graphs","Graph"])),singleton(RCompoundName(["lang","rascal","syntax","Rascal"])),singleton(RCompoundName(["lang","rascal","types","TypeSignature"])),singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])),singleton(RSimpleName("DateTime")),singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])),singleton(RSimpleName("ListRelation")),singleton(RSimpleName("Type"))};  

public RName entryNode = RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)];

public ImportGraph igINT = {
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","meta","ModuleInfo"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RCompoundName(["lang","rascal","grammar","definition","Literals"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["util","Reflective"]), RSimpleName("Exception")>,
    <RCompoundName(["util","UUID"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Relation")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","meta","ModuleInfo"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["lang","rascal","types","TestChecker"])>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","AbstractName"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","Util"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Exception")>,
    <RSimpleName("ValueIO"), RSimpleName("Type")>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["lang","rascal","grammar","definition","Characters"])>,
    <RSimpleName("ValueIO"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("Exception")>,
    <RSimpleName("String"), RSimpleName("Origins")>,
    <RCompoundName(["experiments","Compiler","RVM","AST"]), RSimpleName("Exception")>,
    <RSimpleName("Grammar"), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["lang","rascal","grammar","definition","Names"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RCompoundName(["lang","rascal","grammar","definition","Characters"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("ToString")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["experiments","Compiler","RVM","AST"]), RSimpleName("Type")>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RCompoundName(["util","Math"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","rascal","checker","TreeUtils"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","AbstractKind"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","checker","ListUtils"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("List")>,
    <RSimpleName("Grammar"), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("String")>,
    <RSimpleName("ParseTree"), RSimpleName("Type")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Exception")>,
    <RSimpleName("Grammar"), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RCompoundName(["experiments","Compiler","RVM","AST"])>,
    <RSimpleName("ParseTree"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RSimpleName("String"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","manifest","IO"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","checker","ParserHelper"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Node")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["lang","rascal","meta","ModuleInfo"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("DateTime")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,
    <RCompoundName(["util","Benchmark"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("ValueIO")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","types","AbstractKind"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("ListRelation")>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Relation")>,
    <RCompoundName(["experiments","Compiler","RVM","AST"]), RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["lang","rascal","checker","TreeUtils"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RCompoundName(["util","Math"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Message")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["lang","manifest","IO"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("ParseTree")>,
    <RSimpleName("Map"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["util","Maybe"])>,
    <RCompoundName(["util","Reflective"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","TypeSignature"])>,
    <RSimpleName("Relation"), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","AbstractKind"])>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","AbstractKind"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Map")>,
    <RSimpleName("Set"), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","types","CheckTypes"])>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["util","UUID"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["util","Benchmark"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","grammar","definition","Names"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("Node")>,
    <RCompoundName(["util","Reflective"]), RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Exception")>,
    <RSimpleName("List"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","syntax","Rascal"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Type")>,
    <RCompoundName(["analysis","graphs","Graph"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["lang","rascal","types","TypeExceptions"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["util","Math"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RCompoundName(["lang","rascal","grammar","definition","Literals"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("Grammar")>,
    <RCompoundName(["lang","rascal","types","Util"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RCompoundName(["lang","rascal","types","TypeExceptions"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["lang","rascal","types","CheckTypes"])>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","TestChecker"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("Relation")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Relation")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["lang","rascal","types","AbstractName"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("Node")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("IO")>,
    <RCompoundName(["util","Math"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","TypeExceptions"])>,
    <RCompoundName(["analysis","graphs","Graph"]), RSimpleName("Relation")>,
    <RSimpleName("DateTime"), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RCompoundName(["experiments","Compiler","RVM","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Message")>,
    <RSimpleName("Type"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","AbstractKind"])>,
    <RSimpleName("ParseTree"), RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","RVM","AST"])>,
    <RSimpleName("String"), RSimpleName("Message")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","TypeSignature"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("Relation")>,
    <RSimpleName("ListRelation"), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","TypeExceptions"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["util","Benchmark"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","types","ConvertType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Node")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RCompoundName(["analysis","graphs","Graph"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","checker","ListUtils"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","AbstractName"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","checker","ParserHelper"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("DateTime")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("Type")>,
    <RSimpleName("Message"), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RSimpleName("Grammar")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","checker","TreeUtils"])>,
    <RSimpleName("Type"), RSimpleName("List")>,
    <RSimpleName("Grammar"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("IO")>,
    <RSimpleName("ListRelation"), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("ValueIO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("Message")>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]), RSimpleName("Type")>,
    <RCompoundName(["util","Math"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("Set")>,
    <RSimpleName("DateTime"), RSimpleName("List")>,
    <RSimpleName("IO"), RSimpleName("Exception")>,
    <RCompoundName(["util","Maybe"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("ValueIO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RSimpleName("String")>,
    <RSimpleName("Set"), RCompoundName(["util","Math"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("ValueIO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RSimpleName("Relation")>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["lang","rascal","grammar","definition","Productions"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","checker","TreeUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["util","Reflective"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Attributes"]), RSimpleName("ValueIO")>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("Type")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["util","Math"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","types","AbstractKind"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RSimpleName("Relation")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","RVM","AST"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("List")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("List")>,
    <RCompoundName(["util","Reflective"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["lang","rascal","types","CheckTypes"])>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,
    <RCompoundName(["util","Reflective"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","Util"]), RSimpleName("Exception")>,
    <RSimpleName("Node"), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","checker","ParserHelper"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("DateTime")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RSimpleName("ValueIO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("ValueIO")>,
    <RCompoundName(["lang","rascal","meta","ModuleInfo"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","Util"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","checker","ListUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RSimpleName("Set"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RSimpleName("Origins"), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","grammar","definition","Literals"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","CheckModule"])>,
    <RSimpleName("Relation"), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","ConvertType"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","grammar","definition","Symbols"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","TypeInstantiation"])>,
    <RCompoundName(["lang","rascal","types","AbstractName"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RSimpleName("Node")>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RSimpleName("Node")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","CheckTypes"])>,
    <RSimpleName("Grammar"), RSimpleName("Message")>,
    <RSimpleName("ParseTree"), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","ConvertType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["analysis","graphs","Graph"])>,
    <RSimpleName("ToString"), RSimpleName("Exception")>,
    <RSimpleName("String"), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("Node")>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RSimpleName("String")>,
    <RCompoundName(["analysis","graphs","Graph"]), RSimpleName("Set")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["util","Reflective"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("Set")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["analysis","graphs","Graph"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RCompoundName(["experiments","Compiler","RVM","AST"])>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RSimpleName("String")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","types","TypeSignature"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Productions"]), RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RSimpleName("Exception")>,
    <RCompoundName(["util","Reflective"]), RCompoundName(["lang","manifest","IO"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,
    <RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]), RSimpleName("Type")>,
    <RCompoundName(["lang","rascal","types","CheckerConfig"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("ValueIO")>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("Grammar")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("ParseTree")>,
    <RCompoundName(["analysis","graphs","Graph"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]), RSimpleName("ParseTree")>,
    <RCompoundName(["lang","rascal","grammar","definition","Names"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["lang","rascal","types","CheckerConfig"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RSimpleName("Message")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RSimpleName("List"), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("IO")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RSimpleName("IO")>,
    <RCompoundName(["lang","rascal","checker","ParserHelper"]), RSimpleName("List")>,
    <RCompoundName(["lang","rascal","types","TypeInstantiation"]), RSimpleName("Node")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","Util"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","checker","TreeUtils"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","grammar","definition","Productions"])>,
    <RCompoundName(["lang","rascal","types","TypeSignature"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","TypeInstantiation"])>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]), RCompoundName(["experiments","Compiler","muRascal","AST"])>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RSimpleName("Map")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,
    <RCompoundName(["experiments","Compiler","muRascal","AST"]), RSimpleName("Message")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","grammar","definition","Names"]), RSimpleName("Grammar")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["lang","rascal","meta","ModuleInfo"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("Node")>,
    <RCompoundName(["lang","rascal","checker","ListUtils"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","grammar","definition","Characters"]), RSimpleName("Exception")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RSimpleName("Node")>,
    <RCompoundName(["lang","manifest","IO"]), RSimpleName("Exception")>,
    <RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)], RCompoundName(["lang","rascal","types","AbstractName"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","ConvertType"])>,
    <RCompoundName(["lang","rascal","types","AbstractType"]), RSimpleName("ParseTree")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RSimpleName("String")>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["analysis","graphs","Graph"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,
    <RSimpleName("List"), RSimpleName("Map")>,
    <RCompoundName(["lang","manifest","IO"]), RSimpleName("Type")>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]), RSimpleName("Map")>,
    <RCompoundName(["lang","rascal","types","CheckModule"]), RCompoundName(["util","Reflective"])>,
    <RCompoundName(["lang","rascal","types","CheckTypes"]), RCompoundName(["lang","rascal","types","AbstractType"])>,
    <RCompoundName(["lang","rascal","types","TestChecker"]), RCompoundName(["lang","rascal","syntax","Rascal"])>,
    <RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]), RCompoundName(["lang","rascal","types","TypeInstantiation"])>
};

public ImportGraph igINTPLUS =
{<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Relation")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["util","Reflective"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Message")>,<RCompoundName(["util","UUID"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Set")>,<RCompoundName(["util","Reflective"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Relation")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RSimpleName("Set"),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","Util"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","TestChecker"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Type")>,<RSimpleName("ValueIO"),RSimpleName("Type")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Grammar")>,<RSimpleName("ValueIO"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RSimpleName("String"),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("Exception")>,<RSimpleName("Grammar"),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RSimpleName("Set"),RSimpleName("Map")>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("ToString")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","checker","ListUtils"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["util","Maybe"])>,<RSimpleName("ParseTree"),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RSimpleName("Grammar"),RSimpleName("ParseTree")>,<RSimpleName("ParseTree"),RSimpleName("Exception")>,<RSimpleName("String"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RSimpleName("Grammar"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RCompoundName(["experiments","Compiler","RVM","AST"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Origins")>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["util","Math"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Grammar")>,<RSimpleName("Grammar"),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["util","Benchmark"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Relation")>,<RCompoundName(["util","Reflective"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("ListRelation")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["util","Math"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("List")>,<RCompoundName(["analysis","graphs","Graph"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","checker","ListUtils"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","TestChecker"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("Map")>,<RSimpleName("Map"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["util","Reflective"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RSimpleName("Relation"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","TestChecker"])>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["util","UUID"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Message")>,<RSimpleName("Set"),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","checker","ListUtils"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("List")>,<RSimpleName("Relation"),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["util","UUID"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Exception")>,<RSimpleName("List"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","syntax","Rascal"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["util","Benchmark"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Type")>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Type")>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Type")>,<RCompoundName(["util","Reflective"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","Util"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["util","UUID"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","TestChecker"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("Relation")>,<RSimpleName("DateTime"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Relation")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Origins")>,<RCompoundName(["util","Math"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RCompoundName(["experiments","Compiler","RVM","AST"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RSimpleName("Grammar"),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RSimpleName("ParseTree"),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","RVM","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RSimpleName("String"),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Relation")>,<RSimpleName("ListRelation"),RSimpleName("Exception")>,<RSimpleName("Type"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RSimpleName("String"),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("String")>,<RSimpleName("ParseTree"),RSimpleName("Map")>,<RCompoundName(["util","Benchmark"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","AbstractName"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("String")>,<RSimpleName("Grammar"),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RSimpleName("ParseTree"),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RSimpleName("Message"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Relation")>,<RSimpleName("Type"),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("DateTime")>,<RSimpleName("String"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RSimpleName("Grammar"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("IO")>,<RSimpleName("ListRelation"),RSimpleName("List")>,<RSimpleName("Grammar"),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RSimpleName("Type")>,<RCompoundName(["util","Math"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Set")>,<RSimpleName("DateTime"),RSimpleName("List")>,<RCompoundName(["util","Maybe"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("ListRelation")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RSimpleName("IO"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Message")>,<RSimpleName("Relation"),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Relation")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("IO")>,<RSimpleName("Set"),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RSimpleName("ValueIO"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","Util"]),RCompoundName(["util","Math"])>,<RCompoundName(["util","Reflective"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("List")>,<RCompoundName(["util","Reflective"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["util","Reflective"]),RSimpleName("IO")>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["util","UUID"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Map")>,<RSimpleName("ValueIO"),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Exception")>,<RSimpleName("Node"),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","Util"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("ToString")>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("List")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RSimpleName("Set"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("Type")>,<RSimpleName("Origins"),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("List")>,<RSimpleName("DateTime"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("Type")>,<RSimpleName("Relation"),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("DateTime")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("DateTime")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RSimpleName("Type"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RSimpleName("Grammar"),RSimpleName("Message")>,<RSimpleName("ParseTree"),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","checker","ParserHelper"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","checker","ListUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["util","UUID"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("List")>,<RSimpleName("ListRelation"),RSimpleName("IO")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Relation")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","TestChecker"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","Util"])>,<RSimpleName("ToString"),RSimpleName("Exception")>,<RSimpleName("String"),RSimpleName("List")>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","grammar","definition","Literals"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["util","Maybe"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["util","Reflective"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","meta","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Set")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RSimpleName("DateTime"),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["experiments","Compiler","RVM","AST"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RSimpleName("Type"),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","ConvertType"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Set")>,<RSimpleName("ListRelation"),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Origins")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Relation")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RCompoundName(["lang","rascal","grammar","definition","Symbols"])>,<RCompoundName(["lang","rascal","types","Util"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RSimpleName("Message")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("ValueIO")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RSimpleName("List")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["util","Reflective"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","types","TypeExceptions"])>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","CheckerConfig"])>,<RCompoundName(["lang","rascal","types","TestChecker"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RSimpleName("List"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Characters"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","TypeSignature"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","TypeInstantiation"]),RSimpleName("Node")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","checker","TreeUtils"])>,<RSimpleName("Relation"),RSimpleName("Map")>,<RCompoundName(["util","Reflective"]),RSimpleName("List")>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Names"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("Type")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("ParseTree")>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["util","UUID"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("ParseTree")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","types","AbstractKind"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("ValueIO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","checker","ParserHelper"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","Util"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["lang","rascal","types","AbstractKind"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","manifest","IO"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("String")>,<RCompoundName(["experiments","Compiler","RVM","AST"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RCompoundName(["util","Math"])>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])>,<RCompoundName(["experiments","Compiler","muRascal","AST"]),RSimpleName("Message")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["lang","rascal","grammar","definition","Literals"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","grammar","definition","Names"]),RSimpleName("Grammar")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["lang","rascal","checker","TreeUtils"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["util","UUID"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","grammar","definition","Productions"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RCompoundName(["lang","rascal","types","CheckTypes"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","muRascal","AST"])>,<RCompoundName(["lang","rascal","meta","ModuleInfo"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("Node")>,<RCompoundName(["lang","rascal","checker","ListUtils"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RCompoundName(["util","Math"])>,<RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["lang","rascal","grammar","definition","Attributes"])>,<RCompoundName(["lang","rascal","grammar","definition","Attributes"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","grammar","definition","Characters"]),RSimpleName("Exception")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RSimpleName("Node")>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("Exception")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","types","AbstractName"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","ConvertType"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["lang","rascal","types","TestChecker"])>,<RSimpleName("Relation"),RSimpleName("IO")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RSimpleName("String")>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["analysis","graphs","Graph"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"])>,<RSimpleName("List"),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","CheckModule"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"]),RSimpleName("Map")>,<RCompoundName(["lang","manifest","IO"]),RSimpleName("Type")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","CheckModule"]),RCompoundName(["util","Reflective"])>,<RCompoundName(["lang","rascal","types","CheckTypes"]),RCompoundName(["lang","rascal","types","AbstractType"])>,<RCompoundName(["lang","rascal","types","ConvertType"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","TypeSignature"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"]),RSimpleName("List")>,<RSimpleName("ValueIO"),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("IO")>,<RCompoundName(["lang","rascal","grammar","definition","Symbols"]),RSimpleName("Set")>,<RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]),RSimpleName("Grammar")>,<RCompoundName(["lang","rascal","types","TestChecker"]),RCompoundName(["lang","rascal","syntax","Rascal"])>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["lang","rascal","types","TypeInstantiation"])>,<RCompoundName(["analysis","graphs","Graph"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Compile"])[@at=|std:///experiments/Compiler/Compile.rsc|(24,30,<2,7>,<2,37>)],RCompoundName(["lang","rascal","grammar","definition","Productions"])>,<RCompoundName(["lang","rascal","types","CheckerConfig"]),RSimpleName("List")>,<RCompoundName(["lang","rascal","types","AbstractName"]),RSimpleName("Origins")>,<RCompoundName(["lang","rascal","types","TypeExceptions"]),RSimpleName("Map")>,<RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]),RSimpleName("Map")>,<RCompoundName(["lang","rascal","types","AbstractType"]),RSimpleName("ParseTree")>};

public Graph[IGComponent] igComponentsINT = {
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","checker","TreeUtils"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RSimpleName("ValueIO"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["util","Math"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RSimpleName("Node"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Map"))>,
    <singleton(RSimpleName("List")), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["util","Benchmark"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("Grammar"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["util","Math"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Node"))>,
    <singleton(RSimpleName("Set")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("Message"))>,
    <singleton(RSimpleName("Node")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RSimpleName("ValueIO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["analysis","graphs","Graph"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","Util"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RSimpleName("Set"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,
    <singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("String"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RCompoundName(["util","Math"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractName"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Node"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["analysis","graphs","Graph"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,
    <singleton(RSimpleName("Set")), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","checker","TreeUtils"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RSimpleName("IO"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("ValueIO"))>,
    <singleton(RSimpleName("Grammar")), singleton(RSimpleName("Exception"))>,
    <singleton(RSimpleName("Message")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["util","UUID"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["analysis","graphs","Graph"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,
    <singleton(RCompoundName(["util","Math"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Set"))>,
    <singleton(RSimpleName("Grammar")), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["util","Maybe"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,
    <singleton(RSimpleName("IO")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("ValueIO"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"]))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractKind"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","AST"])), singleton(RSimpleName("ParseTree"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])), singleton(RSimpleName("Exception"))>,
    <singleton(RSimpleName("ParseTree")), singleton(RSimpleName("Type"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,
    <singleton(RCompoundName(["lang","rascal","checker","ListUtils"])), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","Util"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RCompoundName(["lang","manifest","IO"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","CheckModule"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","types","AbstractKind"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"]))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","manifest","IO"])), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("ValueIO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])})>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("DateTime"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractName"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RSimpleName("Relation")), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("String"))>,
    <singleton(RSimpleName("ValueIO")), singleton(RSimpleName("Type"))>,
    <singleton(RSimpleName("Origins")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RCompoundName(["analysis","graphs","Graph"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Node"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Names"]))>,
    <singleton(RSimpleName("ToString")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","AST"])), singleton(RSimpleName("Type"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["analysis","graphs","Graph"])), singleton(RSimpleName("Set"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RSimpleName("Set"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("Node"))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ListUtils"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("String"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"]))>,
    <singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RCompoundName(["util","Math"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("ToString"))>,
    <singleton(RCompoundName(["analysis","graphs","Graph"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","types","ConvertType"]))>,
    <singleton(RSimpleName("List")), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RSimpleName("ParseTree")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])), singleton(RSimpleName("Grammar"))>,
    <singleton(RSimpleName("String")), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Node"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","types","Util"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RCompoundName(["lang","rascal","types","TypeExceptions"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","manifest","IO"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("String"))>,
    <singleton(RSimpleName("ParseTree")), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","manifest","IO"])), singleton(RSimpleName("Type"))>,
    <singleton(RSimpleName("String")), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"]))>,
    <singleton(RCompoundName(["analysis","graphs","Graph"])), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("Node"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeInstantiation"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("Grammar"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractName"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["util","Benchmark"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","checker","ParserHelper"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("ListRelation"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["util","UUID"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("Set"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","checker","TreeUtils"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("IO"))>,
    <singleton(RSimpleName("String")), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ParseModule"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","TestChecker"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RSimpleName("ParseTree")), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("ValueIO"))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"]))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("String"))>,
    <singleton(RSimpleName("ValueIO")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","AST"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RSimpleName("Exception"))>,
    <singleton(RSimpleName("Grammar")), singleton(RSimpleName("IO"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","Interpreter","ParsingTools"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractName"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["lang","rascal","types","TestChecker"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","types","TypeSignature"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractKind"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","RVM","AST"])), singleton(RSimpleName("Exception"))>,
    <singleton(RSimpleName("Grammar")), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Names"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalType"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RSimpleName("Set")), singleton(RCompoundName(["util","Math"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","PeepHole"])), singleton(RCompoundName(["experiments","Compiler","RVM","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["lang","rascal","types","Util"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RSimpleName("Grammar")), singleton(RSimpleName("ParseTree"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["util","Benchmark"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Type"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Node"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("DateTime"))>,
    <singleton(RCompoundName(["lang","rascal","types","TestChecker"])), singleton(RCompoundName(["util","Math"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","checker","ListUtils"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","muRascal","AST"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["lang","rascal","types","CheckTypes"]))>,
    <singleton(RSimpleName("DateTime")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RCompoundName(["util","Maybe"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"])), singleton(RSimpleName("Set"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"]))>,
    <singleton(RSimpleName("Type")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","manifest","IO"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("Type"))>,
    <singleton(RSimpleName("ListRelation")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","Util"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("Relation"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("Map"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RCompoundName(["lang","rascal","types","CheckerConfig"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["util","Reflective"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Characters"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("IO"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckModule"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RSimpleName("Grammar"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])})>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","ToplevelType"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","ModuleInfo"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckTypes"])), singleton(RSimpleName("Relation"))>,
    <singleton(RSimpleName("Relation")), singleton(RSimpleName("Exception"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("Map"))>,
    <singleton(RSimpleName("Map")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","checker","ParserHelper"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","MuBoolExp"])), singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractType"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","meta","ModuleInfo"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["util","Reflective"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","TmpAndLabel"])), singleton(RSimpleName("Type"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeUtils"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","TypeReifier"])}), singleton(RSimpleName("ParseTree"))>,
    <singleton(RSimpleName("String")), singleton(RSimpleName("Origins"))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RSimpleName("Set"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Productions"])), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("Exception"))>,
    <singleton(RSimpleName("ListRelation")), singleton(RSimpleName("List"))>,
    <singleton(RSimpleName("Type")), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RCompoundName(["lang","rascal","types","AbstractType"]))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"]))>,
    <singleton(RCompoundName(["lang","rascal","types","AbstractKind"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <component({RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalDeclaration"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalExpression"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalPattern"]),RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalStatement"])}), singleton(RCompoundName(["lang","rascal","types","TypeExceptions"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","mu2rvm"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","grammar","definition","Symbols"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RSimpleName("DateTime"))>,
    <singleton(RSimpleName("DateTime")), singleton(RSimpleName("List"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("Type"))>,
    <singleton(RSimpleName("List")), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal2RVM","StackValidator"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Literals"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["experiments","Compiler","muRascal","AST"])), singleton(RSimpleName("ParseTree"))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalModule"])), singleton(RSimpleName("String"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeExceptions"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","ConvertType"])), singleton(RCompoundName(["lang","rascal","types","AbstractName"]))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["lang","rascal","syntax","Rascal"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","TypeSignature"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["experiments","Compiler","Compile"])), singleton(RSimpleName("Message"))>,
    <singleton(RCompoundName(["lang","rascal","grammar","definition","Attributes"])), singleton(RCompoundName(["lang","rascal","syntax","Rascal"]))>,
    <singleton(RCompoundName(["experiments","Compiler","Rascal2muRascal","RascalConstantCall"])), singleton(RSimpleName("Exception"))>,
    <singleton(RCompoundName(["lang","rascal","types","CheckerConfig"])), singleton(RCompoundName(["lang","rascal","checker","ListUtils"]))>,
    <singleton(RCompoundName(["analysis","graphs","Graph"])), singleton(RSimpleName("Exception"))>
};