Name: AdHocDataExploration

Synopsis:  Using Rascal to explore an interesting data space.

Syntax:

Types:

Function:

Details:

Description: This point of this example is to show how you can use Rascal to explore data.  
The problem we will look at come from mathematics, and has a precise analyical solution, but
let's use Rascal to explore the state space, and see how it can help us to build intuition.

As you know, Rascal supports arbitrarily large numbers cleanly and simply, unlike more traditional 
languages like C or Java.  For example, if you want to computer 1000!, then it's a simple matter of
calling fact(1000) at the command line.

Examples:

Benefits:

Pitfalls:

Questions:

       
