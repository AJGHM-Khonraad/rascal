Name: Abstract

Synopsis: Abstract patterns.

Syntax:<br>
Literal:  [Boolean], [Integer], [Real], [Number], [String], [Location], or [DateTime]<br>
Variable declaration: `$Type$ $Var$`<br>
Multi-variable: `$Var$*`<br>
Variable: `$Var$`<br>
List: `[ $Pat_1$, $Pat_2$, ..., $Pat_n$ ]`<br>
Set: `{ $Pat_1$, $Pat_2$, ..., $Pat_n$ }`<br>
Tuple: `< $Pat_1$, $Pat_2$, ..., $Pat_n$ >`<br>
Node: `$Name$ ( $Pat_1$, $Pat_2$, ..., $Pat_n$ )`<br>
Descendant: `/ $Pat$`<br>
Labelled: `$Var$ : $Pat$`<br>
TypedLabelled: `$Type$ $Var$ : $Pat$`<br>
TypeConstrained: `[$Type$] $Pat$`

Types:

Function:

Details: Literal VariableDeclaration MultiVariable Variable List Set Tuple Node Descendant Labelled TypedLabelled TypeConstrained

Description:
An abstract pattern is recursively defined and may contain the following elements:
<toc Rascal/Patterns/Abstract 1>

Examples:

Benefits:

Pitfalls:
Map patterns are not (yet?) supported.

Questions:

