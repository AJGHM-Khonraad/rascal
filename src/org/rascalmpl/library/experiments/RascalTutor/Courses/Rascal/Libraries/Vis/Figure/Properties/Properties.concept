License: Copyright (c) 2009-2011 CWI
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
* Paul Klint - Paul.Klint@cwi.nl - CWI

Name: Properties

Details:

Categories: Library

Syntax:

Types: 
* `FProperty`
* `alias FProperties = list[FProperty];`
* `alias computedInt = int();`
* `alias computedReal = real();`
* `alias computedNum = num();`
* `alias computedStr = str();`
* `alias computedColor = Color();`

Function:

Synopsis:
<listing>
data FProperty =
/* sizes */
     width(num w)                  // width of figure
   | width(computedNum cw)

   | height(num h)                 // height of figure
   | height(computedNum ch)

   | size(num s)		   // width and height (same value)
   | size(computedNum cs)
   | size(num w, num h)            // width and height (separate values)
   | size(computedNum cw, computedNum ch)

   | gap(num g)                    // same hor. and vert. gap between figures
   | gap(computedNum cg)
   | gap(num w, num h)             // different hor. and vert. gap between figures
   | gap(computedNum cw, computedNum ch)

   | hgap(num w)                   // horizontal gap between figures
   | hgap(computedNum cw)

   | vgap(num h)                   // vertical gap between figures
   | vgap(computedNum ch)

   
/* alignment */
   | anchor(num h, num v)	   // horizontal (0=left; 1=right) and
                                   // vertical anchor (0=top,1=bottom)
   | anchor(computedNum h, computedNum v)

   | hanchor(num h)   
   | hanchor(computedNum ch)
             
   | vanchor(num v)
   | vanchor(computedNum cv)
   
/* line and border properties */
   | lineWidth(num w)	           // line width
   | lineWidth(computedNum cw)

   | lineColor(Color c)	           // line color
   | lineColor(computedColor cc)
   | lineColor(str cname)          // named line color
   
   | fillColor(Color c)	           // fill color of shapes and text
   | fillColor(computedColor cc)
   | fillColor(str cname)          // named fill color
   
/* wedge properties */
   | fromAngle(num a)
   | fromAngle(computedNum ca)

   | toAngle(num a)
   | toAngle(computedNum ca)

   | innerRadius(num r)
   | innerRadius(computedNum cr)

/* shape properties */
   | shapeConnected()              // shapes consist of connected points
   | shapeClosed()    		   // closed shapes
   | shapeCurved()                 // use curves instead of straight lines
   
/* font and text properties */
   | font(str fname)               // named font
   | font(computedStr cfname)

   | fontSize(int s)               // font size
   | fontSize(computedInt cs)

   | fontColor(Color c)            // font color
   | fontColor(computedColor cc)
   | fontColor(str cname)

   | textAngle(num a)              // text rotation
   | textAngle(computedNum ca)
   
/* interaction properties */  
   | mouseOver(Figure fig)         // add figure when mouse is over current figure
   | onClick(void() handler)       // callback to handle mouse clicks
   | doi(int d)                    // limit degree-of-interest to nesting level d
   | doi(computedInt cd)
   
/* other properties */
   | id(str name)                  // name of figure (used in edges and various layouts)
   | id(computedStr cname)

   | hint(str name)               // hint for layout strategy: now only for graphs
   | hint(computedStr name)
   ;
</listing>

Description: An `FProperty` describes a property of a figure. Figures may be nested and a given property
value applies to all nested figures until it is overruled by a new declaration in a nested figure for the same property.

All figures may have an (optional) list of properties which is represented by the type `FProperties`.

Observe that most properties have two variants:

* A version with an argument of type `int`, `real`, `num`, `str` or `Color`. The values of these arguments are computed when the property is constructed, i.e., when the Figure is constructed.
* A version with _computed_ argument like `computeInt`, `computeReal`, `computeNum`, `computeStr` or `computeColor`. These are functions that
  return a value. These functions are called during the _rendering_ of the figure to which this property is attached. In this way, properties
  can be changed.

Examples:
See the more detailed description of each property for examples. Just a few examples to show you the spirit:
* `width(10)` sets the width property to the value 10.
* `width(int(){return 10;})` sets the width property to the result of executing the argument function `int(){return 10;}` which is, indeed, not a big deal. This usage becomes more interesting when the argument function returns different values for each call.

Benefits:
* Values of properties are defined by an _inheritance-like_ approach: values can be nested and more nested declarations overrule more global ones. This has as advantage that default values can be set at the top level of a figure.

Pitfalls:
* A figure may inherit an undesired value for a property; the solution is to redeclare that property locally with the desired value.

Questions:

