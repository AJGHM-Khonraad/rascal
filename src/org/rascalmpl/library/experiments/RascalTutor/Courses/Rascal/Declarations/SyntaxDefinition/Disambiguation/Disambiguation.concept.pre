concept("Disambiguation",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/SyntaxDefinition/Disambiguation/Disambiguation.concept|,[],["Symbols","Priority","Associativity","FollowAndPreceedeRestrictions","Reserve"],{},{"Actions","SyntaxDefinitions","Reserve","Visit","Associativity","Disambiguation","SyntaxDefinition","Preceed","Priority","ParseTrees","Follow"}," Disambiguation is the definition of filters on the parse trees that \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\>s define. There are several ways of defining \<a href=\"/show?concept=Disambiguation\"\>Disambiguation\</a\> in Rascal.\n","","","",{}," There are generally three ways of removing ambiguity from parse forests that are produced by parsers generated from \<a href=\"/show?concept=SyntaxDefinitions\"\>SyntaxDefinitions\</a\>.\n \<br/\>\n\<br/\>\n\n The first way is to add disambiguation declarations to the \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\>. You can choose from:\n \<ul\>\<li\> \<a href=\"/show?concept=Priority\"\>Priority\</a\> declarations, which can be used to define the relative priority in expression languages\</li\>\n\<li\> \<a href=\"/show?concept=Associativity\"\>Associativity\</a\> declarations, which can be used to define relative associativity between operators of expression languages\</li\>\n\<li\> \<a href=\"/show?concept=Follow\"\>Follow\</a\> declarations, which can be used to implement longest match using lookahead\</li\>\n\<li\> \<a href=\"/show?concept=Preceed\"\>Preceed\</a\> declarations, which can be used to implement first match using look behind\</li\>\n\<li\> \<a href=\"/show?concept=Reserve\"\>Reserve\</a\> declarations, which allow you to finite sets of strings from a \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\> to implement keyword reservation\<br/\>\n\<br/\>\n The second way is to add \<a href=\"/show?concept=Actions\"\>Actions\</a\> that will be triggered just after parsing and allow you to trim a parse forest using any information necessary.\n\<br/\>\n\<br/\>\n The third way is use the \<a href=\"/show?concept=Visit\"\>Visit\</a\> statement on a parse tree and implement your own filter post-parsing time, or any other kind of program that processes \<a href=\"/show?concept=ParseTrees\"\>ParseTrees\</a\>.\n\</li\>\n\</ul\>","","","",[])