Name: Subscription

Details:

Categories: Language

Syntax: 

# `$Exp_0$ [ $Exp_1$, $Exp_2$, ... $Exp_n$]`

# `$Exp_0$ [ $Exp_1$]`

Types:
===Form 1.===
| `$Exp_0$`                         | `$Exp_1$` | `$Exp_2$` | ... | `$Exp_0$ [ $Exp_1$, $Exp_2$, ... ]` |
|:----------------------------------|:----------|:----------------------|
| `rel[$T_1$, $T_2$, ... $T_m$]`    | `int`     |  `int`    | ... | `rel[$T_n$, $T_n+1$, ... $T_m$]` |

===Form 2.===
| `$Exp_0$`                         | `$Exp_1$`     | `$Exp_0$ [ $Exp_1$ ]`            |
|:----------------------------------|:--------------|:---------------------------------|
| `rel[$T_1$, $T_2$, ... $T_m$]`    | `set[$T_1$]`  | `rel[$T_2$, $T_2$, ... $T_m$]`   |


Function:

Synopsis:

Description: Relation resulting from subscription of a relation $Exp_0$.


===Form 1.===
Subscription with the index values of $Exp_1$, $Exp_2$, .... 
The result is a relation with all tuples that have these index values as first elements 
with the index values removed from the tuple. 
If the resulting tuple has only a single element, a set is returned instead of a relation. 
A wildcard `_` as index value matches all possible values at that index position.


===Form 2.===
Subscription with a set of the index values of $Exp_1$.
The result is a relation with all tuples that have these index values as first element
with the index values removed from the tuple. 

Examples:

<screen>
R = {<1,10>, <2,20>, <1,11>, <3,30>, <2,21>};
R[1];
R[{1}];
R[{1, 2}];

RR = {<1,10,100>,<1,11,101>,<2,20,200>,<2,22,202>,
              <3,30,300>};
RR[1];
RR[1,_];
</screen>

Benefits:

Pittfalls:

Questions:



