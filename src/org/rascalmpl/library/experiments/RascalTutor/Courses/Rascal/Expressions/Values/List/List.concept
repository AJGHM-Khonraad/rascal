Name: List

Synopsis: List values.

Syntax:
`[ $Exp_1$, $Exp_2$, ... ]`

Library functions: `import List`;

Types:
|  `$Exp_1$` |  `$Exp_2$` |  ...  |  `[ $Exp_1$, $Exp_2$, ... ]`   |
|:-----------|:-----------|:------|:-------------------------------|
| `$T_1$`    | `$T_2$`    |  ...  |  `set[lub($T_1$, $T_2$, ... )]` |

Function:

Details:

Description:
A list is an ordered sequence of values and has the following properties:
* All elements have the same static type.
* The order of the elements matters.
* A list may contain an element more than once.


The type of a list has the form `list[$T$]`,
where `$T$` is an arbitrary type.

When variables of type list occur inside a list, their elements are automatically _spliced_ into the surrounding set. This can be prevented by surrounding them with extra `[` and `]` brackets. Note that this approach is atypical: in Rascal splicing is implicit while in other languages it has to be indicated explicitly by the programmer.

The following functions and operators on lists are provided:

<toc Rascal/Expressions/Values/List 1>

Examples:
<screen>
[1, 2, 3];
[<1,10>, <2,20>, <3,30>];
[1, "b", 3];
[<"a",10>, <"b",20>, <"c",30>];
[["a", "b"], ["c", "d", "e"]];
</screen>
List splicing works as follows:
<screen>
L = [1, 2, 3];
[10, L, 20];
[10, [L], 20];
</screen>

Benefits:

Pitfalls:

Questions:

QChoice: The type of a list is determined by:
g: The least upperbound of the type of all elements.
g: The types of all the elements in the list.
b: The type of the element that was first added to the list.
b: The average of the type of the elements with the smallest and the largests type.
b: The least upperbound of the type of two arbitrary elements.
b: The type of two arbitrary elements.

QValue:
desc: Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical 
and can be read
from left to right and from right to left.
list:
import List;
public bool isPalindrome(list[str] words){
  return words == <?>;
}
test: isPalindrome(["a", "b", "b", "a"]) == true;
