concept("treemap",|std:///experiments/RascalTutor/Courses/Rascal/Libraries/Vis/Figure/Figures/treemap/treemap.concept|,[],[],{"Library"},{"doi","hgap","tree","Properties/size","id","height","gap","width","vgap"},"","",""," \<code\>Figure treemap(FProperties, Figures nodes, list[Edge] edges, FProperty props...)\</code\>\n",{}," Takes a list of nodes and a list of edges and draws a treemap, see \<a href=\"http://en.wikipedia.org/wiki/Treemapping\"\>TreeMapping\</a\>.\n The nodes can be arbitrary figures that should have a name (using the \<a href=\"/show?concept=id\"\>id\</a\> property).\n Unlike \<a href=\"/show?concept=tree\"\>tree\</a\>, the figure of each node is ignored and only its \<b\>dimensions\</b\> (= surface) are used.\n The edges determine connections between named nodes. \n \<br/\>\n\<br/\>\n\n The following constraints apply:\n \<ul\>\<li\> All nodes should have an id property with a unique value.\</li\>\n\<li\> All edges should refer to ids that are defined by the nodes.\</li\>\n\<li\> The nodes and edges should form a tree, i.e., a single rooted, acyclic graph.\</li\>\n\</ul\> The following properties are relevant for treemap:\n \<ul\>\<li\> \<a href=\"/show?concept=width\"\>width\</a\>, \<a href=\"/show?concept=height\"\>height\</a\>, \<a href=\"/show?concept=Properties/size\"\>Properties/size\</a\> of nodes.\</li\>\n\<li\> \<a href=\"/show?concept=gap\"\>gap\</a\>, \<a href=\"/show?concept=hgap\"\>hgap\</a\>, \<a href=\"/show?concept=vgap\"\>vgap\</a\> to determine the distance between the elements in the treemap.\</li\>\n\<li\> \<a href=\"/show?concept=doi\"\>doi\</a\> (degree-of-interest) determines the maximal nesting level that is displayed. Default: 3.\</li\>\n\</ul\>"," \<pre class=\"listing\"\>nodes = [\n  box(id(\"A\"), size(30), fillColor(\"green\")),\n  box(id(\"B\"), size(30), fillColor(\"red\")),\n  box(id(\"C\"), size(30), fillColor(\"blue\")),\n  box(id(\"D\"), size(30), fillColor(\"purple\")),\n  box(id(\"E\"), size(30), fillColor(\"lightblue\")),\n  box(id(\"F\"), size(30), fillColor(\"orange\")),\n  box(id(\"G\"), size(30), fillColor(\"brown\")),\n  box(id(\"H\"), size(30), fillColor(\"black\")),\n  box(id(\"I\"), size(30), fillColor(\"grey\")),\n  box(id(\"J\"), size(30), fillColor(\"white\"))\n];\nedges = [ \n  edge(\"A\", \"B\"),  edge(\"B\", \"C\"),  edge(\"B\", \"D\"),\n  edge(\"A\", \"E\"),  edge(\"A\", \"H\"),  edge(\"E\", \"F\"),\n  edge(\"E\", \"G\"),  edge(\"E\", \"I\"),  edge(\"E\", \"J\")\n];\t\t\nrender(treemap(nodes, edges, gap(8), top(), fillColor(\"Black\")));    \n\</pre\> \<img  title=\"treemap 1\" alt=\"treemap 1\" src=\"Courses/Rascal/Libraries/Vis/Figure/Figures/treemap/tm1.png\"\>\n","","",[])