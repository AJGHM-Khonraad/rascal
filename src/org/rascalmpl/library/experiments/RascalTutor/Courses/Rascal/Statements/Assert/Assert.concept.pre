concept("Assert",|std:///experiments/RascalTutor/Courses/Rascal/Statements/Assert/Assert.concept|,[],[],{"Language"},{},""," \<ol\>\n  \<li\> \<code\>\n    assert \<i\>Exp\</i\>\<sub\>1\</sub\>\n  \</code\>\</li\>\n  \<li\> \<code\>\n    assert \<i\>Exp\</i\>\<sub\>1\</sub\> : \<i\>Exp\</i\>\<sub\>2\</sub\>\n  \</code\>\</li\>\n  \n\</ol\>"," \<table\>\n  \<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>1\</sub\>\n  \</code\> \</th\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>2\</sub\>\n  \</code\> \</th\>\</tr\>\<tr\>\<td align=\"left\"\>\n     \<code\>\n      bool\n    \</code\>    \n  \</td\>\<td align=\"left\"\>\n     \<code\>\n      str\n    \</code\>     \n  \</td\>\</tr\>\n\</table\>","",{":","bool","assert","str"}," An assert statement may occur everywhere where a declaration is allowed. It has two forms:\n \<br/\>\n\<br/\>\n\n An assert statement consists of a Boolean expression \<code\>\n  \<i\>Exp\</i\>\<sub\>1\</sub\>\n\</code\> and an optional string expression \<code\>\n  \<i\>Exp\</i\>\<sub\>2\</sub\>\n\</code\>\n that serves as a identifying message for this assertion. \n \<br/\>\n\<br/\>\n\n When \<code\>\n  \<i\>Exp\</i\>\<sub\>1\</sub\>\n\</code\> evaluates to \<code\>\n  false\n\</code\>, an \<code\>\n  AssertionFailed\n\</code\> exception is thrown.\n"," \<pre class=\"screen\"\>\<b\>rascal\>\</b\>assert 1==2 : &quot;is never true&quot;;\nUncaught Rascal Exception: prompt:///:1,14: AssertionFailed(&quot;is never true&quot;)\n    somewhere in: $shell$\n\<b\>rascal\>\</b\>int div(int x, int y) {\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  assert y != 0 : &quot;y must be non-zero&quot;;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  return x / y;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;}\nint (int, int): int div(int, int);\n\<b\>rascal\>\</b\>div(4,0);\nUncaught Rascal Exception: prompt:///:2,18: AssertionFailed(&quot;y must be non-zero&quot;&raquo;\n)\n    somewhere in: div\n    somewhere in: $shell$\n\</pre\>","","",[])