concept("Import",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/Import/Import.concept|,[],[],{"Language"},{},""," \<code\>\n  import \<i\>QualifiedName\</i\>;\n\</code\>\n","","",{";","import"}," An import has as effect that all public entities declared in module \<code\>\n  \<i\>QualifiedName\</i\>\n\</code\> are made available to the importing module. Circular imports are allowed. Two kinds of imported modules are supported:\n  \<ul\>\n  \<li\> Another Rascal module.\</li\>\n  \<li\> An SDF module that defines the syntax of some language, say \<code\>\n    \<i\>L\</i\>\n  \</code\>.\</li\>\n  \n\</ul\> In the former case, all publicly visible entities in the imported module become available in the importing module. In the latter case, all non-terminals (symbols in SDF parlance) that are declared in \<code\>\n  \<i\>L\</i\>\n\</code\> become available as types in the importing module. In addition, concrete syntax patterns and parse functions can be used for any non-terminal that is defined in \<code\>\n  \<i\>L\</i\>\n\</code\>.\n \<br/\>\n\<br/\>\n\n Import is \<i\>non-transitive\</i\>, i.e., the visible entities from an imported module are not re-exported by the importing module.\n","","","",[])