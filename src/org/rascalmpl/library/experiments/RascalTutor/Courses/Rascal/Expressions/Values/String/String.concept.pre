concept("String",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Values/String/String.concept|,[],{"Language"},{},"\<ul\>\n\<li\> Syntax: \<warning\>explain string syntax\</warning\>\</li\>\n\<li\> Type: \<code\>str\</code\>\</li\>\n\n\</ul\>\n",{"str"},"The string values are represented by the type \<code\>str\</code\> and consist of character \nsequences surrounded by double quotes. e.g., \<code\>\"a\"\</code\> or \<code\>\"a\\nlong\\nstring\"\</code\>.\n\nString literals support so-called \<i\>string interpolation\</i\>: \ninside string constants text between angle brackets (\<code\>&lt;\</code\> and \<code\>\>\</code\>) is first executed and then replaced by\n its string value.\nVarious statements (if, for, while, do) also return a value and can be used in this way.\nIn the interpolation variant of these statements the block or blocks that are part of the statement become arbitrary text \n(that may itself contain interpolations). \n\<br/\>\n\<br/\>\nTheir forms are:\n\n\<ul\>\n\<li\> \<code\>&lt;if(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;if(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;} else {\>  ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;for(\<i\>Exp\</i\>){\>... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;while(\<i\>Exp\</i\>){\> ... \<i\>Text\</i\> ... &lt;}\>\</code\>\</li\>\n\<li\> \<code\>&lt;do {\>... \<i\>Text\</i\> ... &lt;} while (\<i\>Exp\</i\>)\>\</code\>\</li\>\n\n\</ul\>\nHere \<code\>\<i\>Text\</i\>\</code\> is arbitrary text that may itself contain again contain interpolations.\n","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>N = 13;\nint: 13\n\<b\>rascal\>\</b\>&quot;The value of N is &lt;N&gt;&quot;;\nstr: \"The value of N is 13\"\n\<b\>rascal\>\</b\>&quot;The value of N*N is &lt;N*N&gt;&quot;;\nstr: \"The value of N*N is 169\"\n\<b\>rascal\>\</b\>&quot;The value is &lt;(N &lt; 10) ? 10 : N*N&gt;&quot;;\nstr: \"The value is 169\"\n\</pre\>\nAs you can see the string value of variables and expressions is interpolated in the result as expected. \n\<br\>\nSome examples of more advances string interpolation \n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>&quot;N is &lt;if(N &lt; 10){&gt; small &lt;} else {&gt; large &lt;}&gt;&quot;;\nstr: \"N is  large \"\n\<b\>rascal\>\</b\>&quot;N is &lt;if(N &lt; 10){&gt; small &lt;} else {&gt; large (&lt;N&gt;)&lt;}&&raquo;\ngt;&quot;;\nstr: \"N is  large (13)\"\n\<b\>rascal\>\</b\>&quot;before &lt;for(x&lt;-[1..5]){&gt;a &lt;x&gt; b &lt;}&gt;after&quot;;\nstr: \"before a 1 b a 2 b a 3 b a 4 b a 5 b after\"\n\</pre\>","String interpolation enables very flexible template-based text generation as used in generators for\nsource code, markup and the like.\n","\n",[])