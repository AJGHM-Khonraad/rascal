concept("Call",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Call/Call.concept|,[],[],{"Language"},{"Constructor","Function"},"","\<code\>\<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>EXp\</i\>\<sub\>2\</sub\>, ... )\</code\>\n","\<table\>\<tr\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\>  \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> \</th\>\<th align=\"left\"\> ... \</th\>\<th align=\"left\"\> \<code\>\<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>EXp\</i\>\<sub\>2\</sub\>, ... )\</code\> \</th\>\</tr\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<td\> \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\>    \</td\>\<td\> \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\>   \</td\>\<td\> ... \</td\>\<td\> Determined by \<code\>\<i\>Name\</i\>\</code\>, \<code\>\<i\>T\</i\>\<sub\>i\</sub\>\</code\> and function declarations \</td\>\</tr\>\</table\>","",{",",")","("},"First, the actual parameter expressions \<code\>\<i\>Exp\</i\>\<sub\>i\</sub\>\</code\> are evaluated resulting in values \<code\>\<i\>V\</i\>\<sub\>i\</sub\>\</code\>.\nBased on \<code\>\<i\>Name\</i\>\</code\> and the argument types \<code\>\<i\>T\</i\>\<sub\>i\</sub\>\</code\>, the identity of the function to be called is determined.\n\nThe values \<code\>\<i\>V\</i\>\<sub\>i\</sub\>\</code\> are bound to the formal parameter names of the \ndeclared functions and the function body is executed.\nThe value returned by the function is used as value of the function call.\n\<br/\>\n\<br/\>\nA \<i\>constructor call\</i\> has identical syntax to that of a function call, see \<a href=\"/show?concept=Constructor\"\>Constructor\</a\>,\n\nSee \<a href=\"/show?concept=Function\"\>Function\</a\> for more details about function declarations.\n","\<pre class=\"screen\"\>\</pre\>\n First declare a function \<code\>square\</code\> with argument \<code\>\<i\>n\</i\>\</code\> that returns \<code\>\<i\>n\</i\>\<sup\>2\</sup\>\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>int square(int n) { return n * n; }\nint (int): int square(int);\n\</pre\>\n Next call \<code\>square\</code\>. This results in the following steps:\n\<ol\>\n\<li\> Based on the name \<code\>square\</code\> and the int argument 12 we identify the function to be called   (= the function square we just defined).\</li\>\n\<li\> Compute the value of the actual parameter (= 12).\</li\>\n\<li\> Bind the formal parameter \<code\>n\</code\> to the actual value 12.\</li\>\n\<li\> Execute the body of \<code\>square\</code\>.\</li\>\n\<li\> The return value of square is the vale of the call:\</li\>\n\n\</ol\>\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>square(12);\nint: 144\n\</pre\>","","",[])