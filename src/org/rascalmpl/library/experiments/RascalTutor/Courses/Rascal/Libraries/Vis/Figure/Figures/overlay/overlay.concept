Name: overlay

Details:

Categories: Library

Syntax:

Types:

Function:
`Figure overlay(Figures figs, FProperty props...)`

Synopsis:

Description:
Composition of a list of figures by overlaying them on top of each other.
Figure are aligned according to their own anchor point.
Alignment gives detailed control over the position of figures in an overlay.
This can be used to create arbitrary shapes. These shapes can be further controlled
by 
* connecting the figures in the overlay, see [shapeConnected].
* make a smooth connection between figures in the overlay, see [shapeCurved].
* connecting the first and the last figure in the shape, see [shapeClosed].
* using [fillColor] to define the area color of the closed shape.

Examples:
<figure o1.png>
b1 = box(size(80,50), fillColor("Red"));
b2 = box(size(50,30), fillColor("Blue"));
b3 = box(size(20,50), fillColor("Yellow"));
render(overlay([b1, b2, b3], std(resizable(false))));
</figure>
gives: ![o1](o1.png)

<figure o2.png>
b1 = box(size(80,50), fillColor("Red"));
b2 = box(size(50,30), fillColor("Blue"), top(), right());
b3 = box(size(20,50), fillColor("Yellow"));
render(overlay([b1, b2, b3], std(resizable(false))));
</figure>
gives: ![o2](o2.png)

<figure o3.png>
b1 = box(size(80,50), fillColor("Red"));
b2 = box(size(50,30), fillColor("Blue"), bottom(), left());
b3 = box(size(20,50), fillColor("Yellow"));
render(overlay([b1, b2, b3], std(resizable(false))));
</figure>
gives: ![o3](o3.png)

<figure o4.png>
b1 = box(size(80,50), fillColor("Red"));
b2 = box(size(50,30), fillColor("Blue"),  bottom(), left());
b3 = box(size(20,50), fillColor("Yellow"), right());
render(overlay([b1, b2, b3], std(resizable(false))));
</figure>
gives: ![o4](o4.png)

Alignment gives detailed control over the position of figures in an overlay. 

<figure o5.png>
Figure point(num x, num y){ return ellipse(shrink(0.05),fillColor("red"),align(x,y));}
coords = [<0.0,0.0>,<0.5,0.5>,<0.8,0.5>,<1.0,0.0>];
ovl = overlay([point(x,y) | <x,y> <- coords], size(200));
render(ovl);
</figure>
gives: 

![o5](o5.png)

The overlayed figures can be connected by using [shapeConnected]:

<figure o6.png>
Figure point(num x, num y){ return ellipse(shrink(0.05),fillColor("red"),align(x,y));}
list[tuple[num,num]] coords = [<0.0,0.0>,<0.5,0.5>,<0.8,0.5>,<1.0,0.0>];
ovl = overlay([point(x,y) | <x,y> <- coords], size(200), 
                                              shapeConnected(true));
render(ovl);
</figure>
gives: 

![o6](o6.png)

The next enhancement is to close the begin and end points of the shape, using [shapeClosed]:
<figure o7.png>
Figure point(num x, num y){ return ellipse(shrink(0.05),fillColor("red"),align(x,y));}
coords = [<0.0,0.0>,<0.5,0.5>,<0.8,0.5>,<1.0,0.0>];
ovl = overlay([point(x,y) | <x,y> <- coords], size(200), 
                                              shapeConnected(true),
                                              shapeClosed(true));
render(ovl);
</figure>
gives: 

![o7](o7.png)

Another enhancement is to use curves to connect the figures in the shape, using [shapeCurved]:
<figure o8.png>
Figure point(num x, num y){ return ellipse(shrink(0.05),fillColor("red"),align(x,y));}
coords = [<0.0,0.0>,<0.5,0.5>,<0.8,0.5>,<1.0,0.0>];
ovl= overlay([point(x,y) | <x,y> <- coords], size(200), 
                                             shapeConnected(true),
                                             shapeClosed(true),
                                             shapeCurved(true));
render(ovl);
</figure>
gives: 

![o8](o8.png)

A final enhancement is to set the fill color of the closed shape:
<figure o9.png>
Figure point(num x, num y){ return ellipse(shrink(0.05),fillColor("red"),align(x,y));}
coords = [<0.0,0.0>,<0.5,0.5>,<0.8,0.5>,<1.0,0.0>];
ovl = overlay([point(x,y) | <x,y> <- coords], size(200), 
                                              shapeConnected(true),
                                              shapeClosed(true),
                                              shapeCurved(true),
                                              fillColor("yellow"));
render(ovl);
</figure>
gives: 

![o9](o9.png)







Benefits:

Pitfalls:

Questions:

