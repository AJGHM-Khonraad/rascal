concept("Assignment",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Statements/Assignment/Assignment.concept|,[],[],{"Language"},{"Annotation"},"","\<code\>\<i\>Assignable\</i\> \<i\>AssignmentOp\</i\> \<i\>Exp\</i\>\</code\>\n\<br/\>\n\<br/\>\nwhere \<code\>\<i\>AssignmentOp\</i\>\</code\> may be one of \<code\>=\</code\>, \<code\>+=\</code\>, \<code\>-=\</code\>, \<code\>*=\</code\>, \<code\>/=\</code\>, or \<code\>?=\</code\>.\n\<br/\>\n\<br/\>\nAn \<code\>\<i\>Assignable\</i\>\</code\> is one of the following:\n\<ol\>\n\<li\>  \<code\>\<i\>Var\</i\>\</code\>\</li\>\n\<li\>  \<code\>\<i\>Assignable\</i\> [ \<i\>Exp\</i\> ]\</code\>\</li\>\n\<li\> \<code\>\<i\>Assignable\</i\> . \<i\>Name\</i\>\</code\> \</li\>\n\<li\> \<code\>&lt; \<i\>Assignable\</i\>\<sub\>1\</sub\>, \<i\>Assignable\</i\>\<sub\>2\</sub\>, ..., \<i\>Assignable\</i\>\<sub\>n\</sub\> \>\</code\>\</li\>\n\<li\> \<code\>\<i\>Assignable\</i\> ? \<i\>Exp\</i\>\</code\> \</li\>\n\<li\> \<code\>\<i\>Assignable\</i\> @ \<i\>Name\</i\>\</code\>\</li\>\n\<li\> \<code\>\<i\>Name\</i\> ( \<i\>Assignable\</i\>\<sub\>1\</sub\>, \<i\>Assignable\</i\>\<sub\>2\</sub\>, ... )\</code\>\</li\>\n\n\</ol\>\n","","",{"?","\>","?=","]","=","\<","[","*=","+=","-=",".","/=",",",")","(","@"},"The purpose of an assignment is to assign a new value to a simple variable or to an element of a more complex data structure. \n\nThe standard assignment operator is \<code\>=\</code\>. \nThe other assignment operators can be expressed as abbreviations for the standard assignment operator.\n\n\<table\>\<tr\>\<th align=\"left\"\> Assignment Operator     \</th\>\<th align=\"left\"\> Equivalent to                          \</th\>\</tr\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> += \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> + \<i\>Exp\</i\>\</code\> \</td\>\</tr\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> -= \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> - \<i\>Exp\</i\>\</code\>  \</td\>\</tr\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> *= \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> * \<i\>Exp\</i\>\</code\>  \</td\>\</tr\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> /= \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> / \<i\>Exp\</i\>\</code\>  \</td\>\</tr\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> &amp;= \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> &amp; \<i\>Exp\</i\>\</code\>  \</td\>\</tr\>\<tr\>\<td\> \<code\>\<i\>Assignable\</i\> ?= \<i\>Exp\</i\>\</code\> \</td\>\<td\> \<code\>\<i\>Assignable\</i\> = \<i\>Assignable\</i\> ? \<i\>Exp\</i\>\</code\>  \</td\>\</tr\>\</table\>\nAn assignable is either a single variable, (the base variable), optionally followed by subscriptions or field selections.\nThe assignment statement always results in assigning a completely new value to the base variable. \nWe distinguish the following forms of assignment:\n\n\<ol\>\n\<li\> \<b\>Variable assignable\</b\> \<code\>\<i\>Var\</i\> = \<i\>Exp\</i\>\</code\>:   The expression \<code\>\<i\>Exp\</i\>\</code\> is evaluated and its value is assigned to the base variable \<code\>\<i\>Var\</i\>\</code\>.\</li\>\n\<li\> \<b\>Subscription assignable\</b\> \<code\>\<i\>Assignable\</i\> [ \<i\>Exp\</i\>\<sub\>1\</sub\>] = \<i\>Exp\</i\>\<sub\>2\</sub\>\</code\>:    First the value \<code\>\<i\>V\</i\>\</code\> of \<code\>\<i\>Assignable\</i\>\</code\> is determined. Next the value of \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> is used as index in \<code\>\<i\>V\</i\>\</code\> and    the value of \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> replaces the original value at that index position.    The result is a new value \<code\>\<i\>V\</i\>\</code\>\'\\ that is assigned to the \<code\>\<i\>Assignable\</i\>\</code\>.\</li\>\n\<li\> \<b\>Field assignable\</b\> \<code\>\<i\>Assignable\</i\> . \<i\>Name\</i\> = \<i\>Exp\</i\>\</code\>:   The value \<code\>V\</code\> of \<code\>\<i\>Assignable\</i\>\</code\> is determined and should be of a type that has a field \<code\>\<i\>Name\</i\>\</code\>.   The value of that field is replaced in \<code\>\<i\>V\</i\>\</code\> by the value of \<code\>\<i\>Exp\</i\>\</code\> resulting in a new value \<code\>\<i\>V\</i\>\</code\>\'\\ that is assigned to \<code\>\<i\>Assignable\</i\>\</code\>.\</li\>\n\<li\> \<b\>Multiple assignable\</b\> \<code\>&lt; \<i\>Assignable\</i\>\<sub\>1\</sub\>, \<i\>Assignable\</i\>\<sub\>2\</sub\>, ..., \<i\>Assignable\</i\>\<sub\>n\</sub\> \> = \<i\>Exp\</i\>\</code\>:   First the value \<code\>\<i\>Exp\</i\>\</code\> is determined and should be a tuple of the form \<code\>&lt;\<i\>V\</i\>\<sub\>1\</sub\>, \<i\>V\</i\>\<sub\>2\</sub\>, ..., \<i\>V\</i\>\<sub\>n\</sub\>\>\</code\>.   Next the assignments \<code\>\<i\>Assignable\</i\>\<sub\>i\</sub\> = \<i\>V\</i\>\<sub\>i\</sub\>\</code\> are performed for 1 &lt;= i &lt;= n.\</li\>\n\<li\> \<b\>IsDefined Assignable\</b\> \<code\>\<i\>Assignable\</i\> ? \<i\>Exp\</i\>\<sub\>1\</sub\> = \<i\>Exp\</i\>\<sub\>2\</sub\>\</code\>:   First the value of \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> is determined and if that is defined it is assigned to \<code\>\<i\>Assignable\</i\>\</code\>.    Otherwise, the value of \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> is assigned to \<code\>\<i\>Assignable\</i\>\</code\>.\</li\>\n\<li\> \<b\>Annotation assignable\</b\> \<code\>\<i\>Assignable\</i\> @ \<i\>Name\</i\> = \<i\>Exp\</i\>\</code\>:   The value \<code\>\<i\>V\</i\>\</code\> of \<code\>\<i\>Assignable\</i\>\</code\> is determined and should be of a type that has an annotation \<code\>\<i\>Name\</i\>\</code\>.   The value of that annotation is replaced in \<code\>\<i\>V\</i\>\</code\> by the value of \<code\>\<i\>Exp\</i\>\</code\> resulting in a new value \<code\>\<i\>V\</i\>\</code\>\'\\ that is assigned to \<code\>\<i\>Assignable\</i\>\</code\>.   See \<a href=\"/show?concept=Annotation\"\>Annotation\</a\>.\</li\>\n\<li\> \<b\>Constructor assignable\</b\> \<code\>\<i\>Name\</i\> ( \<i\>Assignable\</i\>\<sub\>1\</sub\>, \<i\>Assignable\</i\>\<sub\>2\</sub\>, ..., \<i\>Assignable\</i\>\<sub\>n\</sub\>) = \<i\>Exp\</i\>\</code\>:   First the value \<code\>\<i\>Exp\</i\>\</code\> is determined and should be a data value of the form \<code\>\<i\>Name\</i\>(\<i\>V\</i\>\<sub\>1\</sub\>, \<i\>V\</i\>\<sub\>2\</sub\>, ..., \<i\>V\</i\>\<sub\>n\</sub\>).    Next the assignments \</code\>\<code\>\<i\>Assignable\</i\>\<sub\>i\</sub\>\</code\> = \<code\>\<i\>V\</i\>\<sub\>i\</sub\>\</code\>` are performed for 1 &lt;= i &lt;= n.\</li\>\n\n\</ol\>\n","\<pre class=\"screen\"\>\</pre\>\n 1. Variable assignable:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>N = 3;\nint: 3\n\<b\>rascal\>\</b\>N;\nint: 3\n\</pre\>\n 2. Subscription assignable with a list:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>L = [10,20,30];\nlist[int]: [10,20,30]\n\<b\>rascal\>\</b\>P = L;\nlist[int]: [10,20,30]\n\<b\>rascal\>\</b\>L[1] = 200;\nlist[int]: [10,200,30]\n\</pre\>\nObserve that \<code\>P\</code\> is unchanged:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>P;\nlist[int]: [10,20,30]\n\</pre\>\n  2. Subscription assignable with a map:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>M = (&quot;abc&quot;: 1, &quot;def&quot; : 2);\nmap[str, int]: (\"def\":2,\"abc\":1)\n\<b\>rascal\>\</b\>M[&quot;def&quot;] = 3;\nmap[str, int]: (\"def\":3,\"abc\":1)\n\</pre\>\n 2. Subscription assignable to a tuple:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>T = &lt;1, &quot;abc&quot;, true&gt;;\ntuple[int,str,bool]: \<1,\"abc\",true\>\n\<b\>rascal\>\</b\>T[1] = &quot;def&quot;;\ntuple[int,str,bool]: \<1,\"def\",true\>\n\</pre\>\n 3. Field assignable:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>data FREQ = wf(str word, int freq);\nok\n\<b\>rascal\>\</b\>W = wf(&quot;rascal&quot;, 1000);\nFREQ: wf(\"rascal\",1000)\n\<b\>rascal\>\</b\>W.freq = 100000;\nFREQ: wf(\"rascal\",100000)\n\</pre\>\n 4. Multiple assignable:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>&lt;A, B, C&gt; = &lt;&quot;abc&quot;, 2.5, [1,2,3]&gt;;\ntuple[str,real,list[int]]: \<\"abc\",2.5,[1,2,3]\>\n\<b\>rascal\>\</b\>A;\nstr: \"abc\"\n\<b\>rascal\>\</b\>B;\nreal: 2.5\n\<b\>rascal\>\</b\>C;\nlist[int]: [1,2,3]\n\</pre\>\n 5. isDefined assignable (recall that earlier we assigned a table value to \<code\>\<i\>M\</i\>\</code\>):\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>M[&quot;x&quot;] ? 1 += 5;\nmap[str, int]: (\"x\":6,\"def\":3,\"abc\":1)\n\</pre\>\n 6. Annotation assignable:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>anno str FREQ@color;\nok\n\<b\>rascal\>\</b\>W @ color = &quot;red&quot;;\nFREQ: wf(\"rascal\",100000)[@color=\"red\"]\n\<b\>rascal\>\</b\>\ncancelled\n\</pre\>\n 7. Constructor assignable:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>wf(S, I) = W;\nFREQ: wf(\"rascal\",100000)\n\<b\>rascal\>\</b\>S;\nstr: \"rascal\"\n\<b\>rascal\>\</b\>I;\nint: 100000\n\</pre\>","","",[])