License: Copyright (c) 2009-2011 CWI
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
* Paul Klint - Paul.Klint@cwi.nl - CWI

Name:IntroFunctions

Categories:

Synopsis:

Description:

Functions allow the definition of frequently used operations. They have a name and formal parameters. They are explicitly declared and are fully typed. 
Functions can also be used as values thus enabling higher-order functions. 
Rascal is a higher-order language in which functions are first-class values.

See [Function] for details.

Examples:

Here is an example of a function that counts the number of assignment statements in a program:
<listing>
int countAssignments(PROGRAM P){
    int n = 0;
    visit (P){
    case asgStat(_, _):
         n += 1;
    }
    return n;
}
</listing>

Consider the following use of higher-order functions:
<listing>
int double(int x) { return 2 * x; }

int triple(int x) { return 3 * x; }

int f(int x, int (int) multi){ return multi(x); }
</listing>

The functions `double` and `triple` simply multiply their argument with a constant. 
Function `f` is, however, more interesting. 
It takes an integer `x` and a function `multi` (with integer argument and integer result) as argument and 
applies multi to its own argument. `f(5, triple)` will hence return `15`. 
Function values can also be created anonymously as illustrated by the following, alternative, 
manner of writing this same call to `f`:
<listing>
f(5, int (int y){return 3 * y;});
</listing>

Here the second argument of `f` is an anonymous function.

Benefits:

Pitfalls:

Questions:

