concept("Figures",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Libraries/Vis/Figure/Figures/Figures.concept|,[],[],{"Library"},{"tree","graph","hcat","ellipse","text","box","grid","outline","vcat"}," \<pre class=\"listing\"\>data Figure = \n/* Atomic figures */\n\n     text(FProperties props, str s)\t\t// text label\n   | text(str s)\t\t\t        // text label\n   \n                                                // file outline\n   | outline(FProperties props, map[int,Color] coloredLines)\n   | outline(map[int,Color] coloredLines)\n   \n   \n/* Containers */\n\n   | box(FProperties props)\t\t\t// rectangular box\n   | box(FProperties props, Figure inner)       // rectangular box with inner element\n   \n   | ellipse(FProperties props)\t\t\t// ellipse\n   | ellipse(FProperties props, Figure inner)   // ellipse with inner element\n   \n   | wedge(FProperties props)\t\t\t// wedge\n   | wedge(FProperties props, Figure inner)     // wedge with inner element\n   \n   | space(FProperties props)\t\t\t// invisible box (used for spacing)\n   | space(FProperties props, Figure inner)     // invisible box with visible inner element\n \n/* Compositions */\n   \n   | use(Figure elem)                           // use another figure\n   | use(FProperties props, Figure elem)\n \n   | hcat(Figures elems)                        // horizontal concatenation\n   | hcat(FProperties props, Figures elems)\n   \n   | vcat(Figures elems)                        // vertical concatenation\n   | vcat(FProperties props, Figures elems)\n   \n   | hvcat(Figures elems)                       // horizontal and vertical concatenation\n   | hvcat(FProperties props, Figures elems)\n   \n   | overlay(Figures elems)                     // overlay (stacked) composition\n   | overlay(FProperties props, Figures elems)\n   \n   | shape(list[Vertex] points)                 // shape of to be connected vertices\n   | shape(FProperties props,list[Vertex] points)\n   \n   | grid(Figures elems)                        // placement on fixed grid\n   | grid(FProperties props, Figures elems)\n   \n   | pack(Figures elems)                        // composition by 2D packing\n   | pack(FProperties props, Figures elems)\n   \n   | graph(Figures nodes, list[Edge] edges)     // composition of nodes and edges as graph\n   | graph(FProperties, Figures nodes, list[Edge] edges)\n   \n                \t                        // composition of nodes and edges as tree\n   | tree(Figures nodes, list[Edge] edges) \n   | tree(FProperties, Figures nodes, list[Edge] edges)\n   \n   | treemap(Figures nodes, list[Edge] edges, str root) \n   | treemap(FProperties, Figures nodes, list[Edge] edges)\n   \n/* Transformations */\n\n   | rotate(num angle, Figure fig)              // Rotate figure around its anchor point\n   | scale(num perc, Figure)\t\t        // Scale figure (same for h and v)\n   | scale(num xperc, num yperc, Figure fig)\t// Scale figure (different for h and v)\n   ;\n\</pre\>",""," \<ul\>\<li\> \<code\>Figure\</code\>\</li\>\n\<li\> \<code\>alias Figures = list[Figure];\</code\>\</li\>\n\</ul\>","",{"Figures","list","];","=","[","Figure","alias"}," \<code\>Figure\</code\> is the primary data type that represents figures. A list of figures is represented by the type \<code\>Figures\</code\>.\n Figures can be classified as follows:\n  \<ul\>\<li\> \<b\>Atomic Figures\</b\>: indivisible figures such as \<a href=\"/show?concept=text\"\>text\</a\> and \<a href=\"/show?concept=outline\"\>outline\</a\>.\</li\>\n\<li\> \<b\>Containers\</b\>: most figures may act as containers for other figures. For example, a \<a href=\"/show?concept=box\"\>box\</a\> or \<a href=\"/show?concept=ellipse\"\>ellipse\</a\> may contain    an arbitrarily complex subfigure.\n\</li\>\n\<li\> \<b\>Compositions\</b\>: serve to combine figures into new figures. Examples are horizontal (\<a href=\"/show?concept=hcat\"\>hcat\</a\>) or vertical (\<a href=\"/show?concept=vcat\"\>vcat\</a\>) concatenation    or placement of figures in a \<a href=\"/show?concept=grid\"\>grid\</a\>, \<a href=\"/show?concept=graph\"\>graph\</a\> or \<a href=\"/show?concept=tree\"\>tree\</a\>.\n\</li\>\n\<li\> \<b\>Transformations\</b\>: perform geometric transformations on a given figure.\</li\>\n\</ul\>","","","",[])