concept("Figures",|std:///experiments/RascalTutor/Courses/Rascal/Libraries/Vis/Figure/Figures/Figures.concept|,[],[],{"tree","graph","hcat","ellipse","textField","text","computeFigure","box","textarea","Function","grid","wedge","checkbox","button","outline","choice","vcat"}," \<pre class=\"listing\"\>data Figure = \n/* Atomic figures */\n\n     text(str s, FProperty props...)\t        // text label\n   | text computedStr cs,  FProperty props...)\n                                                \n   | outline(map[int,Color] coloredLines,       // file outline\n             FProperty props...)\n   \n   \n/* Containers */\n\n   | box(FProperty props...)\t\t\t// rectangular box\n   | box(Figure fig, FProperty props...)        // rectangular box with inner element\n   \n   | ellipse(FProperty props...)\t\t// ellipse\n   | ellipse(Figure fig, FProperty props...)    // ellipse with inner element\n   \n   | wedge(FProperty props...)\t\t\t// wedge\n   | wedge(Figure fig, FProperty props...)      // wedge with inner element\n   \n   | space(FProperty props...)\t\t\t// invisible box (used for spacing)\n   | space(Figure fig, FProperty props...)      // invisible box with visible inner element\n \n/* Compositions */\n   \n   | use(Figure elem)                           // use another figure\n   | use(Figure fig, FProperty props...)\n \n   | hcat(Figures figs, FProperty props...)     // horizontal concatenation\n   \n   | vcat(Figures figs, FProperty props...)     // vertical concatenation\n   \n   | hvcat(Figures figs, FProperty props...)    // horizontal and vertical concatenation\n\n   | overlay(Figures figs, FProperty props...)  // overlay (stacked) composition\n   \n   | shape(list[Vertex] points,                 // shape of to be connected vertices\n           FProperty props...)                 \n   \n   | grid(Figures figs, FProperty props...)     // placement on fixed grid\n   \n   | pack(Figures figs, FProperty props...)     // composition by 2D packing\n   \n   | graph(Figures nodes, list[Edge] edges,     // composition of nodes and edges as graph\n           FProperty props...)     \n   \n                \t                        \n   | tree(Figures nodes, list[Edge] edges,      // composition of nodes and edges as tree\n          FProperty props...)\n   \n   | treemap(Figures nodes, list[Edge] edges,   // composition of nodes and edges as treemap\n             FProperty props...) \n   \n/* Transformations */\n\n   | rotate(num angle, Figure fig)              // Rotate figure around its anchor point\n   | scale(num perc, Figure fig)\t        // Scale figure (same for h and v)\n   | scale(num xperc, num yperc, Figure fig)\t// Scale figure (different for h and v)\n\n/* interaction */\n\n   | computeFigure(Figure () computeFig, FProperty props...)\n   | button(str label, void () vcallback, FProperty props...)\n   | textfield(str text, void (str) scallback, FProperty props...)\n   | textfield(str text, void (str) scallback, bool (str) validate, FProperty props...)\n   | textarea(list[str] lines, map[int,Color] coloredLines, FProperty props...)\n   | choice(list[str] choices, void(str s) ccallback, FProperty props...)\n   | checkbox(str text, void(bool state) vcallback, FProperty props...)\n   ;\n\</pre\>",""," \<ul\>\<li\> \<code\>Figure\</code\>\</li\>\n\<li\> \<code\>alias Figures = list[Figure];\</code\>\</li\>\n\</ul\>","",{"Figures","list","];","=","[","Figure","alias"}," \<code\>Figure\</code\> is the primary data type that represents figures. A list of figures is represented by the type \<code\>Figures\</code\>.\n Figures can be classified as follows:\n  \<ul\>\<li\> \<b\>Atomic Figures\</b\>: indivisible figures such as \<a href=\"/show?concept=text\"\>text\</a\> and \<a href=\"/show?concept=outline\"\>outline\</a\>.\</li\>\n\<li\> \<b\>Containers\</b\>: most figures may act as containers for other figures. For example, a \<a href=\"/show?concept=box\"\>box\</a\>, \<a href=\"/show?concept=ellipse\"\>ellipse\</a\> or \<a href=\"/show?concept=wedge\"\>wedge\</a\> may contain    an arbitrarily complex subfigure.\n\</li\>\n\<li\> \<b\>Compositions\</b\>: serve to combine figures into new figures. Examples are horizontal (\<a href=\"/show?concept=hcat\"\>hcat\</a\>) or vertical (\<a href=\"/show?concept=vcat\"\>vcat\</a\>) concatenation    or placement of figures in a \<a href=\"/show?concept=grid\"\>grid\</a\>, \<a href=\"/show?concept=graph\"\>graph\</a\> or \<a href=\"/show?concept=tree\"\>tree\</a\>.\n\</li\>\n\<li\> \<b\>Transformations\</b\>: perform geometric transformations on a given figure.\</li\>\n\<li\> \<b\>Interaction\</b\>: provide interaction with the user, see \<a href=\"/show?concept=computeFigure\"\>computeFigure\</a\>, \<a href=\"/show?concept=button\"\>button\</a\>, \<a href=\"/show?concept=textField\"\>textField\</a\>, \<a href=\"/show?concept=textarea\"\>textarea\</a\>, \<a href=\"/show?concept=choice\"\>choice\</a\>, and   \<a href=\"/show?concept=checkbox\"\>checkbox\</a\>.\n\</li\>\n\</ul\>","",""," We are cheating a bit with the above data declaration for Figure. \n The current version of Rascal does not yet support data constructors with a variable number of arguments as needed\n for the properties. At the moment, the above constructors are provided as Rascal functions that can\n have variable arguments, see \<a href=\"/show?concept=Function\"\>Function\</a\>.\n",[])