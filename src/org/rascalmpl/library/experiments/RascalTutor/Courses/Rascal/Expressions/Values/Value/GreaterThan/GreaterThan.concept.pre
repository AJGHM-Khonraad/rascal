concept("GreaterThan",|std:///experiments/RascalTutor/Courses/Rascal/Expressions/Values/Value/GreaterThan/GreaterThan.concept|,["Rascal implementation: broken"],[],{"Language"},{},""," \<code\>\n  \<i\>Exp\</i\>\<sub\>1\</sub\> \> \<i\>Exp\</i\>\<sub\>2\</sub\>\n\</code\>\n"," \<table\>\n  \<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>1\</sub\>\n  \</code\> \</th\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>2\</sub\>\n  \</code\> \</th\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>1\</sub\> \> \<i\>Exp\</i\>\<sub\>2\</sub\>\n  \</code\> \</th\>\</tr\>\<tr\>\<td align=\"left\"\>\n     \<code\>\n      value\n    \</code\>   \n  \</td\>\<td align=\"left\"\>\n      \<code\>\n      value\n    \</code\>  \n  \</td\>\<td align=\"left\"\>\n     \<code\>\n      bool\n    \</code\>               \n  \</td\>\</tr\>\n\</table\>","",{"\>","bool","value"}," By brute force, a total less than operator between two values \<code\>\n  \<i\>V\</i\>\<sub\>1\</sub\>\n\</code\> and \<code\>\n  \<i\>V\</i\>\<sub\>2\</sub\>\n\</code\> of arbitrary types \<code\>\n  \<i\>T\</i\>\<sub\>1\</sub\>\n\</code\> and \<code\>\n  \<i\>T\</i\>\<sub\>2\</sub\>\n\</code\> is defined:\n  \<ul\>\n  \<li\> If the types \<code\>\n    \<i\>T\</i\>\<sub\>1\</sub\>\n  \</code\> and \<code\>\n    \<i\>T\</i\>\<sub\>2\</sub\>\n  \</code\> can be compared then \<code\>\n    \<i\>V\</i\>\<sub\>1\</sub\>\n  \</code\> less than \<code\>\n    \<i\>V\</i\>\<sub\>2\</sub\>\n  \</code\> is used.\</li\>\n  \<li\> Otherwise values are ordered according their type name, for instance, \<code\>\n    int\n  \</code\> is smaller than \<code\>\n    list\n  \</code\>, and \<code\>\n    map\n  \</code\> is smaller than \<code\>\n    rel\n  \</code\>.\</li\>\n  \n\</ul\> Greater than yields \<code\>\n  true\n\</code\> if the value of \<code\>\n  \<i\>Exp\</i\>\<sub\>2\</sub\>\n\</code\> is strictly less\n than (according to the ordering defined above) the value of \<code\>\n  \<i\>Exp\</i\>\<sub\>1\</sub\>\n\</code\>, and \<code\>\n  false\n\</code\> otherwise.\n"," \<warning\>Rascal implementation: broken\</warning\> \<pre class=\"screen\"\>\</pre\>\n  Introduce two variables \<code\>\n  X\n\</code\>, \<code\>\n  Y\n\</code\> and \<code\>\n  Z\n\</code\> and force them to be of type \<code\>\n  value\n\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>value X = &quot;def&quot;;\nvalue: &quot;def&quot;\n\<b\>rascal\>\</b\>value Y = &quot;abc&quot;;\nvalue: &quot;abc&quot;\n\<b\>rascal\>\</b\>value Z = 3.14;\nvalue: 3.14\n\</pre\>\n  Now compare \<code\>\n  X\n\</code\> and \<code\>\n  Y\n\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>X &gt; Y;\nStatic Error: prompt:///:1,0: &gt; not supported on value and value\n\</pre\>\n  and \<code\>\n  X\n\</code\> and \<code\>\n  Z\n\</code\>:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>X &gt; Z;\nStatic Error: prompt:///:1,0: &gt; not supported on value and value\n\</pre\>","","",[])