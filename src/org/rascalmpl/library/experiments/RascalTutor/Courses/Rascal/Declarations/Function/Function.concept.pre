concept("Function",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/Function/Function.concept|,[" A scoping issue again"," Unexplained syntax error, escaping of \< broken?"],[],{"Language"},{"TypeParameters"},"","\<ol\>\n\<li\> \<code\>\<i\>Type\</i\> \<i\>Name\</i\>( \<i\>Type\</i\>\<sub\>1\</sub\> \<i\>Var\</i\>\<sub\>1\</sub\>, ..., \<i\>Type\</i\>\<sub\>n\</sub\> \<i\>Var\</i\>\<sub\>n\</sub\> ) \<i\>Statement\</i\>\</code\>\</li\>\n\<li\> \<code\>\<i\>Type\</i\> \<i\>Name\</i\>( \<i\>Type\</i\>\<sub\>1\</sub\> \<i\>Var\</i\>\<sub\>1\</sub\>, ..., \<i\>Type\</i\>\<sub\>n\</sub\> \<i\>Var\</i\>\<sub\>n\</sub\> \<i\>Type\</i\>\<sub\>0\</sub\> \<i\>Name\</i\>\<sub\>0\</sub\>... ) \<i\>Statement\</i\>\</code\>\</li\>\n\<li\> \<code\>\<i\>Type\</i\> \<i\>Name\</i\>( \<i\>Type\</i\>\<sub\>1\</sub\> \<i\>Var\</i\>\<sub\>1\</sub\>, ..., \<i\>Type\</i\>\<sub\>n\</sub\> \<i\>Var\</i\>\<sub\>n\</sub\> ) throws \<i\>Exception\</i\>\<sub\>1\</sub\>, \<i\>Exception\</i\>\<sub\>2\</sub\>, ... \<i\>Statement\</i\> \</code\>\</li\>\n\n\</ol\>\n","","",{"throws",",",")","("},"\<h2\> Variant 1 \</h2\>\nA function declaration introduces a new function with name \<code\>\<i\>Name\</i\>\</code\>, typed formal parameters \<code\>\<i\>Type\</i\>\<sub\>1\</sub\> \<i\>Var\</i\>\<sub\>1\</sub\>\</code\>, a return type \<code\>\<i\>Type\</i\>\</code\>\nand a \<code\>\<i\>Statement\</i\>\</code\> that forms the function body.\nThe type of \<code\>\<i\>Statement\</i\>\</code\> should be equal to \<code\>\<i\>Type\</i\>\</code\>.\n\nThe formal parameters may be used in \<code\>\<i\>Statement\</i\>\</code\> and get their value when function \<code\>\<i\>Name\</i\>\</code\> is invoked.\n\n\<h2\> Variant 2 \</h2\>\nA function may have a variable list of arguments, this has as syntax variant 2 given above.\n\nThe last parameter of a function may be followed by \<code\>...\</code\> and this has as effect that all remaining actual parameters\nthat occur in a call to this function are collected as list value of the last formal parameter. \nInside the function body, the type of this parameter will therefore be \<code\>list[\<i\>Type\</i\>\<sub\>0\</sub\>]\</code\>.\n\n\<h2\> Variant 3 \</h2\>\nThe exceptions that can be thrown by a function can be (optionally) declared as shown in syntax variant 3 above. \n\n\<h2\> Parameterized types in function declaration \</h2\>\nThe types that occur in function declarations may also contain \<a href=\"/show?concept=TypeParameters\"\>TypeParameters\</a\>.\nIn this way functions can be defined for arbitrary types. The type variable is bound at the moment the function is called.\n","\<pre class=\"screen\"\>\</pre\>\n Declare a function\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>rel[int, int] invert(rel[int,int] R){\n\>\>\>\>\>\>\>   return {\<Y, X\> | \<int X, int Y\> \<- R };\n\>\>\>\>\>\>\>}\nrel[int, int] (rel[int, int]): rel[int, int] invert(rel[int, int]);\n\</pre\>\n Call it\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>invert({&lt;1,10&gt;, &lt;2,20&gt;});\nrel[int, int]: {\<20,2\>,\<10,1\>}\n\</pre\>\nIn the following example we illustrate the use of type vriables in function declarations.\nDeclare an inversion function that is applicable to any binary relation:\n\<warning\> A scoping issue again\</warning\>\<pre class=\"screen\"\>\<b\>rascal\>\</b\>rel[&amp;T2, &amp;T1] invert2(rel[&amp;T1,&amp;T2] R){  \n\>\>\>\>\>\>\>   return {\<Y, X\> | \<&T1 X, &T2 Y\> \<- R };\n\>\>\>\>\>\>\>}\nrel[&T2, &T1] (rel[&T1, &T2]): rel[&T2, &T1] invert2(rel[&T1, &T2]);\n\</pre\>\nNow apply it to relations with different types:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>invert2({&lt;1,10&gt;, &lt;2,20&gt;});\nrel[int, int]: {\<20,2\>,\<10,1\>}\n\<b\>rascal\>\</b\>invert2({&lt;&quot;mon&quot;, 1&gt;, &lt;&quot;tue&quot;, 2&gt;});\nStatic Error: prompt:///:2,3: Expected tuple[str,int], but got tuple[int,int]\n\</pre\>\n As another example declare a function that can be used to swap the elements of pairs of arbitrary types:\n\<warning\> Unexplained syntax error, escaping of \< broken?\</warning\>\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>tuple[&amp;T2, &amp;T1] swap(tuple[&amp;T1 A, &amp;T2 B]) { return &lt;B, A&gt;;&raquo;\n}\nParse error in command at line 1, column 41\n\<b\>rascal\>\</b\>swap(&lt;1, 2&gt;);\nStatic Error: prompt:///:1,0: Undeclared variable, function or constructor: swap&raquo;\n\n\<b\>rascal\>\</b\>swap(&lt;&quot;wed&quot;, 3&gt;);\nStatic Error: prompt:///:1,0: Undeclared variable, function or constructor: swap&raquo;\n\n\</pre\>","","",[])