concept("Constructor",|std:///experiments/RascalTutor/Courses/Rascal/Expressions/Values/Constructor/Constructor.concept|,[],[],{"Language"},{"Call","AlgebraicDataType"},""," \<code\>\n  \<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>Exp\</i\>\<sub\>2\</sub\>, ... )\n\</code\>\n"," \<table\>\n  \<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>1\</sub\>\n  \</code\> \</th\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\<sub\>2\</sub\>\n  \</code\> \</th\>\<th align=\"left\"\> ... \</th\>\<th align=\"left\"\>  \<code\>\n    \<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>Exp\</i\>\<sub\>2\</sub\>, ... )\n  \</code\> \</th\>\</tr\>\<tr\>\<td align=\"left\"\>\n     \<code\>\n      \<i\>T\</i\>\<sub\>1\</sub\>\n    \</code\>   \n  \</td\>\<td align=\"left\"\>\n     \<code\>\n      \<i\>T\</i\>\<sub\>2\</sub\>\n    \</code\>   \n  \</td\>\<td align=\"left\"\>\n     ... \n  \</td\>\<td align=\"left\"\>\n     depends on ADT declaration          \n  \</td\>\</tr\>\n\</table\>","",{",",")","("}," In ordinary programming languages record types or classes exist to introduce a new type name for a collection of related, \n named, values and to provide access to the elements of such a collection through their name. \n \<br/\>\n\<br/\>\n\n In Rascal, algebraic data types provide this facility. They have to be declared, see \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\>, and\n then values can be created using calls to the declared constructor functions.\n The constructor \<code\>\n  \<i\>Name\</i\>\n\</code\> should correspond (regarding name, arity and argument types) to one of the alternatives\n in the ADT declaration.\n \<br/\>\n\<br/\>\n\n First, the actual parameter expressions \<code\>\n  \<i\>Exp\</i\>\<sub\>i\</sub\>\n\</code\> are evaluated resulting in values \<code\>\n  \<i\>V\</i\>\<sub\>i\</sub\>\n\</code\>.\n Next, a data value is constructed in accordance with the declared data type\n using the values \<code\>\n  \<i\>V\</i\>\<sub\>i\</sub\>\n\</code\> as arguments for the constructor. This data value is used as value of the constructor. \n Constructors are functions that can be used in all contexts where functions can be used.\n \<br/\>\n\<br/\>\n\n Observe that the syntax of a constructor is identical to the syntax of an function \<a href=\"/show?concept=Call\"\>Call\</a\>.\n"," \<pre class=\"screen\"\>\</pre\>\n  First, define a datatype \<code\>\n  WF\n\</code\> for word frequencies:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>data WF = wf(str word, int freq);\nok\n\</pre\>\n  Then construct a new WF value by calling the constructor \<code\>\n  wf\n\</code\> with appropriate arguments:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>wf(&quot;Rascal&quot;, 10000);\nWF: wf(&quot;Rascal&quot;,10000)\n\</pre\>","","",[])