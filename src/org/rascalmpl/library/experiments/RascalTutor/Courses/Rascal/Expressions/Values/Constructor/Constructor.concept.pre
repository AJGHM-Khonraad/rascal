concept("Constructor",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Expressions/Values/Constructor/Constructor.concept|,[],[],{},{"Call","AlgebraicDataType"},"","\<code\>\<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>Exp\</i\>\<sub\>2\</sub\>, ... )\</code\>\n","\<table\>\<tr\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>1\</sub\>\</code\> \</th\>\<th align=\"left\"\> \<code\>\<i\>Exp\</i\>\<sub\>2\</sub\>\</code\> \</th\>\<th align=\"left\"\> ... \</th\>\<th align=\"left\"\>  \<code\>\<i\>Name\</i\> ( \<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>Exp\</i\>\<sub\>2\</sub\>, ... )\</code\> \</th\>\</tr\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<td\> \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\>   \</td\>\<td\> \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\>   \</td\>\<td\> ... \</td\>\<td\> depends on ADT declaration          \</td\>\</tr\>\</table\>","",{",",")","("},"In ordinary programming languages record types or classes exist to introduce a new type name for a collection of related, \nnamed, values and to provide access to the elements of such a collection through their name. \n\nIn Rascal, algebraic data types provide this facility. They have to be declared, see \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\>, and\nthen values can be created using calls to the declared constructor functions.\nThe constructor \<code\>\<i\>Name\</i\>\</code\> should correspond (regarding name, arity and argument types) to one of the alternatives\nin the ADT declaration.\n\nFirst, the actual parameter expressions \<code\>\<i\>Exp\</i\>\<sub\>i\</sub\>\</code\> are evaluated resulting in values \<code\>\<i\>V\</i\>\<sub\>i\</sub\>\</code\>.\nNext, a data value is constructed in accordance with the declared data type\nusing the values \<code\>\<i\>V\</i\>\<sub\>i\</sub\>\</code\> as arguments for the constructor. This data value is used as value of the constructor. \nConstructors are functions that can be used in all contexts where functions can be used.\n\<br/\>\n\<br/\>\nObserve that the syntax of a constructor is identical to the syntax of an function \<a href=\"/show?concept=Call\"\>Call\</a\>.\n","\<pre class=\"screen\"\>\</pre\>\n First, define a datatype \<code\>WF\</code\> for word frequencies:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>data WF = wf(str word, int freq);\nok\n\</pre\>\n Then construct a new WF value by calling the constructor \<code\>wf\</code\> with appropriate arguments:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>wf(&quot;Rascal&quot;, 10000);\nWF: wf(\"Rascal\",10000)\n\</pre\>","","",[])