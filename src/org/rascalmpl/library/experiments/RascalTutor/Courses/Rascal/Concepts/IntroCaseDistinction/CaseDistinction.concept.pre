concept("CaseDistinction",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/CaseDistinction/CaseDistinction.concept|,[],[],{},{},"","","","",{},"The switch statement as known from C and Java is generalized: the subject value to switch on may be an \narbitrary value and the cases are arbitrary patterns followed by a statement. \nEach case is comparable to a \<i\>transaction\</i\>: when the pattern succeeds and the following statement is \nexecuted successfully, all changes to variables made by the statement are committed and thus become permanent. \nThe variables bound by the pattern are always local to the statement associated with the case. \nWhen a match fails or when the associated statement fails, a \<i\>rollback\</i\> takes place and all side-effects are undone. \nExternal side-effects like I/O and side-effects in user-defined Java code are not undone. \n","Here is an example where we take a program \<code\>P\</code\> and distinguish two cases for while and if statement:\n\<pre class=\"listing\"\>switch (P){\ncase whileStat(_, _):\n     println(\"A while statement\");\ncase ifStat(_, _, _):\n     println(\"An if statement\");\n}\n\</pre\>","","",[])