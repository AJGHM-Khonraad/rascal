concept("IntroSyntaxDefinitionAndParsing",|std:///experiments/RascalTutor/Courses/Rascal/Concepts/IntroSyntaxDefinitionAndParsing/IntroSyntaxDefinitionAndParsing.concept|,[],[],{"ConcreteSyntax","SyntaxDefinition"},"","","","",{}," All source code analysis projects need to extract information directly from the source code. \n There are two main approaches to this:\n  \<ul\>\<li\> \<i\>Lexical information\</i\>: Use regular expressions to extract useful, but somewhat superficial, flat, information.     This can be achieved using regular expression patterns.\n\</li\>\n\<li\> \<i\>Structured information\</i\>: Use syntax analysis to extract the complete, nested, structure of the source code     in the form of a syntax tree.\n\<br/\>\n\<br/\>\n Using \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\>s you can define the syntax of any (programming) language. Then Rascal:\n\</li\>\n\<li\> will generate parsers\</li\>\n\<li\> will provide pattern matching and pattern construction in \<a href=\"/show?concept=ConcreteSyntax\"\>ConcreteSyntax\</a\>\</li\>\n\</ul\>"," \<pre class=\"listing\"\>module MyLanguage\n\nlayout MyLayout = [\\ \\t\\n]*;\n\nlexical Id = [a-z]+;\n\nstart syntax Program = \"begin\" {Stat \";\"}* stats \"end\";\n\nsyntax Stat\n  = assign: Id id \"=\" Exp exp\n  | if: \"if\" Exp cond \"then\" {Stat \";\"}* \"else\" {Stat \";\"}* \"fi\"\n  ;\n\nsyntax Exp\n  = ref: Id id\n  | left mul: Exp lhs \"*\" Exp rhs\n  \> left add: Exp lhs \"+\" Exp rhs\n  ;\n\</pre\> Now you may parse and manipulate programs in this language:\n \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import MyLanguage;\nStatic Error: prompt:///:1,0: Could not load module MyLanguage: Module /MyLangua&raquo;\nge not found\n\<b\>rascal\>\</b\>parse(#start[Program], &quot;begin end&quot;);\nStatic Error: prompt:///:1,0: Undeclared variable, function or constructor: pars&raquo;\ne\n\</pre\>",""," \<ul\>\<li\> The \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\> feature has recently been designed and implemented and is still going through some growing pains.\</li\>\n\</ul\>",[])