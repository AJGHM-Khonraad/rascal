concept("SyntaxDefinition",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/SyntaxDefinition/SyntaxDefinition/.concept|,[],["NonTerminals","RegularExpressionNonTerminals","Disambiguation"],{},{"Visit","Symbols","Disambiguation","Program"}," Syntax Definitions allow you to define parsers for programming languages or other formats.\n"," There are four kinds of non-terminals you can define: \<i\>lexical\</i\>, \<i\>syntax\</i\>, \<i\>layout\</i\> and \<i\>keyword\</i\>. They all have the same syntax, but they differ in how they are processed by the parser generator and how parse trees defined by them are processed by pattern matching and expression evaluation.\n \<br/\>\n\<br/\>\n\n \<code\>lexical \<i\>Nonterminal\</i\> = \<i\>Symbol\</i\>\<sub\>1\</sub\> \<i\>Symbol\</i\>\<sub\>2\</sub\> ... ;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>syntax \<i\>Nonterminal\</i\> = \<i\>Symbol\</i\>\<sub\>1\</sub\> \<i\>Symbol\</i\>\<sub\>2\</sub\> ... ;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>start syntax \<i\>Nonterminal\</i\> = \<i\>Symbol\</i\>\<sub\>1\</sub\> \<i\>Symbol\</i\>\<sub\>2\</sub\> ... ;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>syntax \<i\>Nonterminal\</i\> = \<i\>Name\</i\> : \<i\>Symbol\</i\>\<sub\>1\</sub\> \<i\>Symbol\</i\>\<sub\>2\</sub\> ...;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>syntax \<i\>Nonterminal\</i\> = $Alternative_1 | \<i\>Alternative\</i\>\<sub\>2\</sub\> | \<i\>Alternative\</i\>\<sub\>3\</sub\> | ...;\</code\>  \n \<br/\>\n\<br/\>\n\n \<code\>syntax \<i\>Nonterminal\</i\> = $Alternative_1 \> \<i\>Alternative\</i\>\<sub\>2\</sub\> \> \<i\>Alternative\</i\>\<sub\>3\</sub\> \> ...;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>syntax \<i\>Nonterminal\</i\> = $Alternative_1 \> left { \<i\>Alternative\</i\>\<sub\>2\</sub\> | \<i\>Alternative\</i\>\<sub\>3\</sub\> | ... } | ...;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>layout \<i\>Nonterminal\</i\> = \<i\>Symbol\</i\>\<sub\>1\</sub\> \<i\>Symbol\</i\>\<sub\>2\</sub\> ... ;\</code\>\n \<br/\>\n\<br/\>\n\n \<code\>keyword \<i\>Nonterminal\</i\> = \<i\>Terminal\</i\>\<sub\>1\</sub\> | \<i\>Terminal\</i\>\<sub\>2\</sub\> | &amp;;\</code\>\n","","",{"\>","}","...;","=","|",";","layout",":","keyword","&;","lexical","syntax","start","Alternative_3","Alternative_2"}," Rascal supports full context-free grammars for syntax definition. It generates scannerless parsers from these definitions. The definitions can be ambiguous, which is why we provide \<a href=\"/show?concept=Disambiguation\"\>Disambiguation\</a\> methods.\n \<br/\>\n\<br/\>\n\n \<i\>Syntax\</i\> non-terminals are general context-free non-terminals. This mean left-recursion, right-recursion, any of the regular expression \<a href=\"/show?concept=Symbols\"\>Symbols\</a\> and all kinds of \<a href=\"/show?concept=Disambiguation\"\>Disambiguation\</a\> can be used to define it. It is important to note that in between the \<code\>\<i\>Symbols\</i\>\</code\> that define a syntax non-terminal the locally defined layout non-terminal will be interleaved. For example, if you define \<code\>layout ML = [\\ ]*;\</code\> and \<code\>syntax A = \"a\" \"a\"\</code\>, Rascal will \<i\>modify\</i\> the definition of A to \<code\>syntax A = \"a\" ML \"a\";\</code\> before generating a parser.\n \<br/\>\n\<br/\>\n\n \<i\>Lexical\</i\> non-terminals are just like \<i\>syntax\</i\> non-terminals, very much like \<i\>syntax\</i\> non-terminals. However, the definition of a lexical is \<i\>not\</i\> modified with interleaved layout non-terminals. And, the structure of lexicals is not traversed by the \<a href=\"/show?concept=Visit\"\>Visit\</a\> statement and equality is checked between lexicals by checking the characters (not its structure) for equality. \n \<br/\>\n\<br/\>\n\n \<i\>Layout\</i\> non-terminals are just like \<i\>syntax\</i\> non-terminals as well. However, they are used to preprocess all \<i\>syntax\</i\> definitons in the same module scope (see above).\n \<br/\>\n\<br/\>\n\n \<i\>Keyword\</i\> non-terminals are \<i\>not\</i\> like _syntax definitions. These only allow definition of enumeration of literal symbols and single character classes. Keyword non-terminals play an important role in the semantics of \<a href=\"/show?concept=Disambiguation\"\>Disambiguation\</a\> where some disambiguation constructs require finite, non-empty enumeration of strings. The prime example is the definition of reserved keywords.\n \<br/\>\n\<br/\>\n\n The \<i\>start\</i\> modifier identifies the start of a grammar. The effect of a start modifier is that Rascal will generate an extra syntax definition before generating a parser that allows layout to before and after the start non-terminal. For example: \<code\>layout L = [\\ ]*; start Program = Statement*;\</code\> will produce \<code\>syntax start[Program] = L Program \<i\>top\</i\> L;\</code\>. Note that the start\<a href=\"/show?concept=Program\"\>Program\</a\> type is now available in your program, and parse trees assigned to variable of that type will allow access to the \<code\>\<i\>top\</i\>\</code\> field.\n"," We may use syntax definitions in a very direct way, without much extra annotation:\n \<pre class=\"screen\"\>\</pre\>\n  Define an Identifier non-terminal using a regular expression over character classes:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>lexical Identifier = [a-z]+;\nok\n\</pre\>\n  Define the whitespace that will be used by following syntax definitions:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>layout MyLayout = [\\ \\t\\n]*;\nok\n\</pre\>\n  Define an expression language that uses the above Identifier and MyLayout definitions:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>syntax Expression \n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  = Identifier\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &gt; left Expression &quot;*&quot; Expression\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  &gt; left Expression &quot;+&quot; Expression\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;  ;\nok\n\</pre\>\n  Define somewhere to start\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>start syntax Calc = {Expression &quot;;&quot;}+;\nok\n\</pre\>\n  Now we can dynamically parse an example expression\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>c = parse(#start[Calc], &quot;a + b&quot;);\n`a + b`\nstart[Calc]: appl(\n  prod(\n    start(sort(&quot;Calc&quot;)),\n    [\n      layouts(&quot;MyLayout&quot;),\n      label(\n        &quot;top&quot;,\n        sort(&quot;Calc&quot;)),\n      layouts(&quot;MyLayout&quot;)\n    ],\n    {}),\n  [\n    appl(\n      prod(\n      ...\n*** Rascal killed after timeout ***\n\</pre\>\n  We can statically produce a parse tree of expressions\n\n\<pre class=\"screen\"\>\</pre\>"," \<ul\>\<li\> modular and composable\</li\>\n\<li\> no grammar normalization or grammar factoring necessary\</li\>\n\<li\> generate a parser for any context-free grammar\</li\>\n\<li\> generate parsers are really fast (for general parsers)\</li\>\n\<li\> powerful disambiguation constructs for common programming language disambiguation patterns\</li\>\n\<li\> data-dependent (context-sensitive) disambiguation via arbitrary functions\</li\>\n\<li\> embedding of concrete syntax fragments in Rascal programs\</li\>\n\</ul\>"," \<ul\>\<li\> grammars may be ambiguous\</li\>\n\<li\> static grammar checker is not finished\</li\>\n\</ul\>",[])