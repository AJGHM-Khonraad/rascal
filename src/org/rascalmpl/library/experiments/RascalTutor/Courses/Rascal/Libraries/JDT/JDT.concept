Name: JDT

Synopsis: Datatypes for representing relations between parts of Java programs.

Syntax: 

Types:
<listing>
// Maps any ast at a certain location to a qualified name represented by an Entity
public alias BindingRel = rel[loc, Entity];

// A shorthand for any relationship between two Entities
public alias EntityRel = rel[Entity from, Entity to];

// A short-hand for collections of entities
public alias EntitySet = set[Entity];

// A short-hand for mappings from Entities to their declared Modifiers   
public alias ModifierRel = rel[Entity entity, Modifier modifier];

@// All type declarations and uses
anno BindingRel Resource@types;        

// All method declarations and uses
anno BindingRel Resource@methods;      

// All method declarations
anno BindingRel Resource@methodDecls;

// All constructor declarations
anno BindingRel Resource@constructors; 

// All field declarations and uses
anno BindingRel Resource@fields;       

// All field declarations
anno BindingRel Resource@fieldDecls;

// All local variable and method parameter declarations
anno BindingRel Resource@variables;    

// All package declarations
anno BindingRel Resource@packages;     

// All class declarations
anno BindingRel Resource@classes;

// All the modifiers that have been declared for each entity
anno ModifierRel Resource@modifiers; 

// Which types implement which interfaces
anno EntityRel  Resource@implements;   

// Which class extends which other classes
anno EntityRel  Resource@extends;      

// All declarations of top-level classes
anno EntitySet  Resource@declaredTopTypes; 

// All declarations of inner classes
anno EntityRel  Resource@declaredSubTypes; 

// Which class defines which methods
anno EntityRel  Resource@declaredMethods;  

// Which class defines which fields
anno EntityRel  Resource@declaredFields;   

// Which methods call which other methods, and which 
// class initialization code calls which methods
anno EntityRel  Resource@calls;
</listing>



Function:

Details:

Description:
Detailed information can be extracted from Java projects in the current Eclipse workspace. 
The JDT library module depends heavily on the library modules
* [Resources] for extracting projects and files from an Eclipse project.
* [Java] for representing facts about Java source code.


The access to facts about Java files proceeds in two steps:

* First all facts are extracted from given projects or files. 
  The result is a Resource (see [Resources]) that is annotated with all kinds of interesting information about that specific Resource, 
  and usually also about Resources that are contained inside that resource. 
  The project/file annotation declarations are shown above.

* Next, specific facts about the Java source code can be retrieved from the annotations. 
  These annotations all represent values of type `BindingRel`, `EntityRel` or `ModifierRel` that are summarized above.
  A `BindingRel` is always used to map a source code location to a fully qualified Entity label of that part of the source code. 
  `EntityRel` is simply a short hand for any kind of relation between entities.


This information can be extracted by various functions defined in this module.

Examples:
Here is an example function that extracts the sub-type relation from a given project:

<listing>
EntityRel getSubTypeInformation(loc project){
  fm = extractProject(project);
  return fm@extends + fm@implements + 
         {class("Object") x top(fm@extends + fm@implements);
}
</listing>

Benefits:

Pitfalls:
This module is only available in the Eclipse version of Rascal.

Questions:

