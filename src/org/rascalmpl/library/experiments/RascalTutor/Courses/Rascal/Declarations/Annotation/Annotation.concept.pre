concept("Annotation",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/Annotation/Annotation.concept|,[],[],{},{"AlgebraicDataType"},"","\<code\>anno \<i\>AnnoType\</i\> \<i\>OnType\</i\> @ \<i\>Name\</i\>\</code\>\n","","",{"anno","@"},"An annotation may be associated with any node value, be it a pure node or some \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\> derived from it.\n\nAnnotations are intended to attach application data to values,\nlike adding position information or control flow information to source code or adding visualization information to a graph.\n\nAn annotation declaration defines:\n\n\<ul\>\n\<li\> \<code\>\<i\>AnnoType\</i\>\</code\>, the type of the annotation values,\</li\>\n\<li\> \<code\>\<i\>OnTYpe\</i\>\</code\>, the type of the values that are being annotated,\</li\>\n\<li\> \<code\>\<i\>Name\</i\>\</code\>, the name of the annotation.\<br/\>\n\<br/\>\nAny value of any named type can be annotated and the type of these annotations can be declared precisely.\</li\>\n\n\</ul\>\nThe following constructs are provided for handling annotations:\n\n\<ul\>\n\<li\> \<code\>\<i\>Val\</i\> @ \<i\>Anno\</i\>\</code\>: is an expression that retrieves the value of annotation \<code\>\<i\>Anno\</i\>\</code\> of value \<code\>\<i\>Val\</i\>\</code\> (may be undefined!).\</li\>\n\<li\> \<code\>\<i\>Val\</i\>\<sub\>1\</sub\>[@\<i\>Anno\</i\> = \<i\>Val\</i\>\<sub\>2\</sub\>]\</code\>: is an expression that sets the value of annotation \<code\>\<i\>Anno\</i\>\</code\> of the value \<code\>\<i\>Val\</i\>\<sub\>1\</sub\>\</code\> to \<code\>\<i\>Val\</i\>\<sub\>2\</sub\>\</code\>    and returns \<code\>\<i\>Val\</i\>\<sub\>1\</sub\>\</code\> with the new annotation value as result.\</li\>\n\<li\> \<code\>\<i\>Var\</i\> @ \<i\>Anno\</i\> = \<i\>Val\</i\>\</code\>: is an assignment statement that sets the value of annotation \<code\>\<i\>Anno\</i\>\</code\> of the value of variable \<code\>\<i\>Var\</i\>\</code\> to \<code\>\<i\>Val\</i\>\</code\>.\</li\>\n\n\</ul\>\n","Here is a declaration of an annotation that attaches location information to certain syntactic constructs of \nprograms (e.g., \<code\>EXPRESSION\</code\>) with name \<code\>posinfo\</code\>:\n\n\<pre class=\"listing\"\>anno loc EXPRESSION @ posinfo;\n\</pre\>\nOne can also add such location information to all syntax trees:\n\n\<pre class=\"listing\"\>anno loc Tree @ posinfo;\n\</pre\>\nGiven a graph datatype, one can define an annotation with name \<code\>LayoutStrategy\</code\> that defines which \ngraph layout algorithm to apply to a particular graph, e.g.,\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>data Graph = vertex(str name, int x, int y) | edge(str from, str to);\nok\n\<b\>rascal\>\</b\>data LayoutStrategy = dot() | tree() | force() | hierarchy() | fisheye();\nok\n\<b\>rascal\>\</b\>anno LayoutStrategy Graph @ strategy;\nok\n\</pre\>","","",[])