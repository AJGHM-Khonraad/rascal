concept("Annotation",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/Annotation/Annotation.concept|,[],[],{},{"AlgebraicDataType"},""," \<code\>\n  anno \<i\>AnnoType\</i\> \<i\>OnType\</i\> @ \<i\>Name\</i\>\n\</code\>\n","","",{"anno","@"}," An annotation may be associated with any node value, be it a pure node or some \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\> derived from it.\n \<br/\>\n\<br/\>\n\n Annotations are intended to attach application data to values,\n like adding position information or control flow information to source code or adding visualization information to a graph.\n \<br/\>\n\<br/\>\n\n An annotation declaration defines:\n  \<ul\>\n  \<li\> \<code\>\n    \<i\>AnnoType\</i\>\n  \</code\>, the type of the annotation values,\</li\>\n  \<li\> \<code\>\n    \<i\>OnTYpe\</i\>\n  \</code\>, the type of the values that are being annotated,\</li\>\n  \<li\> \<code\>\n    \<i\>Name\</i\>\n  \</code\>, the name of the annotation.\</li\>\n  \n\</ul\> Any value of any named type can be annotated and the type of these annotations can be declared precisely.\n \<br/\>\n\<br/\>\n\n The following constructs are provided for handling annotations:\n  \<ul\>\n  \<li\> \<code\>\n    \<i\>Val\</i\> @ \<i\>Anno\</i\>\n  \</code\>: is an expression that retrieves the value of annotation \<code\>\n    \<i\>Anno\</i\>\n  \</code\> of value \<code\>\n    \<i\>Val\</i\>\n  \</code\> (may be undefined!).\</li\>\n  \<li\> \<code\>\n    \<i\>Val\</i\>\<sub\>1\</sub\>[@\<i\>Anno\</i\> = \<i\>Val\</i\>\<sub\>2\</sub\>]\n  \</code\>: is an expression that sets the value of annotation \<code\>\n    \<i\>Anno\</i\>\n  \</code\> of the value \<code\>\n    \<i\>Val\</i\>\<sub\>1\</sub\>\n  \</code\> to \<code\>\n    \<i\>Val\</i\>\<sub\>2\</sub\>\n  \</code\>    and returns \<code\>\n    \<i\>Val\</i\>\<sub\>1\</sub\>\n  \</code\> with the new annotation value as result.\n  \</li\>\n  \<li\> \<code\>\n    \<i\>Var\</i\> @ \<i\>Anno\</i\> = \<i\>Val\</i\>\n  \</code\>: is an assignment statement that sets the value of annotation \<code\>\n    \<i\>Anno\</i\>\n  \</code\> of the value of variable \<code\>\n    \<i\>Var\</i\>\n  \</code\> to \<code\>\n    \<i\>Val\</i\>\n  \</code\>.\</li\>\n  \n\</ul\>"," Here is a declaration of an annotation that attaches location information to certain syntactic constructs of \n programs (e.g., \<code\>\n  EXPRESSION\n\</code\>) with name \<code\>\n  posinfo\n\</code\>:\n  \<pre class=\"listing\"\>anno loc EXPRESSION @ posinfo;\n\</pre\> One can also add such location information to all syntax trees:\n  \<pre class=\"listing\"\>anno loc Tree @ posinfo;\n\</pre\> Given a graph datatype, one can define an annotation with name \<code\>\n  LayoutStrategy\n\</code\> that defines which \n graph layout algorithm to apply to a particular graph, e.g.,\n \<pre class=\"screen\"\>\<b\>rascal\>\</b\>data Graph = vertex(str name, int x, int y) | edge(str from, str to);\nok\n\<b\>rascal\>\</b\>data LayoutStrategy = dot() | tree() | force() | hierarchy() | fisheye();\nok\n\<b\>rascal\>\</b\>anno LayoutStrategy Graph @ strategy;\nok\n\</pre\>","","",[])