Name:IntroSyntaxDefinitionAndParsing

Synopsis: Concept: _Syntax definition of new languages_.

Description:

All source code analysis projects need to extract information directly from the source code. 
There are two main approaches to this:

* _Lexical information_: Use regular expressions to extract useful, but somewhat superficial, flat, information. 
   This can be achieved using regular expression patterns.
* _Structured information_: Use syntax analysis to extract the complete, nested, structure of the source code 
   in the form of a syntax tree.


Using [SyntaxDefinition]s you can define the syntax of any (programming) language. Then Rascal:
* will generate parsers
* will provide pattern matching and pattern construction in [ConcreteSyntax]

Examples:

<listing>
module MyLanguage

layout MyLayout = [\ \t\n]*;

lexical Id = [a-z]+;

start syntax Program = "begin" {Stat ";"}* stats "end";

syntax Stat
  = assign: Id id "=" Exp exp
  | if: "if" Exp cond "then" {Stat ";"}* "else" {Stat ";"}* "fi"
  ;

syntax Exp
  = ref: Id id
  | left mul: Exp lhs "*" Exp rhs
  > left add: Exp lhs "+" Exp rhs
  ;
</listing>

Now you may parse and manipulate programs in this language:
<screen>
import MyLanguage;
parse(#start[Program], "begin end");
</screen>

Benefits:

Pitfalls:
* The [SyntaxDefinition] feature has recently been designed and implemented and is still going through some growing pains.

Questions:

