Name: IDEConstruction

Synopsis: Extend an IDE with interactive, language-specific, features.

Syntax:

Types:

Function:

Details:

Description:
To instantiate an IDE for a language implemented using Rascal, follow the steps as shown in the following example:

<screen>
import util::IDE;
start syntax ABC = [a-z]+;
layout Whitespace = [\ \t\n]*;
start[ABC] abc(str x, loc l) { 
  return parse(#start[ABC], x, l); 
}
registerLanguage("The ABC language", "abc", abc);
// After this, your __current__ Eclipse instance will start editors for all files ending in `.abc` and parse them using the `abc` function. The editor will provide some default highlighting features.
//
// To add annotations to trees, just after parsing, you should register an 'annotator' function:
registerAnnotator("abc", Tree (Tree t) { return t[@doc="Hello!"]; });
</screen>

Now you can step-by-step extend the IDE for your language with additional features:
<toc Rascal/IDEConstruction 1>

To be able to reuse your IDE between runs of Eclipse, read about [Plugin]s.

Examples:

Benefits:

Pitfalls:

Questions:

