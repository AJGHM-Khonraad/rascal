concept("StaticTyping",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Declarations/StaticTyping/StaticTyping.concept|,[],[],{"Language"},{"TypeConstraints","Function","AlgebraicDataType","TypeParameters","ReifiedTypes"},"","","","",{},"Rascal is based on static typing, this means that as many errors and inconsistencies as possible are spotted before \nthe program is executed. \n\n\<h2\>The Type Lattice\</h2\>\n\nThe types are ordered in a so-called \<i\>type lattice\</i\> shown in the following figure. \<br\>\n\n\<img align=\"right\" width=\"400px\" height=\"400px\"  alt=\"Type Lattice\" src=\"Courses/Rascal/Declarations/StaticTyping/../../Concepts/IntroStaticTyping/type-lattice.png\"\>\n\<br\>\nThe arrows describe a \<i\>subtype-of\</i\> relation between types. The type \<code\>void\</code\> is the \<i\>smallest\</i\> type and \nis included in all other types and the type \<code\>value\</code\> is the \<i\>largest\</i\> type that includes all other types. \nWe also see that \<code\>rel\</code\> is a subtype of \<code\>set\</code\> and that each ADT is a subtype of \<code\>node\</code\>. \nA special role is played by the datatype \<tt\>Tree\</tt\> that is the generic type of syntax trees. \nSyntax trees for specific languages are all subtypes of \<code\>Tree\</code\>. As a result, syntax trees can be addressed at two levels: \n\<ul\>\n\<li\> in a generic fashion as \<code\>Tree\</code\> and,\</li\>\n\<li\> in a specific fashion as a more precisely typed syntax tree.  Finally, each \<code\>alias\</code\> is structurally equivalent to one or more specific other types.\</li\>\n\n\</ul\>\nThe fact that the types are ordered in a lattice makes it possible to define a \<b\>Least Upper Bound\</b\> (lub) on types.\nGiven two types \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\> and \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\>, \<code\>lub(\<i\>T\</i\>\<sub\>1\</sub\>, \<i\>T\</i\>\<sub\>2\</sub\>)\</code\> is defined as the nearest common super type of \<code\>\<i\>T\</i\>\<sub\>1\</sub\>\</code\> and \<code\>\<i\>T\</i\>\<sub\>2\</sub\>\</code\>\nin the type lattice.\n\n\<h2\>Advanced Features\</h2\>\nThe Rascal type system has various advanced features that are described separately:\n\<ul\>\n\<li\> Types may be be \<i\>parameterized\</i\> resulting in very general and reusable types, see \<a href=\"/show?concept=TypeParameters\"\>TypeParameters\</a\>.\</li\>\n\<li\> Declarations of \<a href=\"/show?concept=Function\"\>Function\</a\>s and \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\>s may be parameterized and \<a href=\"/show?concept=TypeConstraints\"\>TypeConstraints\</a\> can be used to define    constraints on the acual type to be used.\</li\>\n\<li\> The formal arguments of functions are bound to \<i\>values\</i\> but in exceptional cases   a function may need a type as argument value, \<a href=\"/show?concept=ReifiedTypes\"\>ReifiedTypes\</a\> make this possible.\</li\>\n\n\</ul\>\n","","","",[])