concept("StaticTyping",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/StaticTyping/StaticTyping.concept|,[],[],{"Language"},{"TypeConstraints","Function","AlgebraicDataType","TypeParameters","ReifiedTypes"},"","","","",{}," Rascal is based on static typing, this means that as many errors and inconsistencies as possible are spotted before \n the program is executed. \n  \<h2\>The Type Lattice\</h2\> The types are ordered in a so-called \<i\>type lattice\</i\> shown in the following figure.\n \<img class=\"TutorImg\" style=\"float: right;\" width=\"400px\"  title=\"Type Lattice\" alt=\"Type Lattice\" src=\"Courses/Rascal/Declarations/StaticTyping/../../Concepts/IntroStaticTyping/type-lattice.png\"\>\n \<br/\>\n\<br/\>\n\n The arrows describe a \<i\>subtype-of\</i\> relation between types. The type \<code\>\n  void\n\</code\> is the \<i\>smallest\</i\> type and \n is included in all other types and the type \<code\>\n  value\n\</code\> is the \<i\>largest\</i\> type that includes all other types. \n We also see that \<code\>\n  rel\n\</code\> is a subtype of \<code\>\n  set\n\</code\> and that each ADT is a subtype of \<code\>\n  node\n\</code\>. \n A special role is played by the datatype \<tt\>Tree\</tt\> that is the generic type of syntax trees. \n Syntax trees for specific languages are all subtypes of \<code\>\n  Tree\n\</code\>. As a result, syntax trees can be addressed at two levels: \n \<ul\>\n  \<li\> in a generic fashion as \<code\>\n    Tree\n  \</code\> and,\</li\>\n  \<li\> in a specific fashion as a more precisely typed syntax tree.  Finally, each \<code\>\n    alias\n  \</code\> is structurally equivalent to one or more specific other types.\n  \</li\>\n  \n\</ul\> The fact that the types are ordered in a lattice makes it possible to define a \<b\>Least Upper Bound\</b\> (lub) on types.\n Given two types \<code\>\n  \<i\>T\</i\>\<sub\>1\</sub\>\n\</code\> and \<code\>\n  \<i\>T\</i\>\<sub\>2\</sub\>\n\</code\>, \<code\>\n  lub(\<i\>T\</i\>\<sub\>1\</sub\>, \<i\>T\</i\>\<sub\>2\</sub\>)\n\</code\> is defined as the nearest common super type of \<code\>\n  \<i\>T\</i\>\<sub\>1\</sub\>\n\</code\> and \<code\>\n  \<i\>T\</i\>\<sub\>2\</sub\>\n\</code\>\n in the type lattice.\n  \<h2\>Advanced Features\</h2\> The Rascal type system has various advanced features that are described separately:\n \<ul\>\n  \<li\> Types may be be \<i\>parameterized\</i\> resulting in very general and reusable types, see \<a href=\"/show?concept=TypeParameters\"\>TypeParameters\</a\>.\</li\>\n  \<li\> Declarations of \<a href=\"/show?concept=Function\"\>Function\</a\>s and \<a href=\"/show?concept=AlgebraicDataType\"\>AlgebraicDataType\</a\>s may be parameterized and \<a href=\"/show?concept=TypeConstraints\"\>TypeConstraints\</a\> can be used to define    constraints on the acual type to be used.\n  \</li\>\n  \<li\> The formal arguments of functions are bound to \<i\>values\</i\> but in exceptional cases   a function may need a type as argument value, \<a href=\"/show?concept=ReifiedTypes\"\>ReifiedTypes\</a\> make this possible.\n  \</li\>\n  \n\</ul\>","","","",[])