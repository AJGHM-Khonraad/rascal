concept("JDT",|std:///experiments/RascalTutor/Courses/Rascal/Libraries/JDT/JDT.concept|,[],[],{"Library","Eclipse"},{"Resources","Java"}," \<pre class=\"listing\"\>// Maps any ast at a certain location to a qualified name represented by an Entity\npublic alias BindingRel = rel[loc, Entity];\n\n// A shorthand for any relationship between two Entities\npublic alias EntityRel = rel[Entity from, Entity to];\n\n// A short-hand for collections of entities\npublic alias EntitySet = set[Entity];\n\n// A short-hand for mappings from Entities to their declared Modifiers   \npublic alias ModifierRel = rel[Entity entity, Modifier modifier];\n\n@// All type declarations and uses\nanno BindingRel Resource@types;        \n\n// All method declarations and uses\nanno BindingRel Resource@methods;      \n\n// All method declarations\nanno BindingRel Resource@methodDecls;\n\n// All constructor declarations\nanno BindingRel Resource@constructors; \n\n// All field declarations and uses\nanno BindingRel Resource@fields;       \n\n// All field declarations\nanno BindingRel Resource@fieldDecls;\n\n// All local variable and method parameter declarations\nanno BindingRel Resource@variables;    \n\n// All package declarations\nanno BindingRel Resource@packages;     \n\n// All class declarations\nanno BindingRel Resource@classes;\n\n// All the modifiers that have been declared for each entity\nanno ModifierRel Resource@modifiers; \n\n// Which types implement which interfaces\nanno EntityRel  Resource@implements;   \n\n// Which class extends which other classes\nanno EntityRel  Resource@extends;      \n\n// All declarations of top-level classes\nanno EntitySet  Resource@declaredTopTypes; \n\n// All declarations of inner classes\nanno EntityRel  Resource@declaredSubTypes; \n\n// Which class defines which methods\nanno EntityRel  Resource@declaredMethods;  \n\n// Which class defines which fields\nanno EntityRel  Resource@declaredFields;   \n\n// Which methods call which other methods, and which \n// class initialization code calls which methods\nanno EntityRel  Resource@calls;\n\</pre\>","","","",{}," Detailed information can be extracted from Java projects in the current Eclipse workspace. \n The JDT library module depends heavily on the library modules\n \<ul\>\n  \<li\> \<a href=\"/show?concept=Resources\"\>Resources\</a\> for extracting projects and files from an Eclipse project.\</li\>\n  \<li\> \<a href=\"/show?concept=Java\"\>Java\</a\> for representing facts about Java source code.\</li\>\n  \n\</ul\> The access to facts about Java files proceeds in two steps:\n  \<ul\>\n  \<li\> First all facts are extracted from given projects or files.    The result is a Resource (see \<a href=\"/show?concept=Resources\"\>Resources\</a\>) that is annotated with all kinds of interesting information about that specific Resource, \n     and usually also about Resources that are contained inside that resource. \n     The project/file annotation declarations are shown above.\n  \</li\>\n  \<li\> Next, specific facts about the Java source code can be retrieved from the annotations.    These annotations all represent values of type \<code\>\n    BindingRel\n  \</code\>, \<code\>\n    EntityRel\n  \</code\> or \<code\>\n    ModifierRel\n  \</code\> that are summarized above.\n     A \<code\>\n    BindingRel\n  \</code\> is always used to map a source code location to a fully qualified Entity label of that part of the source code. \n     \<code\>\n    EntityRel\n  \</code\> is simply a short hand for any kind of relation between entities.\n  \</li\>\n  \n\</ul\> This information can be extracted by various functions defined in this module.\n"," Here is an example function that extracts the sub-type relation from a given project:\n  \<pre class=\"listing\"\>EntityRel getSubTypeInformation(loc project){\n  fm = extractProject(project);\n  return fm@extends + fm@implements + \n         {class(\"Object\") x top(fm@extends + fm@implements);\n}\n\</pre\>",""," This module is only available in the Eclipse version of Rascal.\n",[])