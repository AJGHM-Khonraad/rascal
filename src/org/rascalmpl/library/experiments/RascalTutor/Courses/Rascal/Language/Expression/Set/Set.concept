Name:Set

Related:

Synopsis: { Exp1, Exp2, ... }

Description: A set is an unordered sequence of values and has the following properties:
* All elements have the same static type.
* The order of the elements does not matter.
* A set contains an element only once. In other words, duplicate elements are eliminated and no matter how many times an element is added to a set, it will occur in it only once.

The type of a set has the form <tt>set[</tt>''T''<tt>]</tt>,
where ''T'' is an arbitrary type.

When variables of type set occur inside a set, their elements are automatically ''spliced'' into the surrounding set. This can be prevented by surrounding them with extra <tt>{</tt> and <tt>}</tt> brackets. Note that this approach is atypical: in Rascal splicing is implicit while in other languages it has to be indicated explicitly by the programmer.


Examples:
== Set types ==
<screen>
{1, 2, 3};
{<1,10>, <2,20>, <3,30>};
{1, "b", 3};
{<"a", 10>, <"b", 20>, <"c", 30>}
{{"a", "b"}, {"c", "d", "e"}}
</screen>
Note that
* {1, 2, 3} and {3, 2, 1} are identical sets (since order is not relevant).
* {1, 2, 3} and {1, 2, 3, 1} are also identical sets (since duplication is not relevant).

== List splicing ==
<warning>Something funny going one here</warning>
<screen>
//Introduce a set variable
S = {1, 2, 3};
// and observe how it is spliced in another set
{10, S, 20};
//or when it is surrounded with an extra braces;
{10, {S}, 20};
</screen>
Benefits:

Pittfalls:

Questions:

Choice: Sets can be used to represent a sequence of values when
b: The values have duplicates.
g: The values have no duplicates and no order.
b: The values are unordered.

Choice: The type of a set is determined by:
b: The type of the first element that was first added to the set.
b: The upperbound of the type of two arbitrary elements.
g: The upperbound of the type of all elements.

Type: <A:set[arb]>

Type: {<A:int>, <B:str>, <C:int>}

