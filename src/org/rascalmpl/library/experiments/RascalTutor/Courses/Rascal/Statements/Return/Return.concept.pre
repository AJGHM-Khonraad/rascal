concept("Return",|std:///experiments/RascalTutor/Courses/Rascal/Statements/Return/Return.concept|,[],[],{"Language"},{},""," \<ol\>\n  \<li\> \<code\>\n    return;\n  \</code\>\</li\>\n  \<li\> \<code\>\n    return \<i\>Exp\</i\>\n  \</code\>\</li\>\n  \n\</ol\>","","",{";","return"}," A return statement comes in two variants: without and with an expreesion,\n both variants end the execution of the current function. \n The first variant applies to functions with \<code\>\n  void\n\</code\> as return type. \n The second variants applies to non-void functions and returns the value of \<code\>\n  \<i\>Exp\</i\>\n\</code\> as result of the function invocation.\n The following rules apply:\n  \<ul\>\n  \<li\> The static type of \<code\>\n    \<i\>Exp\</i\>\n  \</code\> should be compatible with the declared return type of the function in    which the return statement occurs.\n  \</li\>\n  \<li\> In each function with a return type that is not void, every possible execution path through the body of    the function should end in a return statement.\n  \</li\>\n  \n\</ul\> In each function with a return type that is void, a return statement is implicitly assumed at the end of each execution path through the function body.\n","","","",[])