concept("IntroFunctions",|std:///experiments/RascalTutor/Courses/Rascal/Concepts/IntroFunctions/IntroFunctions.concept|,[],[],{},{"Function"},"","","","",{}," Functions allow the definition of frequently used operations. They have a name and formal parameters. They are explicitly declared and are fully typed. \n Functions can also be used as values thus enabling higher-order functions. \n Rascal is a higher-order language in which functions are first-class values.\n \<br/\>\n\<br/\>\n\n See \<a href=\"/show?concept=Function\"\>Function\</a\> for details.\n"," Here is an example of a function that counts the number of assignment statements in a program:\n \<pre class=\"listing\"\>int countAssignments(PROGRAM P){\n    int n = 0;\n    visit (P){\n    case asgStat(_, _):\n         n += 1;\n    }\n    return n;\n}\n\</pre\> Consider the following use of higher-order functions:\n \<pre class=\"listing\"\>int double(int x) { return 2 * x; }\n\nint triple(int x) { return 3 * x; }\n\nint f(int x, int (int) multi){ return multi(x); }\n\</pre\> The functions \<code\>\n  double\n\</code\> and \<code\>\n  triple\n\</code\> simply multiply their argument with a constant. \n Function \<code\>\n  f\n\</code\> is, however, more interesting. \n It takes an integer \<code\>\n  x\n\</code\> and a function \<code\>\n  multi\n\</code\> (with integer argument and integer result) as argument and \n applies multi to its own argument. \<code\>\n  f(5, triple)\n\</code\> will hence return \<code\>\n  15\n\</code\>. \n Function values can also be created anonymously as illustrated by the following, alternative, \n manner of writing this same call to \<code\>\n  f\n\</code\>:\n \<pre class=\"listing\"\>f(5, int (int y){return 3 * y;});\n\</pre\> Here the second argument of \<code\>\n  f\n\</code\> is an anonymous function.\n","","",[])