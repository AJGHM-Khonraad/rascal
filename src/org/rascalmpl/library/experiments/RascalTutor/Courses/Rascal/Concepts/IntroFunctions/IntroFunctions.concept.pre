concept("IntroFunctions",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/IntroFunctions/IntroFunctions.concept|,[],[],{},{"Function"},"","","","",{},"Functions allow the definition of frequently used operations. They have a name and formal parameters. They are explicitly declared and are fully typed. \nFunctions can also be used as values thus enabling higher-order functions. \nRascal is a higher-order language in which functions are first-class values.\n\<br/\>\n\<br/\>\nSee \<a href=\"/show?concept=Function\"\>Function\</a\> for details.\n","Here is an example of a function that counts the number of assignment statements in a program:\n\<pre class=\"listing\"\>int countAssignments(PROGRAM P){\n    int n = 0;\n    visit (P){\n    case asgStat(_, _):\n         n += 1;\n    }\n    return n;\n}\n\</pre\>\nConsider the following use of higher-order functions:\n\<pre class=\"listing\"\>int double(int x) { return 2 * x; }\n\nint triple(int x) { return 3 * x; }\n\nint f(int x, int (int) multi){ return multi(x); }\n\</pre\>\nThe functions \<code\>double\</code\> and \<code\>triple\</code\> simply multiply their argument with a constant. \nFunction \<code\>f\</code\> is, however, more interesting. \nIt takes an integer \<code\>x\</code\> and a function \<code\>multi\</code\> (with integer argument and integer result) as argument and \napplies multi to its own argument. \<code\>f(5, triple)\</code\> will hence return \<code\>15\</code\>. \nFunction values can also be created anonymously as illustrated by the following, alternative, \nmanner of writing this same call to \<code\>f\</code\>:\n\<pre class=\"listing\"\>f(5, int (int y){return 3 * y;});\n\</pre\>\nHere the second argument of \<code\>f\</code\> is an anonymous function.\n","","",[])