concept("Comprehensions",|cwd:///src/org/rascalmpl/library/experiments/RascalTutor/Courses/Rascal/Concepts/Comprehensions/Comprehensions.concept|,[],{},{},"","","","",{},"Comprehensions are a notation inspired by mathematical set-builder notation that helps to write succinct definitions of lists and sets. They are also inspired by queries as found in a language like SQL.\n\nRascal generalizes comprehensions in various ways. Comprehensions exist for lists, sets and maps. \nA comprehension consists of an expression that determines the successive elements to be included in the \nresult and a list of enumerators and tests (boolean expressions). \nThe enumerators produce values and the tests filter them. \n","A standard example is\n\n\<pre class=\"listing\"\>{ x * x | int x &lt;- [1 .. 10], x % 3 == 0 }\n\</pre\>which returns the set \<code\>{9, 36, 81}\</code\>, i.e., the squares of the integers in the range \<code\>[ 1 .. 10 ]\</code\> that \nare divisible by 3. A more intriguing example is\n\n\<pre class=\"listing\"\>{name | /asgStat(Id name, _) &lt;- P}\n\</pre\>\nwhich traverses program \<code\>P\</code\> and constructs a set of all identifiers that occur on the left hand \nside of assignment statements in \<code\>P\</code\>.\n","","",[])