course("Rascal Tutorial",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/|,"Rascal",("Rascal/Language/Expression/Set/Union":concept("Union",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/Union/Union.concept|,[],"\<tt\> \<i\>Expr\</i\>\<sub\>1\</sub\> + \<i\>Expr\</i\>\<sub\>2\</sub\>\</tt\>"," Expr1 + Expr2\n\n",{"+"},"If both \<i\>Expr\</i\>\<sub\>1\</sub\> and \<i\>Expr\</i\>\<sub\>2\</sub\> have a set as value, the result is the union of these two set values.If one of $Expr1 or \<i\>Expr\</i\>\<sub\>2\</sub\> does not have a set as value, it is first converted to a set before ahte union is computed.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3} + {4, 5, 6};\nset[int]: {6,5,4,3,2,1}\n\<b\>rascal\>\</b\>{1, 2, 3} + 4;\nset[int]: {4,3,2,1}\n\<b\>rascal\>\</b\>1 + { 2, 3, 4};\nset[int]: {4,3,2,1}\n\</pre\>","","",[exprTypeQuestion("Union1","",[],"\<set[arb]\> \<= \<set[prev[0]]\>")]),"Rascal/Datastructure/Tuple":concept("Tuple",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Tuple/Tuple.concept|,[],"","\n\n",{},"xxxx yyyy","","","",[]),"Rascal/Language/Expression/Number/LessThan":concept("LessThan",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/LessThan/LessThan.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> \< \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 \< NumExp2\n\n",{"\<"}," Yields \<tt\>true\</tt\> if the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> is numerically less than the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13 \< 12\nbool: false\n\<b\>rascal\>\</b\>12 \< 13\nbool: true\n\<b\>rascal\>\</b\>13.5 \< 12\nbool: false\n\<b\>rascal\>\</b\>12.5 \< 13\nbool: true\n\</pre\>","","",[exprTypeQuestion("LessThan1","",[],"\<int\> \< \<int\>"),exprTypeQuestion("LessThan2","",[],"\<real\> \< \<real\>"),exprTypeQuestion("LessThan3","",[],"\<num\> \< \<num\>"),exprTypeQuestion("LessThan4","",[],"\<num\> \< \<num\>"),exprQuestion("LessThan5","",[],"\<num\> \< \<num\>")]),"Rascal/Language/Expression/Number/toReal":concept("toReal",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/toReal/toReal.concept|,["Real"],"\<tt\> real toReal(num n)\</tt\>"," real toReal(num n)\n\n",{"n","real",")","toReal","(","num"}," Convert a number to a real","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>toReal(12)\nreal: 12.0\n\<b\>rascal\>\</b\>toReal(3.14)\nreal: 3.14\n\</pre\>","","",[]),"Rascal/Language/Expression/Number/GreaterThan":concept("GreaterThan",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/GreaterThan/GreaterThan.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> \> \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 \> NumExp2\n\n",{"\>"}," Yields \<tt\>true\</tt\> if the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> is numerically greater than the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13 \> 12\nbool: true\n\<b\>rascal\>\</b\>12 \> 13\nbool: false\n\<b\>rascal\>\</b\>13.5 \> 12\nbool: true\n\<b\>rascal\>\</b\>12.5 \> 13\nbool: false\n\</pre\>","","",[exprTypeQuestion("GreaterThan1","",[],"\<int\> \> \<int\>"),exprTypeQuestion("GreaterThan2","",[],"\<real\> \> \<real\>"),exprTypeQuestion("GreaterThan3","",[],"\<num\> \> \<num\>"),exprTypeQuestion("GreaterThan4","",[],"\<num\> \> \<num\>"),exprQuestion("GreaterThan5","",[],"\<num\> \> \<num\>")]),"Rascal/Datastructure/Set/Union":concept("Union",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Set/Union.concept|,[],"\<tt\> \<i\>Exp\</i\>\<sub\>1\</sub\> + \<i\>Exp\</i\>\<sub\>2\</sub\>\</tt\>"," Exp1 + Exp2\n\n",{"+"}," Union is an operation that combines two sets. The \<tt\>+\</tt\> operator is used to denote set union.","\<ul\>\n\<li\> \<tt\> {1, 2, 3} + {3, 4}\</tt\> // Union of two sets of integers; result is \<tt\>{1, 2, 3, 4}\</tt\>.\</li\>\n\n\</ul\>\n"," ","",[choiceQuestion("Union1"," What is the value of \<tt\>{1,3,5} + {3,4,5}\</tt\>?",[good("\<tt\>{1,3,4,5}\</tt\>"),good("\<tt\>{5,4,3,1}\</tt\>"),bad("\<tt\>{1,3,5,3,4,5}\</tt\>")]),typeQuestion("Union2","",[],"set[int]"),exprQuestion("Union3","",[],"\<set[int]\> + \<set[int]\>"),exprTypeQuestion("Union4","",[],"\<set[int]\> + \<set[int]\>")]),"Rascal/Language/Expression/Number/GreaterThanOrEqual":concept("GreaterThanOrEqual",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/GreaterThanOrEqual/GreaterThanOrEqual.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> \>= \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 \>= NumExp2\n\n",{"\>="}," Yields \<tt\>true\</tt\> if the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> is numerically greather than or equal to the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13 \>= 12\nbool: true\n\<b\>rascal\>\</b\>12 \>= 13\nbool: false\n\<b\>rascal\>\</b\>13.5 \>= 12\nbool: true\n\<b\>rascal\>\</b\>12.5 \>= 13\nbool: false\n\</pre\>","","",[exprTypeQuestion("GreaterThanOrEqual1","",[],"\<int\> \>= \<int\>"),exprTypeQuestion("GreaterThanOrEqual2","",[],"\<real\> \>= \<real\>"),exprTypeQuestion("GreaterThanOrEqual3","",[],"\<num\> \>= \<num\>"),exprTypeQuestion("GreaterThanOrEqual4","",[],"\<num\> \>= \<num\>"),exprQuestion("GreaterThanOrEqual5","",[],"\<num\> \>= \<num\>")]),"Rascal/Language/Expression/Set/Subset":concept("Subset",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/Subset/Subset.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> \<= \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 \<= SetExpr2\n\n",{"\<="},"Yields \<tt\>true\</tt\> if the value of \<i\>SetExpr\</i\>\<sub\>1\</sub\> is a subset of the value of \<i\>SetExpr\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3} \<= {1, 2, 3, 4};\nbool: true\n\<b\>rascal\>\</b\>{1, 2, 3} \<= {1, 2, 3};\nbool: true\n\</pre\>","","",[exprTypeQuestion("Subset1","",[],"\<set[arb]\> \<= \<set[prev[0]]\>")]),"Rascal/Language/Expression/Set/NotEqual":concept("NotEqual",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/NotEqual/NotEqual.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> != \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 != SetExpr2\n\n",{"!="},"Yields \<tt\>true\</tt\> if both arguments are unequal sets and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3} != {3, 2, 1};\nbool: false\n\<b\>rascal\>\</b\>{1, 2, 3} != {1, 2};\nbool: true\n\</pre\>","","",[exprTypeQuestion("NotEqual1","",[],"\<set[arb]\> != \<set[prev[0]]\>")]),"Rascal/Language/Expression/Number/Subtraction":concept("Subtraction",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Subtraction/Subtraction.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> - \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 - NumExp2\n\n",{"-"}," Yields the numerical result of subtracting the value of \<i\>NumExp\</i\>\<sub\>2\</sub\> from the value of \<i\>NumExp\</i\>\<sub\>1\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13 - 12\nint: 1\n\<b\>rascal\>\</b\>13.5 - 12\nreal: 1.5\n\<b\>rascal\>\</b\>12 - 13\nint: -1\n\<b\>rascal\>\</b\>12 - 13.5\nreal: -1.5\n\</pre\>","","",[exprTypeQuestion("Subtraction1","",[],"\<int\> - \<int\>"),exprTypeQuestion("Subtraction2","",[],"\<int\> - \<real\>"),exprTypeQuestion("Subtraction3","",[],"\<real\> - \<int\>"),exprQuestion("Subtraction4","",[],"\<num\> - \<num\>")]),"Rascal/Language/Expression/Number/Equal":concept("Equal",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Equal/Equal.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> == \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 == NumExp2\n\n",{"=="}," Yields \<tt\>true\</tt\> if the value of both arguments is numerically equal, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 == 12\nbool: true\n\<b\>rascal\>\</b\>12 == 12.0\nbool: true\n\<b\>rascal\>\</b\>12 == 13\nbool: false\n\<b\>rascal\>\</b\>12 == 13.0\nbool: false\n\<b\>rascal\>\</b\>3.14 == 3.14\nbool: true\n\<b\>rascal\>\</b\>3.14 == 3\nbool: false\n\</pre\>","","",[exprTypeQuestion("Equal1","",[],"\<int\> == \<int\>"),exprTypeQuestion("Equal2","",[],"\<real\> == \<real\>"),exprTypeQuestion("Equal3","",[],"\<num\> == \<num\>"),exprTypeQuestion("Equal4","",[],"\<num\> == \<num\>"),exprQuestion("Equal5","",[],"\<num\> == \<num\>")]),"Rascal/Language/Expression/Number/min":concept("min",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/min/min.concept|,[],"\<tt\> &T \<: num min(&T \<: num n, &T \<: num m)\</tt\>"," &T \<: num min(&T \<: num n, &T \<: num m)\n\n",{"n","(&","\<:","m",",",")","num","&","min"}," The smallest of two numbers. The type of the result is the same as the type of the smallest argument.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>min(12, 13);\nint: 12\n\<b\>rascal\>\</b\>min(12, -13);\nint: -13\n\<b\>rascal\>\</b\>min(3.14, 4);\nnum: 3.14\n\</pre\>","","",[exprTypeQuestion("min1","",[],"min(\<int\>, \<int\>)"),exprTypeQuestion("min2","",[],"min(\<int\>, \<real\>)"),exprTypeQuestion("min3","",[],"min(\<real\>, \<real\>)"),exprQuestion("min4","",[],"min(\<num\>, \<num\>)")]),"Rascal/SmallExamples/Hello":concept("Hello",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/SmallExamples/Hello/Hello.concept|,[],"","\n\n",{}," Variations on the ubiquitous \<i\>Hello World\</i\> example.","\<h1\> First version: hello on the command line \</h1\>\n\<warning\>Output of println disappears\</warning\>First, we import the library module IO since hello world requires printing. Next, we call \<tt\>println\</tt\> and proudly observe our first Rascal output!\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import IO;\nok\n\<b\>rascal\>\</b\>println(\"Hello world, this is my first Rascal program\");\nok\n\</pre\>Observe that \<tt\>rascal\>\</tt\> is the prompt of the Rascal system that shows that is ready for new input.\<h1\> Second version: hello in a function \</h1\>\nA slightly more audacious approach is to wrap the print statement in a function and call it:\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import IO;\nok\n\<b\>rascal\>\</b\>void hello() {\n\>\>\>\>\>\>\>   println(\"Hello world, this is my first Rascal program\");\n\>\>\>\>\>\>\>}\nvoid (): void hello();\n\</pre\>\nWhen you type in a command and continue it on a new line //the Rascal systems prompts you with \<tt\>\>\>\>\>\>\>\>\</tt\> to //indicate that more input is needed. Don\'\\t get scared by //the \<tt\>void (): void hello();\</tt\> that you get back //when typing in the hello function. The first  \<tt\>void ()\</tt\> part says the result is a function that // returns //nothing, and the second part  \<tt\>void hello()\</tt\> summarizes its value  (or would you prefer a hex dump?). Finally, we call the \<tt\>hello\</tt\> function and enjoy its output.\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>hello();\nok\n\</pre\>\<h1\> Third version: hello in a module \</h1\>\nThe summit of hello-engineering can be reached by placing all the above in a separate module:\<pre class=\"listing\"\>module demo::Hello\nimport IO;\n\npublic void hello() {\n   println(\"Hello world, this is my first Rascal program\");\n}\n\</pre\>Note that we added a public modifier to the definition of hello, since we want it to be visible outside the Hello module. Using this Hello module is now simple:\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import demo::Hello;\nok\n\<b\>rascal\>\</b\>hello();\nok\n\</pre\>","","",[]),"Rascal/Language/Expression/Number":concept("Number",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Number.concept|,[],"\<ul\>\<li\>\<tt\>int\</tt\>\</li\>\n\<li\>\<tt\>real\</tt\>\</li\>\n\<li\>\<tt\>num\</tt\>\</li\>\n\</ul\>","\nint\nreal\nnum\n\n",{"int","real","num"},"Numbers include integers (values of type \<tt\>int\</tt\>) and reals (values of type \<tt\>real\</tt\>). If both operands have the same type (\<tt\>int\</tt\> or \<tt\>real\</tt\>) then the operator is the corresponding operator on integers or reals. Otherwise, integer arguments are first converted to real and the real operator is applied.","","","",[]),"Rascal/Language/Expression/Number/arbReal":concept("arbReal",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/arbReal/arbReal.concept|,[],"\<tt\> real arbReal( )\</tt\>"," real arbReal( )\n\n",{"arbReal","real",")","("}," Returns an arbitrary real value in the interval [0.0, 1.0].","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>arbReal();\nreal: 0.7116093078573549\n\<b\>rascal\>\</b\>arbReal();\nreal: 0.7890099876338458\n\<b\>rascal\>\</b\>arbReal();\nreal: 0.45686620819657153\n\</pre\>","","",[]),"Rascal/Language/Expression/Number/toString":concept("toString",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/toString/toString.concept|,[],"\<tt\> str toString(num n)\</tt\>"," str toString(num n)\n\n",{"n","toString",")","(","num","str"}," Convert a number to a string.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>toString(12)\nstr: \"12\"\n\<b\>rascal\>\</b\>toString(3.14)\nstr: \"3.14\"\n\</pre\>","","",[]),"Rascal/Datastructure/Set/Comprehension":concept("Comprehension",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Set/Comprehension.concept|,[],"\<tt\> {\<i\>Exp\</i\> | \<i\>GenOrTest\</i\>\<sub\>1\</sub\>, \<i\>GenOrTest\</i\>\<sub\>2\</sub\>, ... }\</tt\>"," {Exp | GenOrTest1, GenOrTest2, ... }\n\n",{"...","}",",","|","{"}," A set comprehension ...",""," ","",[]),"Rascal/Language/Expression":concept("Expression",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Expression.concept|,[],"","\n\n",{},"","","","",[]),"Rascal/Language/Expression/Number/Multiplication":concept("Multiplication",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Multiplication/Multiplication.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> * \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 * NumExp2\n\n",{"*"}," Yields the result of multiplying the values of \<i\>NumExp\</i\>\<sub\>1\</sub\> and \<i\>NumExp\</i\>\<sub\>2\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 * 13\nint: 156\n\<b\>rascal\>\</b\>12 * 13.5\nreal: 162.00\n\<b\>rascal\>\</b\>-12*13\nint: -156\n\</pre\>","","",[exprTypeQuestion("Multiplication1","",[],"\<int\> * \<int\>"),exprTypeQuestion("Multiplication2","",[],"\<int\> * \<real\>"),exprTypeQuestion("Multiplication3","",[],"\<real\> * \<int\>"),exprQuestion("Multiplication4","",[],"\<num\> * \<num\>")]),"Rascal/Datastructure/Map/Comprehension":concept("Comprehension",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Map/Comprehension.concept|,[],"\<tt\> (\<i\>Exp\</i\> | \<i\>GenOrTest\</i\>\<sub\>1\</sub\>, \<i\>GenOrTest\</i\>\<sub\>2\</sub\>, ... )\</tt\>"," (Exp | GenOrTest1, GenOrTest2, ... )\n\n",{"...",",","|",")","("}," A map comprehension ...",""," ","",[]),"Rascal/Language/Expression/Number/Remainder":concept("Remainder",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Remainder/Remainder.concept|,[],"\<tt\> \<i\>IntExp\</i\>\<sub\>1\</sub\> % \<i\>IntExp\</i\>\<sub\>2\</sub\>\</tt\>"," IntExp1 % IntExp2\n\n",{"%"}," Yields the remainder when dividing the of \<i\>IntExp\</i\>\<sub\>1\</sub\> by the value of \<i\>IntExp\</i\>\<sub\>2\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 % 5\nint: 2\n\<b\>rascal\>\</b\>12 % 6\nint: 0\n\</pre\>",""," Remainder is only defined on integers:\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13.5 % 6\nStatic Error: prompt:///:1,0: modulo not supported on real and int\n\</pre\>",[exprTypeQuestion("Remainder1","",[],"\<int\> % \<int\>"),exprTypeQuestion("Remainder2","",[],"\<int\> % \<real\>"),exprTypeQuestion("Remainder3","",[],"\<real\> % \<int\>"),exprQuestion("Remainder4","",[],"\<num\> % \<num\>")]),"Rascal/Datastructure":concept("Datastructure",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Datastructure.concept|,[],"","\n\n",{}," Rascal has several built-in datatypes such as Booleans, Integers, Reals. Rascal also provides structured datatypes such such as lists, sets, maps and relations and also provides user-defined data structures","\<ul\>\n\<li\> \<tt\>data YesOrNo = yes() | no();\", []),\</tt\> // A set of integers\</li\>\n\n\</ul\>\n","\<ul\>\n\<li\> A rich set of options for representating application data.\</li\>\n\<li\> Efficient implementation.\</li\>\n\<li\> Static typechecking to prevent programming errors.\</li\>\n\n\</ul\>\n","\<ul\>\n\<li\> The choice between different data structures may be hard. \</li\>\n\n\</ul\>\n",[]),"Rascal/Language/Expression/Set/Equal":concept("Equal",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/Equal/Equal.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> == \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 == SetExpr2\n\n",{"=="},"Yields \<tt\>true\</tt\> if both arguments are equal sets and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3} == {3, 2, 1};\nbool: true\n\<b\>rascal\>\</b\>{1, 2, 3} == {1, 2};\nbool: false\n\</pre\>","","",[exprTypeQuestion("Equal1","",[],"\<set[arb]\> == \<set[prev[0]]\>")]),"Rascal/Language/Expression/Number/arbInt":concept("arbInt",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/arbInt/arbInt.concept|,[],"\<ul\>\<li\>\<tt\> int arbInt( )\</tt\>\</li\>\n\<li\>\<tt\>int arbInt(int limit)\</tt\>\</li\>\n\</ul\>"," int arbInt( )\nint arbInt(int limit)\n\n",{"int","arbInt","limit",")","("}," Return an arbitrary integer value. When the argument \<tt\>limit\</tt\> is given, the generated value is in the interval [0, \<tt\>limit\</tt\>].","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Integer;\nok\n\<b\>rascal\>\</b\>arbInt()\nint: 1274483446\n\<b\>rascal\>\</b\>arbInt()\nint: 1299746503\n\<b\>rascal\>\</b\>arbInt()\nint: 1945645490\n\</pre\>"," \<tt\>arbInt\</tt\> is a convenient generator for pseudo-random integers.","",[]),"Rascal/Language":concept("Language",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Language.concept|,[],"","\n\n",{},"","","","",[]),"Rascal/Language/Expression/Set/StrictSubset":concept("StrictSubset",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/StrictSubset/StrictSubset.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> \< \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 \< SetExpr2\n\n",{"\<"},"Yields \<tt\>true\</tt\> if the value of \<i\>SetExpr\</i\>\<sub\>1\</sub\> is a strict subset of the value of $SetExpr2,  and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3} \< {1, 2, 3, 4};\nbool: true\n\<b\>rascal\>\</b\>{1, 2, 3} \< {1, 3, 4};\nbool: false\n\<b\>rascal\>\</b\>{1, 2, 3} \< {1, 2, 3};\nbool: false\n\</pre\>","","",[exprTypeQuestion("StrictSubset1","",[],"\<set[arb]\> \< \<set[prev[0]]\>")]),"Rascal/Language/Expression/Set":concept("Set",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/Set.concept|,[],"\<tt\> { \<i\>Expr\</i\>\<sub\>1\</sub\>, \<i\>Expr\</i\>\<sub\>2\</sub\>, ... }\</tt\>"," { Expr1, Expr2, ... }\n\n",{"...","}",",","{"}," A set is an unordered sequence of values and has the following properties:\<ul\>\n\<li\> All elements have the same static type.\</li\>\n\<li\> The order of the elements does not matter.\</li\>\n\<li\> A set contains an element only once. In other words, duplicate elements are eliminated and no matter how many times an element is added to a set, it will occur in it only once.\</li\>\n\n\</ul\>\nThe type of a set has the form \<tt\>set[\</tt\>\<i\>T\</i\>\<tt\>]\</tt\>,where \<i\>T\</i\> is an arbitrary type.When variables of type set occur inside a set, their elements are automatically \<i\>spliced\</i\> into the surrounding set. This can be prevented by surrounding them with extra \<tt\>{\</tt\> and \<tt\>}\</tt\> brackets. Note that this approach is atypical: in Rascal splicing is implicit while in other languages it has to be indicated explicitly by the programmer.","\<h1\> Set types \</h1\>\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3};\nset[int]: {3,2,1}\n\<b\>rascal\>\</b\>{\<1,10\>, \<2,20\>, \<3,30\>};\nrel[int, int]: {\<2,20\>,\<1,10\>,\<3,30\>}\n\<b\>rascal\>\</b\>{1, \"b\", 3};\nset[value]: {3,\"b\",1}\n\<b\>rascal\>\</b\>{\<\"a\", 10\>, \<\"b\", 20\>, \<\"c\", 30\>}\nrel[str, int]: {\<\"b\",20\>,\<\"a\",10\>,\<\"c\",30\>}\n\<b\>rascal\>\</b\>{{\"a\", \"b\"}, {\"c\", \"d\", \"e\"}}\nset[set[str]]: {{\"b\",\"a\"},{\"e\",\"d\",\"c\"}}\n\</pre\>Note that\<ul\>\n\<li\> {1, 2, 3} and {3, 2, 1} are identical sets (since order is not relevant).\</li\>\n\<li\> {1, 2, 3} and {1, 2, 3, 1} are also identical sets (since duplication is not relevant).\</li\>\n\n\</ul\>\n\<h1\> List splicing \</h1\>\n\<warning\>Something funny going one here\</warning\>\<pre class=\"screen\"\>\<b\>rascal\>\</b\>//Introduce a set variable\nset[int]: {3,2,1}\n\<b\>rascal\>\</b\>S = {1, 2, 3};\nset[int]: {10,20,3,2,1}\n\</pre\>\n and observe how it is spliced in another set\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{10, S, 20};\nset[value]: {10,20,{3,2,1}}\n\</pre\>\nor when it is surrounded with an extra braces;\n\<pre class=\"screen\"\>\</pre\>","","",[typeQuestion("Set1","",[],"set[arb]"),exprTypeQuestion("Set2","",[],"{\<int\>, \<str\>, \<int\>}")]),"Rascal/Language/Expression/Number/Addition":concept("Addition",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Addition/Addition.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> + \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 + NumExp2\n\n",{"+"}," Yields the numerical sum of the values of \<i\>NumExp\</i\>\<sub\>1\</sub\> and \<i\>NumExp\</i\>\<sub\>2\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 + 13\nint: 25\n\<b\>rascal\>\</b\>12 + 13.5\nreal: 25.5\n\</pre\>","","",[exprTypeQuestion("Addition1","",[],"\<int\> + \<int\>"),exprTypeQuestion("Addition2","",[],"\<int\> + \<real\>"),exprTypeQuestion("Addition3","",[],"\<real\> + \<int\>"),exprQuestion("Addition4","",[],"\<num\> + \<num\>")]),"Rascal/Language/Expression/Set/Superset":concept("Superset",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/Superset/Superset.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> \>= \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 \>= SetExpr2\n\n",{"\>="},"Yields \<tt\>true\</tt\> if the vaue of \<i\>SetExpr\</i\>\<sub\>1\</sub\> is a superset of the value of \<i\>SetExpr\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3, 4} \>= {3, 2, 1};\nbool: true\n\<b\>rascal\>\</b\>{1, 2, 3, 4} \>= {4, 3, 2, 1};\nbool: true\n\</pre\>","","",[exprTypeQuestion("Superset1","",[],"\<set[arb]\> \>= \<set[prev[0]]\>")]),"Rascal/Datastructure/Set":concept("Set",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Set/Set.concept|,[],"\<tt\> {\<i\>Exp\</i\>\<sub\>1\</sub\>, \<i\>Exp\</i\>\<sub\>2\</sub\>, ... }\</tt\>"," {Exp1, Exp2, ... }\n\n",{"...","}",",","{"}," A set is an unordered collection of values without duplicates.\<h1\>Heading level 1\</h1\>\nHere is some text for the main section of the description. Now let\'\\s try a subsection ...\<h2\>Heading level 2\</h2\>\n... and \<b\>here\</b\> is the text of that subsection!"," This is just plain text with possible \<b\>markup\</b\>.Here is a set of integers: \<tt\>{3,2,1}\</tt\>. The type of this set is \<tt\>set[int]\</tt\> as can be seen when we type it into the Rascal evaluator:\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3}\nset[int]: {3,2,1}\n\</pre\>\n With some \<i\>interesting\</i\> comment inside: import the set module:\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Set;\nok\n\</pre\>\n and use the size function:\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>size({1,2,3});\nint: 3\n\<b\>rascal\>\</b\>2 + 3\nint: 5\n\</pre\>Here is a program listing:\<pre class=\"listing\"\>if(x \< 0)\n   x = 5;\n\</pre\>Other examples of sets are:\<ul\>\n\<li\> \<tt\> {1, 2, 3}\</tt\> // A set of integers\</li\>\n\<li\> \<tt\> {} \</tt\>       // The empty set\</li\>\n\<li\> \<tt\> {\"abc\"}\</tt\>   // A set containing a single string\</li\>\n\n\</ul\>\n"," Sets allow the storage of, in principle unbounded, numbers of values and provide many effcicient operations such as, for instance, membership test, union, intersection and many more.","\<ul\>\n\<li\> If the order of elements is relevant, one can better use lists than sets.\</li\>\n\<li\> If the multiplicity of elements is relevant, one can better use a map to represent the number of occurrences of a value.\</li\>\n\n\</ul\>\n",[typeQuestion("Set1","",[],"set[arb]"),typeQuestion("Set2","",[],"set[str]"),typeQuestion("Set3","",[],"set[list[int]]"),exprQuestion("Set4","",[],"\<arb[0,int,str,num,real]\> + \<prev[0]\>"),exprTypeQuestion("Set5","",[],"\<set[int]\> + \<set[int]\>")]),"Rascal/Language/Expression/Number/LessThanOrEqual":concept("LessThanOrEqual",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/LessThanOrEqual/LessThanOrEqual.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> \<= \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 \<= NumExp2\n\n",{"\<="}," Yields \<tt\>true\</tt\> if the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> is numerically less than or equal to the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>13 \<= 12\nbool: false\n\<b\>rascal\>\</b\>12 \<= 13\nbool: true\n\<b\>rascal\>\</b\>13.5 \<= 12\nbool: false\n\<b\>rascal\>\</b\>12.5 \<= 13\nbool: true\n\</pre\>","","",[exprTypeQuestion("LessThanOrEqual1","",[],"\<int\> \<= \<int\>"),exprTypeQuestion("LessThanOrEqual2","",[],"\<real\> \<= \<real\>"),exprTypeQuestion("LessThanOrEqual3","",[],"\<num\> \<= \<num\>"),exprTypeQuestion("LessThanOrEqual4","",[],"\<num\> \<= \<num\>"),exprQuestion("LessThanOrEqual5","",[],"\<num\> \<= \<num\>")]),"Rascal/Language/Expression/Number/toInt":concept("toInt",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/toInt/toInt.concept|,[],"\<tt\> int toInt(num n)\</tt\>"," int toInt(num n)\n\n",{"int","n",")","(","num","toInt"},"Convert a number to an integer. If \<tt\>n\</tt\> is an integer, this is the identity. If \<tt\>n\</tt\> is a real value (implemented as BigDecimal) to an integer (implemented as BigInteger). This conversion is analogous to a narrowing primitive conversion from double to long as defined in the Java Language Specification: any fractional part of this BigDecimal will be discarded. Note that this conversion can loose information about the precision of the BigDecimal value.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>toInt(13)\nint: 13\n\<b\>rascal\>\</b\>toInt(13.5)\nint: 13\n\</pre\>","","",[]),"Rascal/Language/Expression/Number/abs":concept("abs",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/abs/abs.concept|,[],"\<tt\> &T \<: num abs(&T \<: num n)\</tt\>"," &T \<: num abs(&T \<: num n)\n\n",{"n","(&","\<:",")","num","&","abs"}," Absolute value of the number \<tt\>n\</tt\>. The result type is equal to the type of the argument \<tt\>n\</tt\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>abs(13)\nint: 13\n\<b\>rascal\>\</b\>abs(-13)\nint: 13\n\<b\>rascal\>\</b\>abs(3.14)\nreal: 3.14\n\<b\>rascal\>\</b\>abs(-3.14)\nreal: 3.14\n\</pre\>","","",[exprQuestion("abs1","",[],"abs(\<num\>)")]),"Rascal/Datastructure/Map":concept("Map",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Map/Map.concept|,[],"\<tt\> ( \<i\>Key\</i\>\<sub\>1\</sub\> : \<i\>Value\</i\>\<sub\>1\</sub\>, ... )\</tt\>"," ( Key1 : Value1, ... )\n\n",{"...",",",":",")","("}," A map is a dictionary ...",""," ","",[]),"Rascal/Concepts":concept("Concepts",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Concepts/Concepts.concept|,[],"","\n\n",{},"","","","",[]),"Rascal/Language/Expression/Number/Division":concept("Division",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Division/Division.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> / \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 / NumExp2\n\n",{"/"}," Yields the result of diving the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> by the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 / 3\nint: 4\n\<b\>rascal\>\</b\>10 / 3\nint: 3\n\<b\>rascal\>\</b\>12 / 3.0\nreal: 4.\n\<b\>rascal\>\</b\>10 / 3.0\nreal: 3.333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333...\n\<b\>rascal\>\</b\>12 / 0\nUnexpected exception (generic Throwable): / by zero\nstacktrace: / by zero\n    at org.eclipse.imp.pdb.facts.impl.fast.IntegerValue.divide(IntegerValue.java:215)\n    at org.rascalmpl.interpreter.result.IntegerResult.divideInteger(IntegerResult.java:120)\n    at org.rascalmpl.interpreter.result.IntegerResult.divide(IntegerResult.java:40)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionDivision(Evaluator.java:2730)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionDivision(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$Division.accept(Expression.java:875)\n    at org.rascalmpl.interpreter.Evaluator.visitCommandExpression(Evaluator.java:981)\n    at org.rascalmpl.interpreter.Evaluator.visitCommandExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Command$Expression.accept(Command.java:64)\n    at org.rascalmpl.interpreter.Evaluator.eval(Evaluator.java:721)\n    at org.rascalmpl.interpreter.Evaluator.eval(Evaluator.java:699)\n    at org.rascalmpl.interpreter.RascalShell.handleInput(RascalShell.java:137)\n    at org.rascalmpl.interpreter.RascalShell.run(RascalShell.java:80)\n    at org.rascalmpl.library.Scripting.shell(Scripting.java:59)\n    at sun.reflect.GeneratedMethodAccessor118.invoke(null:-1)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.rascalmpl.interpreter.result.JavaMethod.invoke(JavaMethod.java:105)\n    at org.rascalmpl.interpreter.result.JavaMethod.call(JavaMethod.java:69)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1954)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Assignment.accept(Statement.java:266)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1954)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Assignment.accept(Statement.java:266)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1968)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$NonEmptyBlock.accept(Statement.java:532)\n    at org.rascalmpl.interpreter.Evaluator.matchAndEval(Evaluator.java:3176)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementSwitch(Evaluator.java:3243)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementSwitch(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Switch.accept(Statement.java:192)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1968)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$NonEmptyBlock.accept(Statement.java:532)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementWhile(Evaluator.java:2249)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementWhile(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$While.accept(Statement.java:80)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1954)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Assignment.accept(Statement.java:266)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementReturn(Evaluator.java:1848)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementReturn(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Return.accept(Statement.java:327)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1954)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Assignment.accept(Statement.java:266)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1968)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementNonEmptyBlock(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$NonEmptyBlock.accept(Statement.java:532)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementFor(Evaluator.java:3888)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementFor(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$For.accept(Statement.java:55)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1954)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementAssignment(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Assignment.accept(Statement.java:266)\n    at org.rascalmpl.interpreter.result.RascalFunction.call(RascalFunction.java:86)\n    at org.rascalmpl.interpreter.result.OverloadedFunctionResult.call(OverloadedFunctionResult.java:82)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1665)\n    at org.rascalmpl.interpreter.Evaluator.visitExpressionCallOrTree(Evaluator.java:1)\n    at org.rascalmpl.ast.Expression$CallOrTree.accept(Expression.java:64)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1752)\n    at org.rascalmpl.interpreter.Evaluator.visitStatementExpression(Evaluator.java:1)\n    at org.rascalmpl.ast.Statement$Expression.accept(Statement.java:248)\n    at org.rascalmpl.interpreter.Evaluator.eval(Evaluator.java:641)\n    at org.rascalmpl.interpreter.Evaluator.visitCommandStatement(Evaluator.java:971)\n    at org.rascalmpl.interpreter.Evaluator.visitCommandStatement(Evaluator.java:1)\n    at org.rascalmpl.ast.Command$Statement.accept(Command.java:48)\n    at org.rascalmpl.interpreter.Evaluator.eval(Evaluator.java:721)\n    at org.rascalmpl.interpreter.Evaluator.eval(Evaluator.java:699)\n    at org.rascalmpl.interpreter.RascalShell.handleInput(RascalShell.java:137)\n    at org.rascalmpl.interpreter.RascalShell.run(RascalShell.java:80)\n    at org.rascalmpl.interpreter.RascalShell.main(RascalShell.java:178)\n\</pre\>","","",[exprTypeQuestion("Division1","",[],"\<int\> / \<int\>"),exprTypeQuestion("Division2","",[],"\<int\> / \<real\>"),exprTypeQuestion("Division3","",[],"\<real\> / \<int\>"),exprQuestion("Division4","",[],"\<num\> / \<num\>")]),"Rascal/SmallExamples":concept("SmallExamples",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/SmallExamples/SmallExamples.concept|,[],"","\n\n",{},"","","","",[]),"Rascal":concept("Rascal",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Rascal.concept|,[],"","\n\n",{}," Rascal is a language for \<i\>meta-programming\</i\>, that is, it is intended for reading, analyzing, and transforming other programs. Main features are:\<ul\>\n\<li\> Statically typed: many programming errors are caught before execution.\</li\>\n\<li\> Value-oriented: all values are immutable once they have been created.\</li\>\n\<li\> ...\</li\>\n\n\</ul\>\n","\<ul\>\n\<li\> A program to refactor Java source code.\</li\>\n\<li\> Implementation of a \<i\>domain-specific language\</i\> (DSL) for describing business processes.\</li\>\n\n\</ul\>\n","\<ul\>\n\<li\> Very high-level language: many problems can be solved with a concise Rascal program.\</li\>\n\<li\> Rich feature set.\</li\>\n\n\</ul\>\n","\<ul\>\n\<li\> Rascal programs are not yet highly optimized so execution maybe slow for some programs.\</li\>\n\n\</ul\>\n",[]),"Rascal/Datastructure/Tuple/Toople":concept("Toople",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Datastructure/Tuple/Toople/Toople.concept|,[],"","\n\n",{},"","","","",[]),"Rascal/Language/Expression/Number/Negation":concept("Negation",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Negation/Negation.concept|,[],"\<tt\> - \<i\>NumExp\</i\>\</tt\>"," - NumExp\n\n",{"-"}," Yields the negated values of \<i\>NumExp\</i\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>-12\nint: -12\n\<b\>rascal\>\</b\>-13.5\nreal: -13.5\n\<b\>rascal\>\</b\>- -12\nint: 12\n\</pre\>","","",[exprTypeQuestion("Negation1","",[],"-\<int\>"),exprTypeQuestion("Negation2","",[],"-\<real\>"),exprQuestion("Negation3","",[],"-\<num\>")]),"Rascal/Language/Expression/Number/Conditional":concept("Conditional",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/Conditional/Conditional.concept|,[],"\<tt\> ( \<i\>BoolExp\</i\> ) ? \<i\>NumExp\</i\>\<sub\>1\</sub\> : \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," ( BoolExp ) ? NumExp1 : NumExp2\n\n",{"?",":",")","("}," If the value of \<i\>BoolExp\</i\> is \<tt\>true\</tt\> then the value of \<i\>NumExp\</i\>\<sub\>1\</sub\> else the value of \<i\>NumExp\</i\>\<sub\>2\</sub\>.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>(3 \> 2) ? 10 : 20\nint: 10\n\<b\>rascal\>\</b\>(3 \> 20) ? 10 : 20\nint: 20\n\</pre\>","","",[exprTypeQuestion("Conditional1","",[],"(\<int\> \> \<int\>) ? \<int\> : \<int\>"),exprTypeQuestion("Conditional2","",[],"(\<int\> \> \<int\>) ? \<real\> : \<real\>"),exprTypeQuestion("Conditional3","",[],"(\<int\> \> \<int\>) ? \<int\> : \<real\>"),exprQuestion("Conditional4","",[],"(\<int\> \> \<int\>) ? \<int\> : \<int\>"),exprQuestion("Conditional5","",[],"(\<int\> \> \<int\>) ? \<int\> : \<real\>")]),"Rascal/Language/Expression/Number/max":concept("max",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/max/max.concept|,[],"\<tt\> &T \<: num max(&T \<: num n, &T \<: num m)\</tt\>"," &T \<: num max(&T \<: num n, &T \<: num m)\n\n",{"n","(&","\<:","m",",",")","num","&","max"}," The largest of two numbers. The type of the result is the same as the type of the largest argument.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import Number;\nok\n\<b\>rascal\>\</b\>max(12, 13);\nint: 13\n\<b\>rascal\>\</b\>max(12, 13.5);\nnum: 13.5\n\<b\>rascal\>\</b\>max(12, 11.5);\nnum: 12\n\</pre\>","","",[exprTypeQuestion("max1","",["import Number;"],"         max(\<int\>, \<int\>)"),exprTypeQuestion("max2","",["import Number;"],"         max(\<int\>, \<real\>)"),exprTypeQuestion("max3","",["import Number;"],"         max(\<real\>, \<real\>)"),exprQuestion("max4","",["import Number;"],"         max(\<num\>, \<num\>)")]),"Rascal/Language/Expression/Set/StrictSuperset":concept("StrictSuperset",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Set/StrictSuperset/StrictSuperset.concept|,[],"\<tt\> \<i\>SetExpr\</i\>\<sub\>1\</sub\> \> \<i\>SetExpr\</i\>\<sub\>2\</sub\>\</tt\>"," SetExpr1 \> SetExpr2\n\n",{"\>"},"Yields \<tt\>true\</tt\> if the vaue of \<i\>SetExpr\</i\>\<sub\>1\</sub\> is a strict superset of the value of \<i\>SetExpr\</i\>\<sub\>2\</sub\>, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>{1, 2, 3, 4} \> {3, 2, 1};\nbool: true\n\<b\>rascal\>\</b\>{1, 2, 3, 4} \> {4, 3, 2, 1};\nbool: false\n\</pre\>","","",[exprTypeQuestion("StrictSuperset1","",[],"\<set[arb]\> \> \<set[prev[0]]\>")]),"Rascal/Language/Expression/Number/NotEqual":concept("NotEqual",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/Expression/Number/NotEqual/NotEqual.concept|,[],"\<tt\> \<i\>NumExp\</i\>\<sub\>1\</sub\> != \<i\>NumExp\</i\>\<sub\>2\</sub\>\</tt\>"," NumExp1 != NumExp2\n\n",{"!="}," Yields \<tt\>true\</tt\> if the value of both arguments is numerically unequal, and \<tt\>false\</tt\> otherwise.","\<pre class=\"screen\"\>\<b\>rascal\>\</b\>12 != 13\nbool: true\n\<b\>rascal\>\</b\>12 != 12\nbool: false\n\<b\>rascal\>\</b\>12 != 13.0\nbool: true\n\<b\>rascal\>\</b\>12.0 != 13\nbool: true\n\<b\>rascal\>\</b\>3.14 != 3\nbool: true\n\<b\>rascal\>\</b\>3.14 != 3.14\nbool: false\n\</pre\>","","",[exprTypeQuestion("NotEqual1","",[],"\<int\> != \<int\>"),exprTypeQuestion("NotEqual2","",[],"\<real\> != \<real\>"),exprTypeQuestion("NotEqual3","",[],"\<num\> != \<num\>"),exprTypeQuestion("NotEqual4","",[],"\<num\> != \<num\>"),exprQuestion("NotEqual5","",[],"\<num\> != \<num\>")]),"Rascal/SmallExamples/Factorial":concept("Factorial",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/SmallExamples/Factorial/Factorial.concept|,[],"","\n\n",{},"Compute the factorial function.","\<pre class=\"listing\"\>module demo::Factorial\n\npublic int fac(int N)\n{\n  if(N \<= 0)\n     return 1; \n  else\n     return N * fac(N - 1);\n}\n\</pre\>It uses a conditional statement to distinguish cases and here is how to use it:\<pre class=\"screen\"\>\<b\>rascal\>\</b\>import demo::Factorial;\nok\n\<b\>rascal\>\</b\>fac(47);\nint: 258623241511168180642964355153611979969197632389120000000000\n\</pre\>Indeed, Rascal has arbitrary length integers.",""," This example illustrates some ordinary programming features in Rascal. It does not highlight Rascal\'\\s specific strength.",[]),"Rascal/Language/TypesAndValues/Integer":concept("Integer",|file:///Users/paulklint/software/source/roll/rascal/src/org/rascalmpl/library/experiments/Tutor/Courses/Rascal/Language/TypesAndValues/Integer/Integer.concept|,[],"","\n\n",{},"The integer values are represented by the type \<tt\>int\</tt\> and are written as usual. They can be arbitrarily large.","\<ul\>\n\<li\> \<tt\>12\</tt\>\</li\>\n\<li\> \<tt\>0\</tt\>\</li\>\n\<li\> \<tt\>-123456789\</tt\>\</li\>\n\n\</ul\>\n","","",[])),{<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/LessThanOrEqual">,<"Rascal/Datastructure","Rascal/Datastructure/Map">,<"Rascal/Datastructure/Set","Rascal/Datastructure/Set/Union">,<"Rascal/Language/Expression","Rascal/Language/Expression/Set">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/toReal">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Remainder">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/arbReal">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/GreaterThanOrEqual">,<"Rascal","Rascal/Concepts">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/Union">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Equal">,<"Rascal/Datastructure/Tuple","Rascal/Datastructure/Tuple/Toople">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/NotEqual">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/toString">,<"Rascal/Language","Rascal/Language/Expression">,<"Rascal/Datastructure/Set","Rascal/Datastructure/Set/Comprehension">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/min">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Conditional">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/NotEqual">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Multiplication">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/arbInt">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/Equal">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/StrictSuperset">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/StrictSubset">,<"Rascal","Rascal/SmallExamples">,<"Rascal/Language","Rascal/Language/TypesAndValues">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/max">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Negation">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/abs">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/toInt">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/Subset">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Division">,<"Rascal/Datastructure","Rascal/Datastructure/Set">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/GreaterThan">,<"Rascal/Language/Expression","Rascal/Language/Expression/Number">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Subtraction">,<"Rascal","Rascal/Language">,<"Rascal/Datastructure/Map","Rascal/Datastructure/Map/Comprehension">,<"Rascal/SmallExamples","Rascal/SmallExamples/Factorial">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/Addition">,<"Rascal/Language/TypesAndValues","Rascal/Language/TypesAndValues/Integer">,<"Rascal/SmallExamples","Rascal/SmallExamples/Hello">,<"Rascal","Rascal/Datastructure">,<"Rascal/Language/Expression/Number","Rascal/Language/Expression/Number/LessThan">,<"Rascal/Language/Expression/Set","Rascal/Language/Expression/Set/Superset">,<"Rascal/Datastructure","Rascal/Datastructure/Tuple">},["!=","%","&","(","(&",")","*","+",",","-","...","/",":","\<","\<:","\<=","==","\>","\>=","?","Addition","Comprehension","Concepts","Conditional","Datastructure","Division","Equal","Expression","Factorial","GreaterThan","GreaterThanOrEqual","Hello","Integer","Language","LessThan","LessThanOrEqual","Map","Multiplication","Negation","NotEqual","Number","Rascal","Remainder","Set","SmallExamples","StrictSubset","StrictSuperset","Subset","Subtraction","Superset","Toople","Tuple","TypesAndValues","Union","abs","arbInt","arbReal","int","limit","m","max","min","n","num","real","str","toInt","toReal","toString","{","|","}"],())