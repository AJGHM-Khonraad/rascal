Name: Constructor

Details:

Categories:

Syntax: `$Cons$ ( $Exp_1$, $Exp_2$, ... )`

Types:
| `$Exp_1$` | `$Exp_2$` | ... |  `$Cons$ ( $Exp_1$, $Exp_2$, ... )` |
|:----------|:----------|:----|:------------------------------------|
| `$T_1$`   | `$T_2$`   | ... | depends on ADT declaration          |

Function:

Synopsis:

Description:

In ordinary programming languages record types or classes exist to introduce a new type name for a collection of related, 
named, values and to provide access to the elements of such a collection through their name. 

In Rascal, algebraic data types provide this facility. They have to be declared, see [Declarations/AlgebraicDataType], and
then values can be declared using calls to the declared constructor functions.
The constructor name $Cons$ should correspond (regarding name, arity and argument types) to one of the alternatives
in the ADT declaration.

Examples:

Benefits:

Pittfalls:

Questions:

