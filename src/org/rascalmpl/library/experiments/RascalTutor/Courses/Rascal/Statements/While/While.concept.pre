concept("While",|std:///experiments/RascalTutor/Courses/Rascal/Statements/While/While.concept|,[],[],{"Language"},{"Append","Match","NoMatch"},""," \<code\>\n  while ( \<i\>Exp\</i\> ) \<i\>Statement\</i\>;\n\</code\>\n","","",{";",")","(","while"}," The Boolean expression \<code\>\n  \<i\>Exp\</i\>\n\</code\> is evaluated repeatedly and \<code\>\n  \<i\>Statement\</i\>\n\</code\> is executed when the test is true. \n Execution ends the first time that the test yields false. \n The test \<code\>\n  \<i\>Exp\</i\>\n\</code\> is executed from scratch in each repetition and only the first \<code\>\n  true\n\</code\> value (if any) is used.\n This is relevant when \<code\>\n  \<i\>Exp\</i\>\n\</code\> contains a \<a href=\"/show?concept=Match\"\>Match\</a\> or \<a href=\"/show?concept=NoMatch\"\>NoMatch\</a\> operator.\n \<br/\>\n\<br/\>\n\n By default, the value of a while statement is the empty list. In general, the value of a while statement \n consists of all values contributed by \<a href=\"/show?concept=Append\"\>Append\</a\> statements that are executed during the repeated execution \n of its body \<code\>\n  \<i\>Statement\</i\>\n\</code\>.\n"," \<pre class=\"screen\"\>\<b\>rascal\>\</b\>import IO;\nok\n\<b\>rascal\>\</b\>int n = 3;\nint: 3\n\<b\>rascal\>\</b\>while( n &gt; 0 ) { println(&quot;n = &lt;n&gt;&quot;); n -= 1; }\nn = 3\nn = 2\nn = 1\nlist[void]: []\n\</pre\>\n  Now build a list result using the \<code\>\n  append\n\</code\> statement:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>n = 3;\nint: 3\n\<b\>rascal\>\</b\>while (n &gt; 0) { append n * n; n -= 1; }\nlist[int]: [9,4,1]\n\</pre\>","","",[])