Name: Rascal

Synopsis:
Rascal is a powerful but simple meta-programming language that can be learned in layers. 

Syntax:

Types:

Function:

Details:
Motivation InstallingAndRunning EASY Concepts Declarations Expressions Statements Libraries

Description:
What you need to know about Rascal is this, in this particular order:
* Why and how would you use Rascal? Check out [Motivation] and [EASY].
* How to get started? Read [InstallingAndRunning].
* What are the basic constructs in Rascal? Learn about its basic [Concepts].
* What is the complete reference to Rascal? Read or search through the documentation on any [Expressions], [Statements] or [Declarations].


What are the key distinguishing features of Rascal?
* [Patterns] to express query and search in (models of) programs.
* [Visit] to traverse and transform (models of) meta programs.
* [SyntaxDefinition] to effectively produce parsers for programming languages and other formats.
* [ConcreteSyntax] to analyse and transform source code using patterns in the programming language that is manipulated.
* Rapid [IDEConstruction] using Eclipse [IMP].
* Reusable aspects of meta programming in the [Libraries].

Examples:
Read simple examples of Rascal code in [Recipes:Basic]. The Rascal [Libraries] contain many examples of Rascal code. 
You will also find example code on almost every page in this tutor environment.

Benefits:
* Rascal has everything you need for any kind of meta program you want to write. See [Motivation].

Pitfalls:
* Rascal is a procedural/functional language with immutable data. Do not confuse this with object-oriented programming.
* Rascal allows you to write highly imperative code, but it has declarative constructs that lead to shorter and more readable code.
* Rascal execution is sometimes slow; we are working on more optimization.
* Rascal has a static type system, but the type-checker is not yet finished; currently types are checked at run-time.

Questions:

