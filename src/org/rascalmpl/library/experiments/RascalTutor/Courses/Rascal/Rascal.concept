Name: Rascal

Details: Motivation InstallingAndRunning EASY Concepts Examples Declarations Expressions Statements Libraries

Categories: Language Library Example

Synopsis: Rascal is a powerful but simple language that can be learned in layers. 

Description: 

<br><br>
What you need to know about Rascal is this, in this particular order:
* Why and how would you use Rascal? Check out [Motivation] and [EASY]
* How to get started? Read [InstallingAndRunning]
* What are the basic constructs in Rascal? Learn about its basic [Concepts].
* What is the complete reference to Rascal? Read or search through the documentation on any [Expressions], [Statements] and [Declarations].

<br><br>
What are the key distinguishing features of Rascal?
* [Patterns] to express query and search in (models of) programs
* [Visit] to traverse and transform (models of) meta programs
* [SyntaxDefinition] to effectively produce parsers for programming languages and other formats
* [ConcreteSyntax] to analyse and transform source code using patterns in the programming language that is manipulated.
* Rapid [IDEConstruction] using Eclipse [IMP].
* Reusable aspects of meta programming in the [Libraries].
 
Examples:

Read about simple [Examples] of Rascal code. The Rascal [Libraries] also contain demos of Rascal. By the way, you will find example code on almost every page in this tutor environment.

Benefits:
* It should have everything you need for any kind of meta program you want to write. See [Motivation]

Pitfalls:

* See [Motivation].
* It is not an object-oriented programming language. It is an procedural/functional language with immutable data.
* It allows you to write highly imperative code, but do not forget that it might have a better declarative construct for you to use instead.
* It is slow sometimes because it needs more optimization.
* It has a static type system, but the type-checker is not finished yet.

Questions:


