Name:Operators

Details:

Categories:

Related:

Synopsis:

Description:

An _operator expression_ consists of an operator and one or more operands. The evaluation order of the operands depends on the operator. 
The operator is applied to the operands and the resulting value (or values in some cases) is the result of the operator expression. 

All operators are summarized in the following table. They are listed from highest precendence
 to lowest precedence. In other words, operators listed earlier in the table bind stronger.


<table width="100%">
<caption>__Rascal Operators (from highest to lowest precedence)__</caption>
<col align=left width="30%">
<col align=left width="30%">
<col align=left width="40%">

<tr><th align="left">Operator</th>	                   <th align="left">See</th>	               <th align="left">Short Description</th></tr>
  
<tr><td>`$Exp$ . $Name$`</td>	                   <td>[FieldSelection]</td>                 <td>Select named field from structured value</td></tr>

<tr><td>`$Exp_1$ [ $Name$ = $Exp_2$ ]`</td>     <td>[FieldAssignment]</td>             <td>Change value of named field of structured value</tr>

<tr><td>`$Exp$ < $field_1$, ... >`</td>               <td>[FieldProjection]</td>                <td>Select fields from relation or structured value</td></tr>

<tr><td>`$Exp_1$ [ $Exp_2$ , $Exp_3$, .... ]`</td> <td>[Subscription]</td>                    <td>Retrieve values for given index from list, tuple or relation.</td></tr>

<tr><td> `$Exp$?`</td>                                        <td>[Boolean/IsDefined]</td>          <td>Test whether an expression has a defined value</td></tr>

<tr><td> `!$Exp$`</td>                                          <td>[Boolean/Negation]</td>           <td>Negate a Boolean value</td></tr>

<tr><td>`- $Exp$`</td>                                        <td>[Integer/Negation],
                                                                                            [Real/Negation],
                                                                                            [Number/Negation]</td>	       <td>Negation of integer, real or number</td></tr>

<tr><td>`$Exp$ +`</td>	                                   <td>Transitive closure</td>	       <td>Transitive closure on relation</td></tr>

<tr><td>`$Exp$ *`</td>                                        <td>Reflexive transitive closure</td>
                                                                                                                                               <td>Reflexive transitive closure on relation</td></tr>

<tr><td>`$Exp$ @ $Name$`</td>	                   <td>Annotation selection</td>	       <td>Value of annotation $Name$ of $Exp$'s value</td></tr>

<tr><td>`$Exp_1$ [@ $Name$ = $Exp_2$]`</td>	   <td>Annotation replacement</td>   <td>Assign value of $Exp_2$ to annotation $Name$ of $Exp_1$'s 
                                                                                                                                                        value</td></tr>

<tr><td>`$Exp_1$ o $Exp_2$`</td>	                   <td>Composition</td>	               <td>$Exp_1$ and $Exp_2$ should evaluate to a relation; 
                                                                                                                                                         return their composition. Note: the letter "o" is thus a
                                                                                                                                                          keyword!</td></tr>

<tr><td>`$Exp_1$ x $Exp_2$`</td>	                   <td>CarthesianProduct</td>	        <td>Carthesian product of two relations</td></tr>


<tr><td>`$Exp_1$ / $Exp_2$`</td>	                   <td>[Integer/Division],
                                                                                                [Real/Division],
                                                                                                [Number/Division]</td>	        <td>Divide two integers, reals or numbers</td></tr>

<tr><td>`$Exp_1$ % $Exp_2$`</td>	                   <td>[Integer/Modulo]</td>	        <td>Modulo on integers</td></tr>

<tr><td>`$Exp_1$ * $Exp_2$`</td>	                   <td>[Integer/Multiplication],
                                                                                                 [Real/Multiplication],
                                                                                                 [Number/Multiplication],
                                                                                                 [List/Product],
                                                                                                 [Set/Product],
                                                                                                 [Relation/Product]</td>	<td>Multiply integers, reals or number; product of list, set, or relation</td></tr>

<tr><td>`$Exp_1$ & $Exp_2$`</td>                        <td>[List/Intersection],
                                                                                                  [Set/Intersection],
                                                                                                  [Map/Intersection],
                                                                                                  [Relation/Intersection]</td><td>Intersection of list, set, map or relation</td></tr>

<tr><td>`$Exp_1$ + $Exp_2$`</td>	                   <td>[Integer/Addition],
                                                                                                 [Real/Addition],
                                                                                                 [Number/Addition],
                                                                                                 [String/Concatenate],
                                                                                                 [List/Concatenate],
                                                                                                 [Tuple/Concatenate],
                                                                                                 [Set/Union],
                                                                                                 [Map/Union],
                                                                                                 [Relation/Union]</td>           <td> Add integer, real or number; concatenate string, list or tuple; 
                                                                                                                                                             union on set, map, or relation</td></tr>

<tr><td>`$Exp_1$ - $Exp_2$`</td>                         <td>[Integer/Subtraction],
                                                                                                 [Real/Subtraction],
                                                                                                 [Number/Subtraction],
                                                                                                 
                                                                                                 [List/Difference],
                                                                                                
                                                                                                 [Set/Difference],
                                                                                                 [Map/Difference],
                                                                                                 [Relation/Difference]</td>	<td>Subtract integer, real or number; difference of list, set, map,
                                                                                                                                                                         or relation</td></tr>

<tr><td>`$Exp_1$ join $Exp_2$`</td>	                   <td>[Relation/Join]</td>                                        <td>Join on relation</td></tr>

<tr><td>`$Exp_1$ in $Exp_2$`</td>	                   <td>ElementOf</td>                         <td>Membership test for element in  list, map, set or relation</td></tr>

<tr><td>`$Exp_1$ notin $Exp_2$`</td>	           <td>NotElementOf</td>                   <td>Negated membership test for element in  list, map, set or relation</td></tr>

<tr><td>`$Exp_1$ <= $Exp_2$`</td>	                   <td>[Integer/LessThanOrEqual], [Real/LessThanOrEqual],[Number/LessThanOrEqual],
                                                                                              [String/LessThanOrEqual], [Location/LessThanOrEqual], [DateTime/LessThanOrEqual],
                                                                                              [List/SubList], [Set/SubSet], [Map/SubSet], [Relation/Subset]</td>
                                                                                                                                              <td>Less than or equal on all values</td></tr>

<tr><td>`$Exp_1$ < $Exp_2$`</td>	                    <td>[Integer/LessThan], [Real/LessThan],[Number/LessThan],
                                                                                              [String/LessThan], [Location/LessThan], [DateTime/LessThan],
                                                                                              [List/StrictSubList], [Set/StrictSubSet], [Map/StrictSubSet], [Relation/StrictSubset]</td>
                                                                                                                                              <td>Less than on all values</td></tr>

<tr><td>`$Exp_1$ >= $Exp_2$`</td>	                    <td>[Integer/GreaterThanOrEqual], [Real/GreaterThanOrEqual],[Number/GreaterThanOrEqual],
                                                                                              [String/GreaterThanOrEqual], [Location/GreaterThanOrEqual], [DateTime/GreaterThanOrEqual],
                                                                                              [List/SuperList], [Set/SuperSet], [Map/SuperSet], [Relation/Superset]</td>
                                                                                                                                              <td>Greater than or equal on all values</td></tr>

<tr><td>`$Exp_1$ > $Exp_2$`</td>	                   <td>[Integer/GreaterThan], [Real/GreaterThan],[Number/GreaterThan],
                                                                                              [String/GreaterThan], [Location/GreaterThan], [DateTime/GreaterThan],
                                                                                              [List/StrictSuperList], [Set/StrictSuperSet], [Map/StrictSuperSet], [Relation/StrictSuperset]</td>
                                                                                                                                              <td>Greater than on all values.</td></tr>

<tr><td> `$Pat$ := $Exp$`</td>                           <td>Match</td>                             <td>Pattern matches value of expression</td></tr>

<tr><td> `$Pat$ !:= $Exp$`</td>                          <td>NoMatch</td>                         <td>Pattern does not match value of expression</td></tr>

<tr><td>`$Exp_1$ == $Exp_2$`</td>	                   <td>[Integer/Equal], [Real/Equal],[Number/Equal],
                                                                                              [String/Equal], [Location/Equal], [DateTime/Equal],
                                                                                              [List/Equal], [Set/Equal], [Map/Equal], [Relation/Equal]</td>
                                                                                                                                              <td>Equality on all values</td></tr>

<tr><td>`$Exp_1$ != $Exp_2$`</td>	                   <td>[Integer/NotEqual], [Real/NotEqual],[Number/NotEqual],
                                                                                              [String/NotEqual], [Location/NotEqual], [DateTime/NotEqual],
                                                                                              [List/NotEqual], [Set/NotEqual], [Map/NotEqual], [Relation/NotEqual]</td>
                                                                                                                                              <td>Inequality on integers, reals, numbers, strings,
                                                                                                                                                          locations, dateTime, value,
                                                                                                                                                          lists, 
                                                                                                                                                          maps, sets, relations.</td></tr>
<tr><td>`$Exp_1$ ? $Exp_2$`</td>                     <td>IfDefinedOtherwise</td>        <td>Value of expression when it is defined, 
                                                                                                                                                        otherwise alternative value</td></tr>

<tr><td>`$Exp_1$ ? $Exp_2$ : $Exp_3$`</td>          <td>ConditionalExpressions</td> <td>Conditional expression for all types</td></tr>

<tr><td> `$Exp_1$ ==> $Exp_2$`</td>                  <td>Implication</td>                    <td>Implication on Boolean values</td></tr>

<tr><td> `$Exp_1$ <==> $Exp_2$`</td>               <td>Equivalence</td>                   <td>Equivalence on Boolean values</td></tr>

<tr><td> `$Exp_1$ && $Exp_2$`</td>                     <td>And</td>                                <td>And on Boolean values</td></tr>

<tr><td> `$Exp_1$ || $Exp_2$`</td>                       <td>Or</td>                                    <td>Or on Boolean values</td></tr>

</table>

Examples:

Benefits:

Pittfalls:

Questions:

