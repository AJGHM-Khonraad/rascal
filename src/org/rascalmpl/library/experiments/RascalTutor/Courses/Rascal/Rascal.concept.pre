concept("Rascal",|std:///experiments/RascalTutor/Courses/Rascal/Rascal.concept|,[],["Motivation","InstallingAndRunning","EASY","Concepts","Examples","Declarations","Expressions","Statements","Libraries"],{"Library","Example","Language"},{"InstallingAndRunning","IMP","IDEConstruction","Visit","Expressions","Concepts","Examples","Libraries","Declarations","ConcreteSyntax","SyntaxDefinition","Motivation","Statements","Patterns","EASY"}," Rascal is a powerful but simple language that can be learned in layers. \n","","","",{}," \<br\>\<br\>\n What you need to know about Rascal is this, in this particular order:\n \<ul\>\<li\> Why and how would you use Rascal? Check out \<a href=\"/show?concept=Motivation\"\>Motivation\</a\> and \<a href=\"/show?concept=EASY\"\>EASY\</a\>\</li\>\n\<li\> How to get started? Read \<a href=\"/show?concept=InstallingAndRunning\"\>InstallingAndRunning\</a\>\</li\>\n\<li\> What are the basic constructs in Rascal? Learn about its basic \<a href=\"/show?concept=Concepts\"\>Concepts\</a\>.\</li\>\n\<li\> What is the complete reference to Rascal? Read or search through the documentation on any \<a href=\"/show?concept=Expressions\"\>Expressions\</a\>, \<a href=\"/show?concept=Statements\"\>Statements\</a\> and \<a href=\"/show?concept=Declarations\"\>Declarations\</a\>.\<br/\>\n\<br/\>\n \<br\>\<br\>\n What are the key distinguishing features of Rascal?\n\</li\>\n\<li\> \<a href=\"/show?concept=Patterns\"\>Patterns\</a\> to express query and search in (models of) programs\</li\>\n\<li\> \<a href=\"/show?concept=Visit\"\>Visit\</a\> to traverse and transform (models of) meta programs\</li\>\n\<li\> \<a href=\"/show?concept=SyntaxDefinition\"\>SyntaxDefinition\</a\> to effectively produce parsers for programming languages and other formats\</li\>\n\<li\> \<a href=\"/show?concept=ConcreteSyntax\"\>ConcreteSyntax\</a\> to analyse and transform source code using patterns in the programming language that is manipulated.\</li\>\n\<li\> Rapid \<a href=\"/show?concept=IDEConstruction\"\>IDEConstruction\</a\> using Eclipse \<a href=\"/show?concept=IMP\"\>IMP\</a\>.\</li\>\n\<li\> Reusable aspects of meta programming in the \<a href=\"/show?concept=Libraries\"\>Libraries\</a\>.\</li\>\n\</ul\>"," Read about simple \<a href=\"/show?concept=Examples\"\>Examples\</a\> of Rascal code. The Rascal \<a href=\"/show?concept=Libraries\"\>Libraries\</a\> also contain demos of Rascal. By the way, you will find example code on almost every page in this tutor environment.\n"," \<ul\>\<li\> It should have everything you need for any kind of meta program you want to write. See \<a href=\"/show?concept=Motivation\"\>Motivation\</a\>\</li\>\n\</ul\>"," \<ul\>\<li\> See \<a href=\"/show?concept=Motivation\"\>Motivation\</a\>.\</li\>\n\<li\> It is not an object-oriented programming language. It is an procedural/functional language with immutable data.\</li\>\n\<li\> It allows you to write highly imperative code, but do not forget that it might have a better declarative construct for you to use instead.\</li\>\n\<li\> It is slow sometimes because it needs more optimization.\</li\>\n\<li\> It has a static type system, but the type-checker is not finished yet.\</li\>\n\</ul\>",[])