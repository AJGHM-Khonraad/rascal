concept("Variable",|std:///experiments/RascalTutor/Courses/Rascal/Declarations/Variable/Variable.concept|,[],[],{"Language"},{},""," \<ol\>\n  \<li\> \<code\>\n    \<i\>Type\</i\> \<i\>Name\</i\> = \<i\>Exp\</i\>;\n  \</code\>\</li\>\n  \<li\> \<code\>\n    \<i\>Type\</i\> \<i\>Name\</i\>;\n  \</code\>\</li\>\n  \n\</ol\>"," \<table\>\n  \<col align=\"left\" /\>\<col align=\"left\" /\>\<tr\>\<th align=\"left\"\>\<code\>\n    \<i\>Type\</i\>\n  \</code\>  \</th\>\<th align=\"left\"\> \<code\>\n    \<i\>Exp\</i\>\n  \</code\>     \</th\>\</tr\>\<tr\>\<td align=\"left\"\>\n     \<code\>\n      \<i\>Type\</i\>\n    \</code\> \n  \</td\>\<td align=\"left\"\>\n     \<code\>\n      &lt;: \<i\>Type\</i\>\n    \</code\> \n  \</td\>\</tr\>\n\</table\>","",{"\<:","=",";"}," The effect of a variable declaration is to introduce a new variable \<code\>\n  \<i\>Name\</i\>\n\</code\> and\n to assign the value of expression \<code\>\n  \<i\>Exp\</i\>\n\</code\> to \<code\>\n  \<i\>Name\</i\>\n\</code\>. A mention of \<code\>\n  \<i\>Name\</i\>\n\</code\> later on in the same scope\n will be replaced by this value, provided that \<code\>\n  \<i\>Name\</i\>\n\</code\>s value has not been changed by an intermediate assignment. \n \<br/\>\n\<br/\>\n\n When a variable is declared, it has as scope the nearest enclosing block, or the module when declared at the module level.\n \<br/\>\n\<br/\>\n\n The following rules apply:\n  \<ul\>\n  \<li\> Double declarations in the same scope are not allowed.\</li\>\n  \<li\> The type of \<code\>\n    \<i\>Exp\</i\>\n  \</code\> should be compatible with \<code\>\n    \<i\>Type\</i\>\n  \</code\>, i.e., it should be a subtype of \<code\>\n    \<i\>Type\</i\>\n  \</code\>.\</li\>\n  \n\</ul\> As a convenience, also declarations without an initialization expression are permitted inside functions (but not at the module level)\n  and have the form\n \<pre class=\"listing\"\>\<i\>Type\</i\> \<i\>Name\</i\>; \n\</pre\> and only introduce the variable \<code\>\n  \<i\>Name\</i\>\n\</code\>.\n \<br/\>\n\<br/\>\n\n Rascal provides local type inference, which allows the implicit declaration of variables that are used locally in functions. The following rules apply:\n  \<ul\>\n  \<li\> An implicitly declared variable is declared at the level of the current scope, this may the whole function body or a block nested in it.\</li\>\n  \<li\> An implicitly declared variable gets as type the type of the first value that is assignment to it.\</li\>\n  \<li\> If a variable is implicitly declared in different execution path of a function, all these implicit declarations should result in the same type.\</li\>\n  \<li\> All uses of an implicitly declared variable must be compatible with its implicit type.\</li\>\n  \n\</ul\>"," \<pre class=\"screen\"\>\</pre\>\n  Two explicit variable declarations:\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>int max = 100;\nint: 100\n\<b\>rascal\>\</b\>min = 0;\nint: 0\n\</pre\>\n  An implicit variable declaration\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>day = {&lt;&quot;mon&quot;, 1&gt;, &lt;&quot;tue&quot;, 2&gt;, &lt;&quot;wed&quot;,3&gt;, \n&gt;&gt;&gt;&gt;&gt;&gt;&gt;       &lt;&quot;thu&quot;, 4&gt;, &lt;&quot;fri&quot;, 5&gt;, &lt;&quot;sat&quot;,6&gt;, &lt;&quot;sun&quot;,7&gt;};\nrel[str, int]: {\n  &lt;&quot;thu&quot;,4&gt;,\n  &lt;&quot;mon&quot;,1&gt;,\n  &lt;&quot;sat&quot;,6&gt;,\n  &lt;&quot;wed&quot;,3&gt;,\n  &lt;&quot;tue&quot;,2&gt;,\n  &lt;&quot;fri&quot;,5&gt;,\n  &lt;&quot;sun&quot;,7&gt;\n}\n\</pre\>\n  Variable declaration and assignment leading to type error\n\n\<pre class=\"screen\"\>\<b\>rascal\>\</b\>int month = 12;\nint: 12\n\<b\>rascal\>\</b\>month =&quot;December&quot;;\nStatic Error: prompt:///:1,7: Expected int, but got str\n\</pre\>","","",[])