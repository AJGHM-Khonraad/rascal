concept("Properties",|std:///experiments/RascalTutor/Courses/Rascal/Libraries/Vis/Figure/Properties/Properties.concept|,[],[],{"Library"},{}," \<pre class=\"listing\"\>data FProperty =\n/* sizes */\n     width(num w)                  // width of figure\n   | height(num h)                 // height of figure\n   | size(num s)\t\t   // width and height (same value)\n   | size(num h, num v)            // width and height (separate values)\n   | gap(num g)                    // same hor. and vert. gap between figures\n   | gap(num h, num v)             // different hor. and vert. gap between figures\n   | hgap(num h)                   // horizontal gap between figures\n   | vgap(num v)                   // vertical gap between figures\n\n   \n/* alignment */\n   | anchor(num h, num v)\t   // horizontal (0=left; 1=right) and\n   | hanchor(num h)                // vertical anchor (0=top,1=bottom)\n   | vanchor(num v)\n   \n/* line and border properties */\n   | lineWidth(num w)\t           // line width\n   | lineColor(Color c)\t           // line color\n   | lineColor(str cname)          // named line color\n   \n   | fillColor(Color c)\t           // fill color of shapes and text\n   | fillColor(str cname)          // named fill color\n   \n/* wedge properties */\n   | fromAngle(num a)\n   | toAngle(num a)\n   | innerRadius(num r)\n\n/* shape properties */\n   | shapeConnected()              // shapes consist of connected points\n   | shapeClosed()    \t\t   // closed shapes\n   | shapeCurved()                 // use curves instead of straight lines\n   \n/* font and text properties */\n   | font(str fname)               // named font\n   | fontSize(int s)               // font size\n   | fontColor(Color c)            // font color\n   | fontColor(str cname)\n   | textAngle(num a)              // text rotation\n   \n/* interaction properties */  \n   | mouseOver(Figure fig)         // add figure when mouse is over current figure\n   | doi(int d)                    // limit degree-of-interest to nesting level d\n   \n/* other properties */\n   | id(str name)                  // name of figure (used in edges and various layouts)\n   ;\n\</pre\>",""," \<ul\>\<li\> \<code\>FProperty\</code\>\</li\>\n\<li\> \<code\>alias FProperties = list[FProperty];\</code\>\</li\>\n\</ul\>","",{"list","];","=","[","FProperty","FProperties","alias"}," An \<code\>FProperty\</code\> describes a property of a figure. Figures may be nested and a given property\n value applies to all nested figures until it is overruled by a new declaration in a nested figure for the same property.\n \<br/\>\n\<br/\>\n\n All figures may have an (optional) list of properties which is represented by the type \<code\>FProperties\</code\>.\n","","","",[])