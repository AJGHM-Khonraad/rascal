concept("Properties",|std:///experiments/RascalTutor/Courses/Rascal/Libraries/Vis/Figure/Properties/Properties.concept|,[],[],{"Library"},{}," \<pre class=\"listing\"\>data FProperty =\n/* sizes */\n     width(num w)                  // width of figure\n   | width(computedNum cw)\n\n   | height(num h)                 // height of figure\n   | height(computedNum ch)\n\n   | size(num s)\t\t   // width and height (same value)\n   | size(computedNum cs)\n   | size(num w, num h)            // width and height (separate values)\n   | size(computedNum cw, computedNum ch)\n\n   | gap(num g)                    // same hor. and vert. gap between figures\n   | gap(computedNum cg)\n   | gap(num w, num h)             // different hor. and vert. gap between figures\n   | gap(computedNum cw, computedNum ch)\n\n   | hgap(num w)                   // horizontal gap between figures\n   | hgap(computedNum cw)\n\n   | vgap(num h)                   // vertical gap between figures\n   | vgap(computedNum ch)\n\n   \n/* alignment */\n   | anchor(num h, num v)\t   // horizontal (0=left; 1=right) and\n                                   // vertical anchor (0=top,1=bottom)\n   | anchor(computedNum h, computedNum v)\n\n   | hanchor(num h)   \n   | hanchor(computedNum ch)\n             \n   | vanchor(num v)\n   | vanchor(computedNum cv)\n   \n/* line and border properties */\n   | lineWidth(num w)\t           // line width\n   | lineWidth(computedNum cw)\n\n   | lineColor(Color c)\t           // line color\n   | lineColor(computedColor cc)\n   | lineColor(str cname)          // named line color\n   \n   | fillColor(Color c)\t           // fill color of shapes and text\n   | fillColor(computedColor cc)\n   | fillColor(str cname)          // named fill color\n   \n/* wedge properties */\n   | fromAngle(num a)\n   | fromAngle(computedNum ca)\n\n   | toAngle(num a)\n   | toAngle(computedNum ca)\n\n   | innerRadius(num r)\n   | innerRadius(computedNum cr)\n\n/* shape properties */\n   | shapeConnected()              // shapes consist of connected points\n   | shapeClosed()    \t\t   // closed shapes\n   | shapeCurved()                 // use curves instead of straight lines\n   \n/* font and text properties */\n   | font(str fname)               // named font\n   | font(computedStr cfname)\n\n   | fontSize(int s)               // font size\n   | fontSize(computedInt cs)\n\n   | fontColor(Color c)            // font color\n   | fontColor(computedColor cc)\n   | fontColor(str cname)\n\n   | textAngle(num a)              // text rotation\n   | textAngle(computedNum ca)\n   \n/* interaction properties */  \n   | mouseOver(Figure fig)         // add figure when mouse is over current figure\n   | onClick(void() handler)       // callback to handle mouse clicks\n   | doi(int d)                    // limit degree-of-interest to nesting level d\n   | doi(computedInt cd)\n   \n/* other properties */\n   | id(str name)                  // name of figure (used in edges and various layouts)\n   | id(computedStr cname)\n\n   | hint(str name)               // hint for layout strategy: now only for graphs\n   | hint(computedStr name)\n   ;\n\</pre\>",""," \<ul\>\<li\> \<code\>FProperty\</code\>\</li\>\n\<li\> \<code\>alias FProperties = list[FProperty];\</code\>\</li\>\n\<li\> \<code\>alias computedInt = int();\</code\>\</li\>\n\<li\> \<code\>alias computedReal = real();\</code\>\</li\>\n\<li\> \<code\>alias computedNum = num();\</code\>\</li\>\n\<li\> \<code\>alias computedStr = str();\</code\>\</li\>\n\<li\> \<code\>alias computedColor = Color();\</code\>\</li\>\n\</ul\>","",{"list","];","real","=","[","FProperty","();","FProperties","computedNum","computedColor","str","alias","int","computedReal","num","computedStr","Color","computedInt"}," An \<code\>FProperty\</code\> describes a property of a figure. Figures may be nested and a given property\n value applies to all nested figures until it is overruled by a new declaration in a nested figure for the same property.\n \<br/\>\n\<br/\>\n\n All figures may have an (optional) list of properties which is represented by the type \<code\>FProperties\</code\>.\n \<br/\>\n\<br/\>\n\n Observe that most properties have two variants:\n  \<ul\>\<li\> A version with an argument of type \<code\>int\</code\>, \<code\>real\</code\>, \<code\>num\</code\>, \<code\>str\</code\> or \<code\>Color\</code\>. The values of these arguments are computed when the property is constructed, i.e., when the Figure is constructed.\</li\>\n\<li\> A version with \<i\>computed\</i\> argument like \<code\>computeInt\</code\>, \<code\>computeReal\</code\>, \<code\>computeNum\</code\>, \<code\>computeStr\</code\> or \<code\>computeColor\</code\>. These are functions that   return a value. These functions are called during the \<i\>rendering\</i\> of the figure to which this property is attached. In this way, properties\n   can be changed.\n\</li\>\n\</ul\>"," See the more detailed description of each property for examples. Just a few examples to show you the spirit:\n \<ul\>\<li\> \<code\>width(10)\</code\> sets the width property to the value 10.\</li\>\n\<li\> \<code\>width(int(){return 10;})\</code\> sets the width property to the result of executing the argument function \<code\>int(){return 10;}\</code\> which is, indeed, not a big deal. This usage becomes more interesting when the argument function returns different values for each call.\</li\>\n\</ul\>"," \<ul\>\<li\> Values of properties are defined by an \<i\>inheritance-like\</i\> approach: values can be nested and more nested declarations overrule more global ones. This has as advantage that default values can be set at the top level of a figure.\</li\>\n\</ul\>"," \<ul\>\<li\> A figure may inherit an undesired value for a property; the solution is to redeclare that property locally with the desired value.\</li\>\n\</ul\>",[])