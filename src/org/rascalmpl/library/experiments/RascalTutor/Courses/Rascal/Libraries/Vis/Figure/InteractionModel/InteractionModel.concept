Name: InteractionModel

Details:

Syntax:

Types:

Function:

Synopsis:

Description:
The visualizations created with the Figure library can use the following generic primitives for user interaction:

* __Mouse__. A figure can define its behaviour in response to mouse interaction:
  ** [onMouseMove]: what to do when the mouse moves while it is already in the area occupied by the current figure.
  ** [onMouseOver]: what to do when the mouse enters or leaves the area occupied by the current figure.
  ** [onClick]: what to do when the user clicks on the current figure.
* __Keyboard__. A figure can define its behaviour in response to keyboard input:
  ** [onKey]: what to do when the user pressed a keyboard key when the mouse if over the current figure.
* __Interaction widget__. Various interaction widgets are provided:
  ** [button]: creates a button that can be pressed.
  ** [textField]: creates an area where text can be entered.
  ** [combo]: creates a drop down list from which entries can be selected.
  ** [checkbox]: creates an on/off check box.
  ** [scaleSlider]: creates a slider to enter a numeric value.


The above interaction primitives all have one or more Rascal functions as argument; they act as _callbacks_ when 
the interaction primitive is activated by the user.

The following properties further support interaction:
* [fswitch]: replace the current figure by one from a given (static) list of figures.
* [computeFigure]: replace the current figure by a dynamically created new figure.
* [timer]: associate a timer with a figure.

Examples:

Benefits:

Pitfalls:
* Interactive applications highly depend on dynamically changing property values. 
  They frequently use the possibiliy to use a function, rather than a value for properties.
  For instance, instead of using `size(10)` one may use `size(int(){ return n;}`, where `n`
  is a variable in the scope of the function that created the figure.
* Unfortunately we cannot show an interactive version of the above example here.
  Try it out in Rascal itself.

Questions:

