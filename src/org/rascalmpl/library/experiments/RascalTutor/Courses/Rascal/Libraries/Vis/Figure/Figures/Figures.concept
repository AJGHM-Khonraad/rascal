Name: Figures

Details:

Categories: Library

Syntax:

Types:
* `Figure`
* `alias Figures = list[Figure];`

Function:

Synopsis:

<listing>
data Figure = 
/* Atomic figures */

     text(str s, FProperty props...)	        // text label
   
                                                
   | outline(map[int,Color] coloredLines,       // file outline
             FProperty props...)
   
   
/* Containers */

   | box(FProperty props...)			// rectangular box
   | box(Figure fig, FProperty props...)        // rectangular box with inner element
   
   | ellipse(FProperty props...)		// ellipse
   | ellipse(Figure fig, FProperty props...)    // ellipse with inner element
   
   | wedge(FProperty props...)			// wedge
   | wedge(Figure fig, FProperty props...)      // wedge with inner element
   
   | space(FProperty props...)			// invisible box (used for spacing)
   | space(Figure fig, FProperty props...)      // invisible box with visible inner element
 
/* Compositions */
   
   | use(Figure elem)                           // use another figure
   | use(Figure fig, FProperty props...)
 
   | hcat(Figures figs, FProperty props...)     // horizontal concatenation
   
   | vcat(Figures figs, FProperty props...)     // vertical concatenation
   
   | hvcat(Figures figs, FProperty props...)    // horizontal and vertical concatenation

   | overlay(Figures figs, FProperty props...)  // overlay (stacked) composition
   
   | shape(list[Vertex] points,                 // shape of to be connected vertices
           FProperty props...)                 
   
   | grid(Figures figs, FProperty props...)     // placement on fixed grid
   
   | pack(Figures figs, FProperty props...)     // composition by 2D packing
   
   | graph(Figures nodes, list[Edge] edges,     // composition of nodes and edges as graph
           FProperty props...)     
   
                	                        
   | tree(Figures nodes, list[Edge] edges,      // composition of nodes and edges as tree
          FProperty props...)
   
   | treemap(Figures nodes, list[Edge] edges,   // composition of nodes and edges as treemap
             FProperty props...) 
   
/* Transformations */

   | rotate(num angle, Figure fig)              // Rotate figure around its anchor point
   | scale(num perc, Figure fig)	        // Scale figure (same for h and v)
   | scale(num xperc, num yperc, Figure fig)	// Scale figure (different for h and v)
   ;
</listing>

Description:
`Figure` is the primary data type that represents figures. A list of figures is represented by the type `Figures`.
Figures can be classified as follows:

* __Atomic Figures__: indivisible figures such as [text] and [outline].
* __Containers__: most figures may act as containers for other figures. For example, a [box], [ellipse] or [wedge] may contain 
  an arbitrarily complex subfigure.
* __Compositions__: serve to combine figures into new figures. Examples are horizontal ([hcat]) or vertical ([vcat]) concatenation 
  or placement of figures in a [grid], [graph] or [tree].
* __Transformations__: perform geometric transformations on a given figure.

Examples:

Benefits:

Pitfalls:
We are cheating a bit with the above data declaration for Figure. 
The current version of Rascal does not yet support data constructors with a variable number of arguments as needed
for the properties. At the moment, the above constructors are provided as Rascal functions that can
have variable arguments, see [Function].

Questions:

