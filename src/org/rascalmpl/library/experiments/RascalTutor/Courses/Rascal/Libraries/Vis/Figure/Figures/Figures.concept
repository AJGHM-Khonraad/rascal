Name: Figures

Details:

Categories: Library

Syntax:

Types:
* `Figure`
* `alias Figures = list[Figure];`

Function:

Synopsis:

<listing>
data Figure = 
/* Atomic figures */

     text(FProperties props, str s)		// text label
   | text(str s)			        // text label
   
                                                // file outline
   | outline(FProperties props, map[int,Color] coloredLines)
   | outline(map[int,Color] coloredLines)
   
   
/* Containers */

   | box(FProperties props)			// rectangular box
   | box(FProperties props, Figure fig)         // rectangular box with inner element
   
   | ellipse(FProperties props)			// ellipse
   | ellipse(FProperties props, Figure fig)     // ellipse with inner element
   
   | wedge(FProperties props)			// wedge
   | wedge(FProperties props, Figure fig)       // wedge with inner element
   
   | space(FProperties props)			// invisible box (used for spacing)
   | space(FProperties props, Figure fig)       // invisible box with visible inner element
 
/* Compositions */
   
   | use(Figure elem)                           // use another figure
   | use(FProperties props, Figure fig)
 
   | hcat(Figures elems)                        // horizontal concatenation
   | hcat(FProperties props, Figures figs)
   
   | vcat(Figures elems)                        // vertical concatenation
   | vcat(FProperties props, Figures figs)
   
   | hvcat(Figures elems)                       // horizontal and vertical concatenation
   | hvcat(FProperties props, Figures figs)
   
   | overlay(Figures elems)                     // overlay (stacked) composition
   | overlay(FProperties props, Figures figs)
   
   | shape(list[Vertex] points)                 // shape of to be connected vertices
   | shape(FProperties props,list[Vertex] points)
   
   | grid(Figures elems)                        // placement on fixed grid
   | grid(FProperties props, Figures figs)
   
   | pack(Figures elems)                        // composition by 2D packing
   | pack(FProperties props, Figures figs)
   
   | graph(Figures nodes, list[Edge] edges)     // composition of nodes and edges as graph
   | graph(FProperties, Figures nodes, list[Edge] edges)
   
                	                        // composition of nodes and edges as tree
   | tree(Figures nodes, list[Edge] edges) 
   | tree(FProperties, Figures nodes, list[Edge] edges)
   
   | treemap(Figures nodes, list[Edge] edges, str root) 
   | treemap(FProperties, Figures nodes, list[Edge] edges)
   
/* Transformations */

   | rotate(num angle, Figure fig)              // Rotate figure around its anchor point
   | scale(num perc, Figure fig)	        // Scale figure (same for h and v)
   | scale(num xperc, num yperc, Figure fig)	// Scale figure (different for h and v)
   ;
</listing>

Description:
`Figure` is the primary data type that represents figures. A list of figures is represented by the type `Figures`.
Figures can be classified as follows:

* __Atomic Figures__: indivisible figures such as [text] and [outline].
* __Containers__: most figures may act as containers for other figures. For example, a [box], [ellipse] or [wedge] may contain 
  an arbitrarily complex subfigure.
* __Compositions__: serve to combine figures into new figures. Examples are horizontal ([hcat]) or vertical ([vcat]) concatenation 
  or placement of figures in a [grid], [graph] or [tree].
* __Transformations__: perform geometric transformations on a given figure.

Examples:

Benefits:

Pittfalls:

Questions:

