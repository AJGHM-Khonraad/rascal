Name: graph

Details:

Categories: Library

Syntax:

Types:

Function:
`Figure graph(Figures nodes, list[Edge] edges, FProperty props...)`
   

Synopsis:

Description:
Takes a list of nodes and a list of edges and draws a graph. 
The nodes can be arbitrary figures that should have a name (using the [id] property). 
The edges determine connections between named nodes. 

The following constraints apply:
* All nodes should have an id property with a unique value.
* All edges should refer to ids that are defined by the nodes.


The following properties are applicable to graphs:
* [id] to define the identity of nodes and to define edges between nodes.
* [hint] determines the layout algorithm to use. Currently, only `"layered"` is supported.
* [layer] is used to define the placement of nodes in the same layer.
* [orientation] is used to define the drawing direction.
* [toArrow] and [fromArrow] are used to define arrows on edges.
* [label] defines an edge label.

Examples:
<figure g1.png>
nodes = [ box(text("A"), id("A"), size(50), fillColor("lightgreen")),
     	  box(text("B"), id("B"),  size(60), fillColor("orange")),
     	  ellipse( text("C"), id("C"),  size(70), fillColor("lightblue")),
     	  ellipse(text("D"), id("D"), size(200, 40), fillColor("violet")),
          box(text("E"), id("E"), size(50), fillColor("silver")),
	  box(text("F"), id("F"), size(50), fillColor("coral"))
     	];
edges = [ edge("A", "B"), edge("B", "C"), edge("B", "D"), edge("A", "C"),
          edge("C", "E"), edge("C", "F"), edge("D", "E"), edge("D", "F"),
          edge("A", "F")
    	]; 
render(graph(nodes, edges, hint("layered"), gap(100)));
</figure>

![graph 1](g1.png)

<figure g2.png>
nodes = [ box(text("A"), id("A"), size(30), fillColor("green")),
     	  box(text("B"), id("B"),  size(30), fillColor("red")),
     	  box(text("C"), id("C"),  size(30), fillColor("blue")),
     	  box(text("D"), id("D"), size(30), fillColor("purple")),
     	  box(text("E"), id("E"), size(30), fillColor("lightblue")),
     	  box(text("F"), id("F"), size(30), fillColor("orange")),
     	  box(text("G"), id("G"), size(30), fillColor("brown")),
     	  box(text("H"), id("H"), size(30), fillColor("black")),
     	  box(text("I"), id("I"), size(30), fillColor("grey")),
     	  box(text("J"), id("J"), size(30), fillColor("white")),
     	  box(text("K"), id("K"), size(30), fillColor("deeppink")),
     	  box(text("L"), id("L"), size(30), fillColor("deeppink")),
     	  box(text("M"), id("M"), size(30), fillColor("deeppink"))
     	];
edges = [ edge("A", "B"),  edge("A", "C"),  edge("A", "D"),
    	  edge("B", "E"), edge("B", "F"), edge("B", "G"),
    	  edge("C", "H"),  edge("C", "I"),  edge("C", "J"),
    	  edge("D", "K"),   edge("D", "L"),  edge("D", "M"),
    	  edge("K", "G"), edge("A", "G")
    	]; 
render(graph(nodes, edges, hint("layered"), gap(40)));
</figure>

![graph 1](g2.png)

Benefits:

Pitfalls:
* The layered graph layout performs best when (these are imperfections of the current implementation):
** the node sizes are more or less equal.
** the [hgap] is set to a value equal to the average width of the nodes.

* Spring layout is at the moment disabled.

Questions:

